class
 refid "Type:FTW"
 instance QName(PackageNamespace("Type"), "FTW")
  extends QName(PackageNamespace(""), "Object")
  flag SEALED
  flag PROTECTEDNS
  protectedns ProtectedNamespace("Type:FTW")
  iinit
   refid "Type:FTW/instance/init"
   body
    maxstack 2
    localcount 1
    initscopedepth 4
    maxscopedepth 5
    code
     getlocal0
     pushscope

     findproperty        QName(PackageNamespace(""), "scoring_method")
     getlex              QName(PackageNamespace("Type"), "ScoringMethod")
     getproperty         QName(PackageNamespace(""), "RANK")
     initproperty        QName(PackageNamespace(""), "scoring_method")

     getlocal0
     constructsuper      0

     findpropstrict      QName(PackageNamespace(""), "reset")
     callpropvoid        QName(PackageNamespace(""), "reset"), 0

     returnvoid
    end ; code
   end ; body
  end ; method
  trait slot QName(PackageNamespace(""), "id") type QName(PackageNamespace(""), "uint") end
  trait slot QName(PackageNamespace(""), "time_per_problem") type QName(PackageNamespace(""), "uint") end
  trait slot QName(PackageNamespace(""), "problem_count") type QName(PackageNamespace(""), "uint") end
  trait slot QName(PackageNamespace(""), "max_players") type QName(PackageNamespace(""), "int") value Integer(-1) end
  trait slot QName(PackageNamespace(""), "rated") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "scoring_method") type QName(PackageNamespace(""), "uint") end
  trait slot QName(PackageNamespace(""), "password") type QName(PackageNamespace(""), "String") value Utf8("") end
  trait slot QName(PackageNamespace(""), "spectators") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "sprint") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "target") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "team") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "countdown") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "school") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "chapter") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "state") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "national") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "amc8") type QName(PackageNamespace(""), "Boolean") value True() end
  trait slot QName(PackageNamespace(""), "ended") type QName(PackageNamespace(""), "Boolean") value False() end
  trait slot QName(PackageNamespace(""), "last_problem_number_displayed") type QName(PackageNamespace(""), "uint") value Integer(0) end
  trait slot QName(PackageNamespace(""), "problemNumber") type QName(PackageNamespace(""), "uint") end
  trait slot QName(PackageNamespace(""), "playerType") type QName(PackageNamespace(""), "int") end
  trait slot QName(PackageNamespace(""), "type") type QName(PackageNamespace(""), "String") end
  trait slot QName(PackageNamespace(""), "room_name") type QName(PackageNamespace(""), "String") end
  trait slot QName(PackageNamespace(""), "zone_name") type QName(PackageNamespace(""), "String") end
  trait slot QName(PackageNamespace(""), "problems") type QName(PackageNamespace(""), "Array") end
  trait slot QName(PackageNamespace(""), "can_start_game") type QName(PackageNamespace(""), "Boolean") value False() end
  trait method QName(PackageNamespace(""), "reset")
   method
    refid "Type:FTW/instance/reset"
    body
     maxstack 2
     localcount 1
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      findproperty        QName(PackageNamespace(""), "can_start_game")
      pushfalse
      initproperty        QName(PackageNamespace(""), "can_start_game")

      findproperty        QName(PackageNamespace(""), "id")
      pushbyte            0
      initproperty        QName(PackageNamespace(""), "id")

      findproperty        QName(PackageNamespace(""), "time_per_problem")
      pushbyte            0
      initproperty        QName(PackageNamespace(""), "time_per_problem")

      findproperty        QName(PackageNamespace(""), "problem_count")
      pushbyte            0
      initproperty        QName(PackageNamespace(""), "problem_count")

      findproperty        QName(PackageNamespace(""), "problemNumber")
      pushbyte            0
      initproperty        QName(PackageNamespace(""), "problemNumber")

      findproperty        QName(PackageNamespace(""), "max_players")
      pushbyte            -1
      initproperty        QName(PackageNamespace(""), "max_players")

      findproperty        QName(PackageNamespace(""), "scoring_method")
      getlex              QName(PackageNamespace("Type"), "ScoringMethod")
      getproperty         QName(PackageNamespace(""), "RANK")
      initproperty        QName(PackageNamespace(""), "scoring_method")

      findproperty        QName(PackageNamespace(""), "rated")
      pushtrue
      initproperty        QName(PackageNamespace(""), "rated")

      findproperty        QName(PackageNamespace(""), "spectators")
      pushtrue
      initproperty        QName(PackageNamespace(""), "spectators")

      findproperty        QName(PackageNamespace(""), "playerType")
      pushbyte            -1
      initproperty        QName(PackageNamespace(""), "playerType")

      findproperty        QName(PackageNamespace(""), "type")
      pushstring          "FTW"
      initproperty        QName(PackageNamespace(""), "type")

      findproperty        QName(PackageNamespace(""), "zone_name")
      pushstring          ""
      initproperty        QName(PackageNamespace(""), "zone_name")

      findproperty        QName(PackageNamespace(""), "room_name")
      pushstring          ""
      initproperty        QName(PackageNamespace(""), "room_name")

      findproperty        QName(PackageNamespace(""), "password")
      pushstring          ""
      initproperty        QName(PackageNamespace(""), "password")

      findproperty        QName(PackageNamespace(""), "ended")
      pushfalse
      initproperty        QName(PackageNamespace(""), "ended")

      findproperty        QName(PackageNamespace(""), "problems")
      findpropstrict      QName(PackageNamespace(""), "Array")
      constructprop       QName(PackageNamespace(""), "Array"), 0
      initproperty        QName(PackageNamespace(""), "problems")

      findproperty        QName(PackageNamespace(""), "sprint")
      pushtrue
      initproperty        QName(PackageNamespace(""), "sprint")

      findproperty        QName(PackageNamespace(""), "target")
      pushtrue
      initproperty        QName(PackageNamespace(""), "target")

      findproperty        QName(PackageNamespace(""), "team")
      pushtrue
      initproperty        QName(PackageNamespace(""), "team")

      findproperty        QName(PackageNamespace(""), "countdown")
      pushtrue
      initproperty        QName(PackageNamespace(""), "countdown")

      findproperty        QName(PackageNamespace(""), "school")
      pushtrue
      initproperty        QName(PackageNamespace(""), "school")

      findproperty        QName(PackageNamespace(""), "chapter")
      pushtrue
      initproperty        QName(PackageNamespace(""), "chapter")

      findproperty        QName(PackageNamespace(""), "state")
      pushtrue
      initproperty        QName(PackageNamespace(""), "state")

      findproperty        QName(PackageNamespace(""), "national")
      pushtrue
      initproperty        QName(PackageNamespace(""), "national")

      findproperty        QName(PackageNamespace(""), "amc8")
      pushtrue
      initproperty        QName(PackageNamespace(""), "amc8")

      findproperty        QName(PackageNamespace(""), "spectators")
      pushtrue
      initproperty        QName(PackageNamespace(""), "spectators")

      findproperty        QName(PackageNamespace(""), "last_problem_number_displayed")
      pushbyte            0
      initproperty        QName(PackageNamespace(""), "last_problem_number_displayed")

      returnvoid
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(PackageNamespace(""), "create")
   method
    refid "Type:FTW/instance/create"
    returns QName(PackageNamespace(""), "void")
    body
     maxstack 4
     localcount 2
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      findproperty        QName(PackageNamespace(""), "can_start_game")
      pushtrue
      initproperty        QName(PackageNamespace(""), "can_start_game")

      findproperty        QName(PackageNamespace(""), "player_type")
      getlex              QName(PackageNamespace("Type"), "FTW")
      getproperty         QName(PackageNamespace(""), "GAMEMASTER")
      initproperty        QName(PackageNamespace(""), "player_type")

      getlex              QName(PackageNamespace(""), "type")
      pushstring          "Countdown"
      equals
      dup
      iffalse             L21

      pop
      getlocal0
      getproperty         QName(PackageNamespace(""), "scoring_method")
      getlex              QName(PackageNamespace("Game"), "ScoringType")
      getproperty         QName(PackageNamespace(""), "COUNTDOWN")
      equals
      not
L21:
      iffalse             L36

      getlocal0
      getlex              QName(PackageNamespace("Game"), "ScoringType")
      getproperty         QName(PackageNamespace(""), "COUNTDOWN")
      setproperty         QName(PackageNamespace(""), "scoring_method")

      getlex              QName(PackageNamespace("net.theyak.util"), "Net")
      getlex              QName(PackageNamespace("Misc"), "g")
      getproperty         QName(PackageNamespace(""), "URLPath")
      pushstring          "PHP/log.php?msg="
      add
      findpropstrict      QName(PackageNamespace(""), "escape")
      pushstring          "Bad scoring type for countdown, blah"
      callproperty        QName(PackageNamespace(""), "escape"), 1
      add
      callpropvoid        QName(PackageNamespace(""), "callServer"), 1

L36:
      findpropstrict      QName(PackageNamespace("com.electrotank.electroserver4.esobject"), "EsObject")
      constructprop       QName(PackageNamespace("com.electrotank.electroserver4.esobject"), "EsObject"), 0
      coerce              QName(PackageNamespace("com.electrotank.electroserver4.esobject"), "EsObject")
      setlocal1

      getlocal1
      pushstring          "zone"
      getlex              QName(PackageNamespace("Misc"), "g")
      getproperty         QName(PackageNamespace(""), "activeZoneName")
      callpropvoid        QName(PackageNamespace(""), "setString"), 2

      getlocal1
      pushstring          "lobby"
      getlex              QName(PackageNamespace("Misc"), "g")
      getproperty         QName(PackageNamespace(""), "activeRoomName")
      callpropvoid        QName(PackageNamespace(""), "setString"), 2

      getlocal1
      pushstring          "type"
      getlex              QName(PackageNamespace(""), "type")
      callpropvoid        QName(PackageNamespace(""), "setString"), 2

      getlocal1
      pushstring          "players"
      getlex              QName(PackageNamespace(""), "max_players")
      callpropvoid        QName(PackageNamespace(""), "setInteger"), 2

      getlocal1
      pushstring          "problems"
      getlex              QName(PackageNamespace(""), "problem_count")
      callpropvoid        QName(PackageNamespace(""), "setInteger"), 2

      getlocal1
      pushstring          "time"
      getlocal0
      getproperty         QName(PackageNamespace(""), "time_per_problem")
      callpropvoid        QName(PackageNamespace(""), "setInteger"), 2

      getlocal1
      pushstring          "rated"
      getlex              QName(PackageNamespace(""), "rated")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "spectators"
      getlex              QName(PackageNamespace(""), "spectators")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "sprint"
      getlex              QName(PackageNamespace(""), "sprint")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "target"
      getlex              QName(PackageNamespace(""), "target")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "team"
      getlex              QName(PackageNamespace(""), "team")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "countdown"
      getlex              QName(PackageNamespace(""), "countdown")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "school"
      getlex              QName(PackageNamespace(""), "school")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "chapter"
      getlex              QName(PackageNamespace(""), "chapter")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "state"
      getlex              QName(PackageNamespace(""), "state")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "national"
      getlex              QName(PackageNamespace(""), "national")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "amc8"
      getlex              QName(PackageNamespace(""), "amc8")
      callpropvoid        QName(PackageNamespace(""), "setBoolean"), 2

      getlocal1
      pushstring          "scoring"
      getlex              QName(PackageNamespace(""), "scoring_method")
      callpropvoid        QName(PackageNamespace(""), "setInteger"), 2

      getlocal1
      pushstring          "password"
      getlex              QName(PackageNamespace(""), "password")
      callpropvoid        QName(PackageNamespace(""), "setString"), 2

      getlocal1
      pushstring          "user_id"
      getlex              QName(PackageNamespace("Misc"), "g")
      getproperty         QName(PackageNamespace(""), "user")
      getproperty         QName(PackageNamespace(""), "id")
      callpropvoid        QName(PackageNamespace(""), "setInteger"), 2

      getlex              QName(PackageNamespace("Misc"), "g")
      getproperty         QName(PackageNamespace(""), "server")
      getlex              QName(PackageNamespace("Misc"), "g")
      getproperty         QName(PackageNamespace(""), "manager")
      pushstring          "new_game"
      getlocal1
      callpropvoid        QName(PackageNamespace(""), "esServerPlugin"), 3

      returnvoid
     end ; code
    end ; body
   end ; method
  end ; trait
  trait getter QName(PackageNamespace(""), "player_type")
   method
    refid "Type:FTW/instance/player_type/getter"
    returns QName(PackageNamespace(""), "uint")
    body
     maxstack 1
     localcount 1
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      getlocal0
      getproperty         QName(PackageNamespace(""), "playerType")
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
  trait setter QName(PackageNamespace(""), "player_type")
   method
    refid "Type:FTW/instance/player_type/setter"
    param QName(PackageNamespace(""), "uint")
    returns QName(PackageNamespace(""), "void")
    body
     maxstack 2
     localcount 2
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      getlocal1
      getlex              QName(PackageNamespace("Type"), "FTW")
      getproperty         QName(PackageNamespace(""), "PLAYER")
      equals
      dup
      iftrue              L13

      pop
      getlocal1
      getlex              QName(PackageNamespace("Type"), "FTW")
      getproperty         QName(PackageNamespace(""), "SPECTATOR")
      equals
L13:
      dup
      iftrue              L20

      pop
      getlocal1
      getlex              QName(PackageNamespace("Type"), "FTW")
      getproperty         QName(PackageNamespace(""), "GAMEMASTER")
      equals
L20:
      iffalse             L24

      getlocal0
      getlocal1
      setproperty         QName(PackageNamespace(""), "playerType")

L24:
      returnvoid
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(PackageNamespace(""), "clone")
   method
    refid "Type:FTW/instance/clone"
    returns QName(PackageNamespace("Type"), "FTW")
    body
     maxstack 4
     localcount 3
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      findpropstrict      QName(PackageNamespace("flash.utils"), "getQualifiedClassName")
      getlocal0
      callproperty        QName(PackageNamespace("flash.utils"), "getQualifiedClassName"), 1
      pushstring          "::"
      pushstring          "."
      callproperty        QName(Namespace("http://adobe.com/AS3/2006/builtin"), "replace"), 2
      coerce_s
      setlocal1

      findpropstrict      QName(PackageNamespace("flash.utils"), "ByteArray")
      constructprop       QName(PackageNamespace("flash.utils"), "ByteArray"), 0
      coerce              QName(PackageNamespace("flash.utils"), "ByteArray")
      setlocal2

      findpropstrict      QName(PackageNamespace("flash.net"), "registerClassAlias")
      getlocal1
      findpropstrict      QName(PackageNamespace("flash.utils"), "getDefinitionByName")
      getlocal1
      callproperty        QName(PackageNamespace("flash.utils"), "getDefinitionByName"), 1
      getlex              QName(PackageNamespace(""), "Class")
      astypelate
      callpropvoid        QName(PackageNamespace("flash.net"), "registerClassAlias"), 2

      getlocal2
      getlocal0
      callpropvoid        QName(PackageNamespace(""), "writeObject"), 1

      getlocal2
      pushbyte            0
      setproperty         QName(PackageNamespace(""), "position")

      getlocal2
      callproperty        QName(PackageNamespace(""), "readObject"), 0
      getlex              QName(PackageNamespace("Type"), "FTW")
      astypelate
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
 end ; instance
 cinit
  refid "Type:FTW/class/init"
  body
   maxstack 2
   localcount 1
   initscopedepth 3
   maxscopedepth 4
   code
    getlocal0
    pushscope

    findproperty        QName(PackageNamespace(""), "PLAYER")
    pushbyte            0
    setproperty         QName(PackageNamespace(""), "PLAYER")

    findproperty        QName(PackageNamespace(""), "GAMEMASTER")
    pushbyte            1
    setproperty         QName(PackageNamespace(""), "GAMEMASTER")

    findproperty        QName(PackageNamespace(""), "SPECTATOR")
    pushbyte            9
    setproperty         QName(PackageNamespace(""), "SPECTATOR")

    returnvoid
   end ; code
  end ; body
 end ; method
 trait slot QName(PackageNamespace(""), "PLAYER") slotid 1 type QName(PackageNamespace(""), "uint") value Integer(0) end
 trait slot QName(PackageNamespace(""), "GAMEMASTER") slotid 2 type QName(PackageNamespace(""), "uint") value Integer(1) end
 trait slot QName(PackageNamespace(""), "SPECTATOR") slotid 3 type QName(PackageNamespace(""), "uint") value Integer(9) end
end ; class
