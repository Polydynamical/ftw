package 
{
	import flash.display.*;

	dynamic public class TextArea_upSkin extends MovieClip
	{
		public function TextArea_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class TextInput_disabledSkin extends MovieClip
	{
		public function TextInput_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class TextInput_upSkin extends MovieClip
	{
		public function TextInput_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class WhiteBox extends Sprite
	{
		public function WhiteBox()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;
	import flash.text.*;

	dynamic public class YakButton extends Sprite
	{
		public var tText:TextField;

		public function YakButton()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Background extends Sprite
	{
		public function Background()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;
	import flash.text.*;

	dynamic public class BlueButton extends Sprite
	{
		public var tText:TextField;

		public function BlueButton()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Button_disabledSkin extends MovieClip
	{
		public function Button_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Button_downSkin extends MovieClip
	{
		public function Button_downSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Button_emphasizedSkin extends MovieClip
	{
		public function Button_emphasizedSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Button_overSkin extends MovieClip
	{
		public function Button_overSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Button_selectedDisabledSkin extends MovieClip
	{
		public function Button_selectedDisabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Button_selectedDownSkin extends MovieClip
	{
		public function Button_selectedDownSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Button_selectedOverSkin extends MovieClip
	{
		public function Button_selectedOverSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Button_selectedUpSkin extends MovieClip
	{
		public function Button_selectedUpSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class Button_upSkin extends MovieClip
	{
		public function Button_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CellRenderer_disabledSkin extends MovieClip
	{
		public function CellRenderer_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CellRenderer_downSkin extends MovieClip
	{
		public function CellRenderer_downSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CellRenderer_overSkin extends MovieClip
	{
		public function CellRenderer_overSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CellRenderer_selectedDisabledSkin extends MovieClip
	{
		public function CellRenderer_selectedDisabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CellRenderer_selectedDownSkin extends MovieClip
	{
		public function CellRenderer_selectedDownSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CellRenderer_selectedOverSkin extends MovieClip
	{
		public function CellRenderer_selectedOverSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CellRenderer_selectedUpSkin extends MovieClip
	{
		public function CellRenderer_selectedUpSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CellRenderer_upSkin extends MovieClip
	{
		public function CellRenderer_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CheckBox_disabledIcon extends MovieClip
	{
		public function CheckBox_disabledIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CheckBox_downIcon extends MovieClip
	{
		public function CheckBox_downIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CheckBox_overIcon extends MovieClip
	{
		public function CheckBox_overIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CheckBox_selectedDisabledIcon extends MovieClip
	{
		public function CheckBox_selectedDisabledIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CheckBox_selectedDownIcon extends MovieClip
	{
		public function CheckBox_selectedDownIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CheckBox_selectedOverIcon extends MovieClip
	{
		public function CheckBox_selectedOverIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CheckBox_selectedUpIcon extends MovieClip
	{
		public function CheckBox_selectedUpIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class CheckBox_upIcon extends MovieClip
	{
		public function CheckBox_upIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ColumnStretch_cursor extends MovieClip
	{
		public function ColumnStretch_cursor()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ComboBox_disabledSkin extends MovieClip
	{
		public function ComboBox_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ComboBox_downSkin extends MovieClip
	{
		public function ComboBox_downSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ComboBox_overSkin extends MovieClip
	{
		public function ComboBox_overSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ComboBox_upSkin extends MovieClip
	{
		public function ComboBox_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class DataGrid_skin extends MovieClip
	{
		public function DataGrid_skin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class DataGridCellEditor_skin extends MovieClip
	{
		public function DataGridCellEditor_skin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class EmptyClip extends Sprite
	{
		public function EmptyClip()
		{
			super();
		}
	}
}
package 
{
	import com.jumpeye.Events.*;
	import com.jumpeye.core.*;
	import com.jumpeye.flashEff2.core.interfaces.*;
	import com.jumpeye.flashEff2.text.*;
	import com.jumpeye.flashEff2.text.defaultFade.*;
	import flash.display.*;
	import flash.events.*;
	import flash.geom.*;
	import flash.net.*;
	import flash.text.*;
	import flash.utils.*;

	dynamic public class FlashEff2 extends JUIComponent
	{
		public static var groupList:Array;
		public static const SWAP_TYPE_SHOW:* = "show";
		public static const SWAP_TYPE_HIDE_AND_SHOW:* = "hideAndShow";
		public static var REMOVED_FROM_FLASHEFF:Boolean = false;
		private static var targetPaths:Array;
		public static var eventTypeAsoc:Array = [];
		public static const SWAP_TYPE_HIDE:* = "hide";
		private var _hideTransitionName:String;
		protected var tepA:IFlashEffCommand;
		protected var bDBT:Sprite;
		protected var tepF:IFlashEffFilter;
		protected var tepS:FeTDefaultFade;
		protected var _initialTargetTransform:Transform;
		protected var isButtonEffectApplyed:Boolean = false;
		private var _useSwapInsteadHide:Boolean = false;
		protected var _groupName:String = "feGroup";
		protected var transitionType:String = "show";
		protected var hitAreaClip:Sprite;
		private var _isTargetVisibleAtEnd:Boolean = false;
		private var _firstLevelOwner:Sprite;
		private var _showTransitionStartCommands:Array;
		private var _ideDataHolder:String = "";
		private var _drawAfterFilters:Boolean = true;
		protected var showTimer:Timer;
		private var _hideTransitionEndCommands:Array;
		private var _highestOwner:Sprite;
		private var _hideTransitionStartCommands:Array;
		private var _textField:TextField;
		protected var nextTarget:DisplayObject;
		protected var _toggle:Boolean = false;
		private var _showTransitionName:String;
		protected var swapPattern:IFlashEffSymbolText;
		protected var lastTransitionPattern:IFlashEffSymbolText;
		protected var eventsDispatched:Number = 0;
		private var _swapTransitionName:String;
		private var _swapTarget:DisplayObject;
		private var __showDelay:Number = 0;
		protected var swapFlashEff2:FlashEff2;
		private var _partialTable:FeTable;
		private var _absWords:Array;
		private var _target:DisplayObject;
		private var __partialPattern:String = "com.jumpeye.flashEff2.text.defaultFade.FeTDefaultFade";
		private var __hideAutoPlay:Boolean = true;
		protected var partialPattern:IFlashEffSymbol;
		protected var maxEndEvents:Number = 0;
		private var __targetInstanceName:String = "";
		protected var forceHide:Boolean = false;
		protected var _partialTextOwnerClip:Sprite;
		protected var bDBTO:Sprite;
		private var _buttonOwner:Sprite;
		protected var _buttonEffectName:String;
		protected var isDragOut:Boolean = false;
		private var _rollOutCommands:Array;
		private var __xmlPath:String = "";
		private var _absCustom:Array;
		private var _rollOverCommands:Array;
		private var _absLines:Array;
		protected var setNewTarget:Boolean = false;
		private var __swapTargetVisibility:Boolean = false;
		protected var filterAsoc:Array;
		private var _doubleClickCommands:Array;
		private var _textTable:FeTable;
		protected var hideTimer:Timer;
		protected var _isTransitioning:Boolean = false;
		private var __xmlString:String = "";
		protected var _buttonEffect:IFlashEffButtonEffect;
		private var __swapType:String = "hideAndShow";
		protected var _xml:XML;
		protected var aDBTO:Sprite;
		private var _isMouseTriggered:Boolean = true;
		protected var buttonTarget:Sprite;
		protected var _cTT:String = "";
		protected var partialInterval:Number;
		private var _releaseCommands:Array;
		private var _showTransitionEndCommands:Array;
		private var _absMatrix:Array;
		private var __targetVisibility:Boolean = true;
		private var __showAutoPlay:Boolean = true;
		private var __hideDelay:Number = 2;
		private var _useHandCursor:Boolean = false;
		private var forceAutoPlay:* = null;
		private var _clearAfterHide:Boolean = true;
		protected var aDBT:Sprite;
		private var __swapTargetInstanceName:String = "";
		protected var firstInDepth:Sprite;
		private var __swapDelay:Number = 0;
		protected var showPattern:IFlashEffSymbolText;
		private var _filterList:Array;
		protected var drawCalled:Boolean = false;
		private var _targetOwner:MovieClip;
		private var _absChars:Array;
		private var _pressCommands:Array;
		protected var hidePattern:IFlashEffSymbolText;
		protected var tTS:Sprite;
		protected var _textOwnerClip:Sprite;
		protected var _selected:Boolean = false;

		public function FlashEff2()
		{
			super();
			init();
		}

		protected function wordsSplit(param1:String, param2:uint) : Array
		{
			var _loc_9:Rectangle = null;
			var _loc_10:Boolean = false;
			var _loc_11:uint = 0;
			var _loc_12:* = undefined;
			var _loc_3:Array = param1.split(" ");
			var _loc_4:Array = [];
			var _loc_5:uint = _loc_3.length;
			var _loc_6:uint = 0;
			var _loc_7:uint = 0;
			var _loc_8:* = 0;
			while(_loc_8 < _loc_5)
			{
				_loc_9 = this.textField.getCharBoundaries((param2 + _loc_6) + _loc_8);
				_loc_10 = false;
				if(_loc_9 == null)
				{
					_loc_10 = true;
					_loc_11 = _loc_3[_loc_8].length;
					if(_loc_11 > 0)
					{
						_loc_12 = 0;
						while(_loc_12 < _loc_11)
						{
							_loc_9 = this.textField.getCharBoundaries((param2 + _loc_6) + _loc_8 + _loc_12);
							if(_loc_9 != null)
							{
								_loc_10 = false;
								break;
							}
							_loc_12 = _loc_12 + 1;
						}
					}
				}
				if(_loc_10 == false)
				{
					_loc_4[_loc_7] = {id:(param2 + _loc_8) + _loc_6, bounds:_loc_9, text:_loc_3[_loc_8]};
					_loc_6 = _loc_6 + String(_loc_4[_loc_7].text).length;
					_loc_7 = _loc_7 + 1;
				}
				else
				{
					_loc_6 = _loc_6 + _loc_3[_loc_8].length;
				}
				_loc_8 = _loc_8 + 1;
			}
			return _loc_4;
		}

		public function get swapTransitionName() : String
		{
			return _swapTransitionName;
		}

		public function set partialPatternName(param1:String) : void
		{
			var patternReference:Class = null;
			var arg:String = param1;
			if(arg != "")
			{
				try
				{
					patternReference = getDefinitionByName(arg);
				}
				catch(e:ReferenceError)
				{
					throw "FLASHEFF2 ERROR: The Pattern:" + e + " is unavailable.";
				}
			}
			if(patternReference != null)
			{
				this.partialPattern = new patternReference(this);
				this.partialPattern.target = this._partialTextOwnerClip;
			}
			__partialPattern = arg;
		}

		public function set swapTarget(param1:DisplayObject) : void
		{
			if(param1 != null)
			{
				this._swapTarget = param1;
				param1.visible = this.swapTargetVisibility;
				this._swapTransitionName = param1.name;
			}
			else
			{
				this._swapTarget = null;
				this._swapTransitionName = "";
			}
		}

		public function set xmlString(param1:String) : void
		{
			var _loc_2:XML = null;
			if(param1 != "")
			{
				this.__xmlString = param1;
				_loc_2 = new XML(param1);
				setProperties(_loc_2);
			}
		}

		public function get partialPatternName() : String
		{
			return __partialPattern;
		}

		public function get currentTransitionType() : String
		{
			return this._cTT;
		}

		public function set isMouseTriggered(param1:Boolean) : void
		{
			this._isMouseTriggered = param1;
		}

		public function removeButtonEffect() : void
		{
			if(this.buttonEffect != null)
			{
				this.buttonEffect.remove();
			}
			this.highestOwner.mouseChildren = true;
			removeButtonEvents();
			this.isButtonEffectApplyed = false;
		}

		protected function addToGroupList(param1:DisplayObject) : void
		{
			if(param1 != null)
			{
				removeFromGroupList(param1);
			}
			if(this.toggle == true)
			{
				groupList.push(this);
			}
		}

		public function removeAllCommands() : void
		{
			var _loc_1:* = undefined;
			var _loc_2:int = 0;
			var _loc_3:* = eventTypeAsoc;
			for each(_loc_1 in _loc_3)
			{
				removeAllCommandsByEventType(_loc_1);
			}
		}

		public function removeCommand(param1:IFlashEffCommand) : void
		{
			var _loc_2:* = undefined;
			var _loc_3:Array = null;
			var _loc_4:uint = 0;
			var _loc_5:int = 0;
			var _loc_6:* = eventTypeAsoc;
			for each(_loc_2 in _loc_6)
			{
				_loc_3 = this["_" + _loc_2 + "Commands"];
				if(_loc_3 != null)
				{
					_loc_4 = 0;
					while(_loc_4 < _loc_3.length)
					{
						if(_loc_3[_loc_4] == param1)
						{
							_loc_3.splice(_loc_4, 1);
						}
						_loc_4 = _loc_4 + 1;
					}
					if(eventTypeAsoc[_loc_2] != "")
					{
						setCommands(_loc_2);
					}
				}
			}
		}

		public function buttonPress() : void
		{
			pressButtonHandler(null, true);
		}

		public function get showTransition() : IFlashEffSymbolText
		{
			return this.showPattern;
		}

		protected function pressButtonHandler(param1:MouseEvent = null, param2:Boolean = false) : void
		{
			this.isDragOut = true;
			if(param2 == true || this.isMouseTriggered == true)
			{
				if(this._isTransitioning == false)
				{
					if(this.buttonEffect != null)
					{
						this.buttonEffect.buttonPress();
					}
				}
			}
			if(param1 != null)
			{
				dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.MOUSE_DOWN));
			}
		}

		public function get filterList() : Array
		{
			return this._filterList;
		}

		protected function runCommands(param1:Array) : void
		{
			var _loc_2:int = NaN;
			var _loc_3:* = undefined;
			if(param1 != null)
			{
				_loc_2 = param1.length;
				_loc_3 = 0;
				while(_loc_3 < _loc_2)
				{
					IFlashEffCommand(param1[_loc_3]).run();
					_loc_3 = _loc_3 + 1;
				}
			}
		}

		public function get hideTransition() : IFlashEffSymbolText
		{
			return this.hidePattern;
		}

		public function buttonRollOver() : void
		{
			rollOverButtonHandler(null, true);
		}

		protected function customSplit(param1:String, param2:uint, param3:*) : Array
		{
			var _loc_9:String = null;
			var _loc_10:Rectangle = null;
			var _loc_11:Boolean = false;
			var _loc_12:uint = 0;
			var _loc_13:* = undefined;
			var _loc_4:Array = [];
			var _loc_5:uint = param3.length;
			var _loc_6:uint = 0;
			var _loc_7:uint = 0;
			var _loc_8:* = 0;
			while(_loc_8 < _loc_5)
			{
				_loc_9 = this.textField.text.substr(param2 + _loc_6, param3[_loc_8]);
				_loc_10 = this.textField.getCharBoundaries(param2 + _loc_6);
				_loc_11 = false;
				if(_loc_10 == null)
				{
					_loc_11 = true;
					_loc_12 = _loc_9.length;
					if(_loc_12 > 0)
					{
						_loc_13 = 0;
						while(_loc_13 < _loc_12)
						{
							_loc_10 = this.textField.getCharBoundaries((param2 + _loc_6) + _loc_13);
							if(_loc_10 != null)
							{
								_loc_11 = false;
								break;
							}
							_loc_13 = _loc_13 + 1;
						}
					}
				}
				if(_loc_11 == false)
				{
					_loc_4[_loc_7] = {id:param2 + _loc_6, bounds:_loc_10, text:_loc_9};
					_loc_6 = _loc_6 + param3[_loc_8];
					_loc_7 = _loc_7 + 1;
				}
				else
				{
					_loc_6 = _loc_6 + param3[_loc_8];
				}
				_loc_8 = _loc_8 + 1;
			}
			return _loc_4;
		}

		public function addFilterByName(param1:String, param2:Object = null) : IFlashEffFilter
		{
			var filterReference:Class = null;
			var i:* = undefined;
			var filterName:String = param1;
			var initObj:Object = param2;
			try
			{
				filterReference = getDefinitionByName(filterName);
			}
			catch(e:ReferenceError)
			{
				trace("FLASHEFF2 ERROR: The filter pattern '" + e + "' is missing from library.");
				return null;
			}
			var filter:IFlashEffFilter = IFlashEffFilter(new filterReference(this));
			if(initObj != null)
			{
				var _loc_4:int = 0;
				var _loc_5:* = initObj;
				for each(i in _loc_5)
				{
					filter[i] = initObj[i];
				}
			}
			addFilter(filter);
			return filter;
		}

		public function setXML(param1:*) : void
		{
			setProperties(param1);
		}

		protected function rollOverButtonHandler(param1:MouseEvent = null, param2:Boolean = false) : void
		{
			if(param2 == true || this.isMouseTriggered == true)
			{
				if(this._isTransitioning == false)
				{
					if(this.buttonEffect != null)
					{
						this.buttonEffect.buttonRollOver();
					}
				}
			}
			if(param1 != null)
			{
				dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.ROLL_OVER));
			}
		}

		override public function dispatchEvent(param1:Event) : Boolean
		{
			var _loc_3:FLASHEFFEvents = null;
			var _loc_4:Boolean = false;
			var _loc_5:Point = null;
			var _loc_6:DisplayObject = null;
			var _loc_7:Timer = null;
			var _loc_8:DisplayObject = null;
			var _loc_9:Boolean = false;
			var _loc_10:Boolean = false;
			var _loc_11:Boolean = false;
			var _loc_12:* = undefined;
			var _loc_2:Boolean = true;
			if(param1.type == FLASHEFFEvents.TRANSITION_END || param1.type == "defaultPatternFinish")
			{
				param1.currentTransitionType = this.currentTransitionType;
				var _loc_14:* = this.eventsDispatched + 1;
				this.eventsDispatched = _loc_14;
				if(eventsDispatched == maxEndEvents)
				{
					runCommands(this["_" + this.currentTransitionType + "TransitionEndCommands"]);
					if(isTargetVisibleAtEnd == true)
					{
						if(this.transitionType == "show")
						{
							this.target.visible = true;
						}
						this._textOwnerClip.visible = false;
						this._partialTextOwnerClip.visible = false;
					}
					_loc_2 = true;
					_isTransitioning = false;
					if(this.transitionType == "show")
					{
						if(isButtonEffectApplyed == true)
						{
							_loc_5 = new Point(this.mouseX, this.mouseY);
							_loc_5 = localToGlobal(_loc_5);
							if(this.highestOwner.hitTestPoint(_loc_5.x, _loc_5.y, true))
							{
								rollOverButtonHandler(null, true);
							}
						}
					}
					_loc_3 = new FLASHEFFEvents(FLASHEFFEvents.TRANSITION_END);
					_loc_3.currentTransitionType = this.currentTransitionType;
					_loc_4 = false;
					if(this.transitionType == "show")
					{
						if(this.hidePattern != null)
						{
							if(!(this.hideAutoPlay == true && this.forceAutoPlay == false) || this.forceAutoPlay == true)
							{
								this.hideTimer.reset();
								this.hideTimer.start();
								this.forceAutoPlay = null;
								this.hideTimer.addEventListener(TimerEvent.TIMER, this.hideCaller);
							}
						}
					}
					else
					{
						if(this.setNewTarget == true)
						{
							this.hideTimer.stop();
							this.showTimer.stop();
							_loc_6 = this.target;
							this.target = this.nextTarget;
							if(_loc_6 != null)
							{
								_loc_6.visible = false;
							}
							this.setNewTarget = false;
							this.nextTarget = null;
							_loc_4 = super.dispatchEvent(_loc_3);
							_loc_7 = new Timer(this.showDelay, 1);
							if(this.showDelay > 0)
							{
								_loc_7.start();
								_loc_7.addEventListener(TimerEvent.TIMER, this.showCallerWeak);
							}
							else
							{
								show(false);
							}
							return _loc_4;
						}
						if(this._cTT == "swap")
						{
							_loc_8 = this.target;
							removeSwapFlashEff2();
							this.target = this.swapTarget;
							this.target.visible = true;
							this.swapTarget = null;
							_loc_8.visible = this.targetVisibility;
							_loc_9 = this.hideAutoPlay;
							_loc_10 = this.showAutoPlay;
							_loc_11 = this.targetVisibility;
							this.__hideAutoPlay = false;
							this.__showAutoPlay = false;
							this.targetVisibility = true;
							invalidate();
							drawNow();
							this.__hideAutoPlay = _loc_9;
							this.__showAutoPlay = _loc_10;
							this.targetVisibility = _loc_11;
							this.target.visible = true;
						}
						else
						{
							if(this._cTT == "hide")
							{
								if(this._clearAfterHide == true)
								{
									removeEffect(true);
									removeButtonEvents();
									var _loc_13:int = 0;
									var _loc_14:* = this.filterList;
									for each(_loc_12 in _loc_14)
									{
										IFlashEffFilter(this.filterList[_loc_12]).remove();
									}
								}
							}
						}
					}
					_loc_4 = super.dispatchEvent(_loc_3);
					return _loc_4;
				}
				else
				{
					_loc_2 = false;
				}
			}
			else
			{
				if(param1.type == FLASHEFFEvents.TRANSITION_START)
				{
					runCommands(this["_" + this.currentTransitionType + "TransitionStartCommands"]);
					param1.currentTransitionType = this.currentTransitionType;
				}
			}
			if(_loc_2 == true)
			{
				return super.dispatchEvent(param1);
			}
			return true;
		}

		public function get firstLevelOwner() : Sprite
		{
			return this._firstLevelOwner;
		}

		public function set showTransition(param1:IFlashEffSymbolText) : void
		{
			if(param1 != null)
			{
				if(this.showPattern != null)
				{
					this.showPattern.remove();
				}
				this.showPattern = param1;
				this._showTransitionName = String(getQualifiedClassName(param1)).replace("::", ".");
			}
		}

		public function set filterList(param1:Array) : void
		{
			var _loc_2:* = undefined;
			removeAllFilters();
			if(param1 != null)
			{
				var _loc_3:int = 0;
				var _loc_4:* = param1;
				for each(_loc_2 in _loc_4)
				{
					addFilter(_loc_4[_loc_2]);
				}
			}
		}

		public function getFilter(param1:String) : IFlashEffFilter
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_4:* = this.filterList;
			for each(_loc_2 in _loc_4)
			{
				if((String(getQualifiedClassName(this.filterList[_loc_2])).replace("::", ".")) == param1)
				{
					return this.filterList[_loc_2];
				}
			}
			return null;
		}

		public function get highestOwner() : Sprite
		{
			return this._highestOwner;
		}

		protected function setButtonEvents() : void
		{
			this.highestOwner.addEventListener(MouseEvent.ROLL_OVER, this.rollOverButtonHandler);
			this.highestOwner.addEventListener(MouseEvent.ROLL_OUT, this.rollOutButtonHandler);
			this.highestOwner.addEventListener(MouseEvent.MOUSE_DOWN, this.pressButtonHandler);
			this.highestOwner.addEventListener(MouseEvent.MOUSE_UP, this.releaseButtonHandler);
			isButtonEffectApplyed = true;
		}

		public function buttonRelease() : void
		{
			releaseButtonHandler(null, true);
		}

		public function get ideDataHolder() : String
		{
			return this._ideDataHolder;
		}

		public function set swapTargetVisibility(param1:Boolean) : void
		{
			__swapTargetVisibility = param1;
			if(this.swapTarget != null)
			{
				this.swapTarget.visible = param1;
			}
		}

		protected function showCallerWeak(param1:TimerEvent) : void
		{
			show(false);
		}

		public function getNumGroupButtons(param1:String = "") : uint
		{
			var _loc_3:* = undefined;
			if(param1 == "")
			{
				param1 = this._groupName;
			}
			var _loc_2:uint = 0;
			var _loc_4:int = 0;
			var _loc_5:* = groupList;
			for each(_loc_3 in _loc_5)
			{
				if(groupList[_loc_3].groupName == param1)
				{
					_loc_2 = _loc_2 + 1;
				}
			}
			return _loc_2;
		}

		public function get absCustom() : Array
		{
			return this._absCustom.concat();
		}

		protected function removeSwapFlashEff2()
		{
			if(this.swapFlashEff2 != null)
			{
				this.swapFlashEff2.removeAll();
				removeChild(this.swapFlashEff2);
				this.swapFlashEff2.removeEventListener(FLASHEFFEvents.TRANSITION_END, dispatchEvent);
				this.swapFlashEff2.removeEventListener(FLASHEFFEvents.DOUBLE_CLICK, dispatchEvent);
				this.swapFlashEff2.removeEventListener(FLASHEFFEvents.MOUSE_DOWN, dispatchEvent);
				this.swapFlashEff2.removeEventListener(FLASHEFFEvents.MOUSE_UP, dispatchEvent);
				this.swapFlashEff2.removeEventListener(FLASHEFFEvents.ROLL_OUT, dispatchEvent);
				this.swapFlashEff2.removeEventListener(FLASHEFFEvents.ROLL_OVER, dispatchEvent);
				this.swapFlashEff2 = null;
			}
		}

		public function set ideDataHolder(param1:String)
		{
			this._ideDataHolder = param1;
		}

		public function get commands() : Array
		{
			return this._rollOverCommands.concat(this._rollOutCommands, this._pressCommands, this._releaseCommands, this._doubleClickCommands, this._showTransitionStartCommands, this._showTransitionEndCommands, this._hideTransitionStartCommands, this._hideTransitionEndCommands);
		}

		public function removeCommandByName(param1:String) : void
		{
			var _loc_2:* = undefined;
			var _loc_3:Array = null;
			var _loc_4:uint = 0;
			var _loc_5:int = 0;
			var _loc_6:* = eventTypeAsoc;
			for each(_loc_2 in _loc_6)
			{
				_loc_3 = this["_" + _loc_2 + "Commands"];
				if(_loc_3 != null)
				{
					_loc_4 = 0;
					while(_loc_4 < _loc_3.length)
					{
						if((String(getQualifiedClassName(_loc_3[_loc_4])).replace("::", ".")) == param1)
						{
							_loc_3.splice(_loc_4, 1);
						}
						_loc_4 = _loc_4 + 1;
					}
					if(eventTypeAsoc[_loc_2] != "")
					{
						setCommands(_loc_2);
					}
				}
			}
		}

		public function removeAll() : void
		{
			removeEffect(true, this.showPattern);
			removeEffect(true, this.hidePattern);
			removeSwapFlashEff2();
			removeAllCommands();
			removeAllFilters();
			removeButtonEffect();
			this.buttonEffect = null;
			this._buttonEffectName = "";
			removeShowTransition();
			removeHideTransition();
			this.showTimer.stop();
			this.hideTimer.stop();
			this.showTimer.removeEventListener(TimerEvent.TIMER, this.showCaller);
			this.hideTimer.removeEventListener(TimerEvent.TIMER, this.hideCaller);
			if(this.target != null)
			{
				removeFromGroupList(this.target);
				this.target.visible = true;
				resetChildDisplayList(this.target);
				var _loc_1:int = 0;
				this.hitAreaClip.height = _loc_1;
				this.hitAreaClip.width = _loc_1;
			}
		}

		public function get showDelay() : Number
		{
			return __showDelay;
		}

		public function get buttonEffectName() : String
		{
			return this._buttonEffectName;
		}

		public function set swapTransition(param1:IFlashEffSymbolText) : void
		{
			if(param1 != null)
			{
				if(this.swapPattern != null)
				{
					this.swapPattern.remove();
				}
				this.swapPattern = param1;
				this._swapTransitionName = String(getQualifiedClassName(param1)).replace("::", ".");
			}
		}

		protected function getPath(param1:DisplayObject) : String
		{
			var _loc_2:DisplayObject = param1.parent;
			var _loc_3:String = param1.name;
			while((_loc_2 is Stage) && _loc_2 == null)
			{
				_loc_3 = (_loc_2.name + ".") + _loc_3;
				_loc_2 = _loc_2.parent;
			}
			return _loc_3;
		}

		public function getShowPattern() : IFlashEffSymbolText
		{
			return this.showPattern;
		}

		protected function pressCommandHandler(param1:MouseEvent) : void
		{
			runCommands(this._pressCommands);
		}

		public function set hideTransition(param1:IFlashEffSymbolText) : void
		{
			if(param1 != null)
			{
				if(this.hidePattern != null)
				{
					this.hidePattern.remove();
				}
				this.hidePattern = param1;
				this._hideTransitionName = String(getQualifiedClassName(param1)).replace("::", ".");
			}
		}

		public function set isTargetVisibleAtEnd(param1:Boolean) : void
		{
			this._isTargetVisibleAtEnd = param1;
		}

		public function get absChars() : Array
		{
			return this._absChars.concat();
		}

		public function setDrawTime() : void
		{
			if(this.showAutoPlay == true || this.hideAutoPlay == true)
			{
				if(this.target is DisplayObject)
				{
					if(this.target.stage == null)
					{
						this.target.addEventListener(Event.ADDED_TO_STAGE, this.targetOnAdd);
					}
					else
					{
						if(drawCalled == false)
						{
							drawCalled = true;
							targetOnAdd(new Event(Event.ADDED_TO_STAGE));
						}
					}
				}
			}
		}

		public function getHidePattern() : IFlashEffSymbolText
		{
			return this.hidePattern;
		}

		public function get textTable() : FeTable
		{
			return this._textTable;
		}

		public function set toggle(param1:Boolean) : void
		{
			var _loc_2:* = _toggle;
			_toggle = param1;
			if(_loc_2 != param1)
			{
				if(param1 == true)
				{
					addToGroupList(this.target);
				}
				else
				{
					removeFromGroupList(this.target);
				}
			}
		}

		protected function callDraw(param1:Event) : void
		{
			draw();
		}

		public function get buttonOwner() : Sprite
		{
			return this._buttonOwner;
		}

		public function set hideTransitionName(param1:String) : void
		{
			var patternClass:Class = null;
			var arg:String = param1;
			if(arg != "")
			{
				try
				{
					patternClass = getDefinitionByName(arg);
					if(this.hidePattern != null)
					{
						this.hidePattern.remove();
					}
					this.hidePattern = new patternClass(this);
				}
				catch(e:ReferenceError)
				{
					throw "FLASHEFF2 ERROR: The pattern '" + e + "' is missing from library.";
				}
				this._hideTransitionName = arg;
			}
		}

		public function set hideDelay(param1:Number) : void
		{
			if(isNaN(param1))
			{
				param1 = 2;
			}
			else
			{
				if(param1 < 0)
				{
					param1 = 0;
				}
			}
			this.__hideDelay = param1;
			if(param1 < 0.00)
			{
				param1 = 0.00;
			}
			this.hideTimer.delay = param1 * 1000;
		}

		public function get isFree() : Boolean
		{
			return false;
		}

		public function get absMatrix() : Array
		{
			return this._absMatrix.concat();
		}

		public function set buttonEffect(param1:IFlashEffButtonEffect) : void
		{
			if(this.buttonEffect != null)
			{
				this.buttonEffect.remove();
			}
			if(param1 != null)
			{
				setButtonEvents();
				this._buttonEffect = param1;
				this.buttonEffect["selected"] = this.selected;
				this._buttonEffect.target = this.buttonTarget;
				this._buttonEffect.component = this;
				this._buttonEffect.apply();
				this._buttonEffectName = String(getQualifiedClassName(param1).replace("::", "."));
			}
			else
			{
				removeButtonEvents();
				this._buttonEffect = null;
			}
		}

		public function removeAllFilters() : void
		{
			var _loc_1:* = undefined;
			var _loc_2:Boolean = false;
			if(this.filterList != null)
			{
				_loc_1 = 0;
				while(_loc_1 < this.filterList.length)
				{
					_loc_2 = removeFilter(this.filterList[_loc_1]);
					_loc_1 = _loc_1 - Number(_loc_2);
					_loc_1 = _loc_1 + 1;
				}
			}
			this.filterAsoc = [];
		}

		public function set swapType(param1:String) : void
		{
			if(param1 == SWAP_TYPE_HIDE || param1 == SWAP_TYPE_SHOW || param1 == SWAP_TYPE_HIDE_AND_SHOW)
			{
				this.__swapType = param1;
			}
		}

		public function get xmlPath() : String
		{
			return __xmlPath;
		}

		protected function rollOverCommandHandler(param1:MouseEvent) : void
		{
			runCommands(this._rollOverCommands);
		}

		public function getXML() : XML
		{
			return _xml;
		}

		protected function setProp(param1:XMLList, param2:Object) : void
		{
			var child:XML = null;
			var propType:String = null;
			var propValue:String = null;
			var propName:String = null;
			var arg:XMLList = param1;
			var refObj:Object = param2;
			if(refObj != null)
			{
				var _loc_4:int = 0;
				var _loc_5:* = arg.children();
				for each(child in _loc_5)
				{
					propType = child.@type;
					propValue = child.@value;
					propName = child.name().localName;
					try
					{
						switch(propType)
						{
						case "String":
							refObj[propName] = String(propValue);
							break;
						case "Number":
							refObj[propName] = Number(String(propValue));
							break;
						case "uint":
							refObj[propName] = uint(String(propValue));
							break;
						case "int":
							refObj[propName] = int(String(propValue));
							break;
						case "Boolean":
							refObj[propName] = String(propValue) == "true";
							break;
						case "Array":
							refObj[propName] = String(propValue).split(",");
							break;
						case "XML":
							refObj[propName] = XML(String(propValue));
							break;
						default:
							break;
						}
					}
					catch(e:Error)
					{
						trace("FLASHEFF2 ERROR: While trying to set the " + propName + " on " + refObj + ",this error came:" + e.message);
					}
				}
			}
		}

		protected function getCommandsNumber() : Number
		{
			var _loc_2:* = undefined;
			var _loc_1:Number = 0;
			var _loc_3:int = 0;
			var _loc_4:* = eventTypeAsoc;
			for each(_loc_2 in _loc_4)
			{
				_loc_1 = _loc_1 + (this["_" + _loc_2 + "Commands"]).length;
			}
			return _loc_1;
		}

		protected function showCaller(param1:TimerEvent) : void
		{
			show();
		}

		public function get hideAutoPlay() : Boolean
		{
			return __hideAutoPlay;
		}

		public function get partialTable() : FeTable
		{
			return this._partialTable;
		}

		protected function releaseButtonHandler(param1:MouseEvent = null, param2:Boolean = false) : void
		{
			if(this._toggle == true)
			{
				if(this.isDragOut == true)
				{
					if(param2 == true || this.isMouseTriggered == true)
					{
						if(this._isTransitioning == false)
						{
							if(this.selected == false)
							{
								this.selected = true;
							}
							else
							{
								if(getNumGroupButtons() < 2)
								{
									this.selected = false;
								}
								else
								{
									clickButtonHandler(param1, param2);
								}
							}
						}
					}
				}
				if(param1 != null)
				{
					dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.MOUSE_UP));
				}
			}
			else
			{
				clickButtonHandler(param1, param2);
			}
		}

		protected function removedFromStage(param1:Event) : void
		{
			if(REMOVED_FROM_FLASHEFF == false)
			{
				removeEffect(true);
				removeAllCommands();
				removeAllFilters();
				removeButtonEffect();
			}
		}

		public function get initialTargetTransform() : Transform
		{
			return this._initialTargetTransform;
		}

		public function show(param1:* = null) : void
		{
			this.forceAutoPlay = param1;
			this.showTimer.stop();
			this.hideTimer.stop();
			this.transitionType = "show";
			transitionEffect(this.transitionType);
		}

		public function get selected() : Boolean
		{
			return _selected;
		}

		public function removeAllCommandsByEventType(param1:String) : void
		{
			var _loc_2:Array = this["_" + param1 + "Commands"];
			if(_loc_2 != null)
			{
				if(_loc_2.length > 0)
				{
					this["_" + param1 + "Commands"] = [];
					if(eventTypeAsoc[param1] != "")
					{
						setCommands(param1);
					}
				}
			}
		}

		public function get isMouseTriggered() : Boolean
		{
			return _isMouseTriggered;
		}

		public function set targetVisibility(param1:Boolean) : void
		{
			__targetVisibility = param1;
		}

		public function get xmlString() : String
		{
			return __xmlString;
		}

		public function get swapTarget() : DisplayObject
		{
			return this._swapTarget;
		}

		protected function init() : void
		{
			this._targetOwner = new MovieClip();
			this._firstLevelOwner = new Sprite();
			this._highestOwner = new Sprite();
			this.bDBTO = new Sprite();
			this.bDBT = new Sprite();
			this.aDBT = new Sprite();
			this.aDBTO = new Sprite();
			this.aDBT.addChild(this.firstLevelOwner);
			this.aDBTO.addChild(this.aDBT);
			this.highestOwner.addChild(this.aDBTO);
			addChild(this.highestOwner);
			this.bDBT.addChild(this.targetOwner);
			this.bDBTO.addChild(bDBT);
			this.firstLevelOwner.addChild(this.bDBTO);
			this.buttonTarget = this.aDBT;
			this.firstInDepth = this.bDBTO;
			this.hitAreaClip = new Sprite();
			addChild(this.hitAreaClip);
			this.highestOwner.hitArea = this.hitAreaClip;
			this.hitAreaClip.mouseEnabled = false;
			this.hitAreaClip.visible = false;
			this.hitAreaClip.graphics.beginFill(0);
			this.hitAreaClip.graphics.drawRect(0, 0, 1, 1);
			this.hitAreaClip.graphics.endFill();
			this.hitAreaClip.height = 0;
			this.hitAreaClip.width = 0;
			this._textOwnerClip = new Sprite();
			this._partialTextOwnerClip = new Sprite();
			this.targetOwner.addChild(this._textOwnerClip);
			this.targetOwner.addChild(this._partialTextOwnerClip);
			this._textTable = new FeTable();
			this._partialTable = new FeTable();
			this._textOwnerClip.addChild(DisplayObject(this.textTable));
			this._partialTextOwnerClip.addChild(DisplayObject(this.partialTable));
			tTS = new Sprite();
			this._buttonOwner = new Sprite();
			this.aDBTO.addChild(this.buttonOwner);
			resetArrays();
			this._filterList = [];
			this._rollOverCommands = [];
			this._rollOutCommands = [];
			this._pressCommands = [];
			this._releaseCommands = [];
			this._doubleClickCommands = [];
			this._showTransitionStartCommands = [];
			this._showTransitionEndCommands = [];
			this._hideTransitionStartCommands = [];
			this._hideTransitionEndCommands = [];
			this.filterAsoc = [];
			if(targetPaths == null)
			{
				targetPaths = [];
			}
			if(groupList == null)
			{
				groupList = [];
			}
			this.showTimer = new Timer(this.showDelay * 1000, 1);
			this.hideTimer = new Timer(this.hideDelay * 1000, 1);
			this.partialPatternName = this.__partialPattern;
			addEventListener(Event.REMOVED_FROM_STAGE, removedFromStage);
		}

		protected function setCommands(param1:String) : void
		{
			var eventType:String = param1;
			try
			{
				if(!(this["_" + eventType + "Commands"]) == null && (this["_" + eventType + "Commands"]).length > 0)
				{
					this.highestOwner.addEventListener(MouseEvent[eventType.eventTypeAsoc[eventType]], this[eventType + "CommandHandler"]);
				}
				else
				{
					this.highestOwner.removeEventListener(MouseEvent[eventType.eventTypeAsoc[eventType]], this[eventType + "CommandHandler"]);
				}
			}
			catch(e:Error)
			{
				trace("FLASHEFF2 ERROR: Unknown eventType. Available events  are: rollOver, rollOut, press, release, doubleClick, showTransitionStart, showTransitionEnd, hideTransitionStart and hideTransitionEnd.");
			}
			if(this.highestOwner.hasEventListener("doubleClick"))
			{
				this.highestOwner.doubleClickEnabled = true;
				this.highestOwner.mouseChildren = false;
			}
			else
			{
				this.highestOwner.doubleClickEnabled = false;
				this.highestOwner.mouseChildren = true;
			}
		}

		public function set showDelay(param1:Number) : void
		{
			if(isNaN(param1))
			{
				param1 = 0;
			}
			else
			{
				if(param1 <= 0)
				{
					param1 = 0;
				}
			}
			this.__showDelay = param1;
			if(param1 < 0.00)
			{
				param1 = 0.00;
			}
			this.showTimer.delay = param1 * 1000;
		}

		public function set useSwapInsteadHide(param1:Boolean) : void
		{
			this._useSwapInsteadHide = param1;
		}

		protected function clickButtonHandler(param1:MouseEvent = null, param2:Boolean = false) : void
		{
			if(this.isDragOut == true)
			{
				if(param2 == true || this.isMouseTriggered == true)
				{
					if(this._isTransitioning == false)
					{
						if(this.buttonEffect != null)
						{
							this.buttonEffect.buttonRelease();
						}
					}
				}
			}
			if(param1 != null)
			{
				dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.MOUSE_UP));
			}
		}

		override public function set useHandCursor(param1:Boolean) : void
		{
			var arg:Boolean = param1;
			this._useHandCursor = arg;
			this.highestOwner.buttonMode = arg;
			this.highestOwner.useHandCursor = arg;
			try
			{
				this.target["mouseEnabled"] = !arg;
			}
			catch(e:Error)
			{
			}
		}

		public function set clearAfterHide(param1:Boolean) : void
		{
			_clearAfterHide = param1;
		}

		public function set target(param1:DisplayObject) : void
		{
			var point:Point = null;
			var bounds:Rectangle = null;
			var arg:DisplayObject = param1;
			if(this._target != null)
			{
				if(this.showPattern != null)
				{
					try
					{
						this.showPattern.remove();
						this.showPattern["target"] = null;
					}
					catch(e:Error)
					{
					}
				}
				if(this.hidePattern != null)
				{
					try
					{
						this.hidePattern.remove();
						this.hidePattern["target"] = null;
					}
					catch(e:Error)
					{
					}
				}
				removeFromGroupList(this.target);
				this._target.visible = true;
				resetChildDisplayList(this._target);
			}
			if(arg != null)
			{
				if(arg.parent != null)
				{
					resetChildDisplayList(arg);
					addToGroupList(arg);
					this._target = arg;
					if(this._targetInstanceName == "")
					{
						invalidate();
						setDrawTime();
					}
					this.__targetInstanceName = arg.name;
					point = new Point(0, 0);
					bounds = arg.getBounds(arg);
					if(arg is TextField)
					{
						point.x = bounds.x;
						point.y = bounds.y;
						this._textField = TextField(arg);
						this.textField.visible = false;
						var _loc_3:* = this.textField.scaleX;
						this._textOwnerClip.scaleX = _loc_3;
						this._partialTextOwnerClip.scaleX = _loc_3;
						var _loc_3:* = this.textField.scaleY;
						this._textOwnerClip.scaleY = _loc_3;
						this._partialTextOwnerClip.scaleY = _loc_3;
					}
					this.hitAreaClip.width = bounds.width * this.target.scaleX;
					this.hitAreaClip.height = bounds.height * this.target.scaleY;
					this.hitAreaClip.x = (bounds.x * target.scaleX) - point.x;
					this.hitAreaClip.y = (bounds.y * target.scaleY) - point.y;
					point = arg.localToGlobal(point);
					point = this.parent.globalToLocal(point);
					arg.targetPaths[getPath(arg)] = {target:arg, displayList:target.parent, x:arg.x, y:arg.y, rotation:arg.rotation};
					arg.REMOVED_FROM_FLASHEFF = true;
					this.targetOwner.addChild(arg);
					arg.REMOVED_FROM_FLASHEFF = false;
					this.x = this.x + (point.x - this.x);
					this.y = this.y + (point.y - this.y);
					this.rotation = this.target.rotation;
					this.target.x = 0;
					this.target.y = 0;
					this.target.rotation = 0;
					tTS.transform = arg.transform;
					this._initialTargetTransform = tTS.transform;
				}
				else
				{
					trace("FLASHEFF2 ERROR: Please add the target to the display list, before setting the _targetInstanceName|target property on FlashEff2.");
				}
			}
			else
			{
				trace("FLASHEFF2 ERROR: Target must be a non-null DisplayObject.");
			}
		}

		public function set _targetInstanceName(param1:String) : void
		{
			var scope:DisplayObjectContainer = null;
			var paths:Array = null;
			var targName:String = null;
			var i:* = undefined;
			var newTarget:DisplayObject = null;
			var strPath:String = null;
			var existObj:Object = null;
			var arg:String = param1;
			if(arg != "")
			{
				if(this.parent is DisplayObject)
				{
					scope = this.parent;
					paths = arg.split(".");
					targName = paths.pop();
					try
					{
						i = 0;
						while(i < paths.length)
						{
							scope = scope[paths[i]];
							i = i + 1;
						}
					}
					catch(e:Error)
					{
						trace("FLASHEFF2 ERROR: The _targetInstanceName path is invalid.");
						return;
					}
					if(scope != null)
					{
						newTarget = scope.getChildByName(targName);
						if(newTarget == null)
						{
							strPath = getPath(scope);
							existObj = arg.targetPaths[(strPath + ".") + arg];
							if(existObj != null)
							{
								newTarget = existObj.target;
							}
						}
						this.target = newTarget;
					}
				}
				else
				{
					trace("FLASHEFF2 ERROR: Please add the component to the display list, before setting the _targetInstanceName property.");
				}
				this.__targetInstanceName = arg;
			}
		}

		protected function startPartialEffect() : void
		{
			if(this.partialPattern != null)
			{
				try
				{
					this.partialPattern["partialBlurAmount"] = IFlashEffText(this.lastTransitionPattern).partialBlurAmount;
					this.partialPattern["partialStart"] = IFlashEffText(this.lastTransitionPattern).partialStart;
					this.partialPattern.tweenDuration = this.lastTransitionPattern.tweenDuration;
					this.partialPattern.tweenType = this.lastTransitionPattern.tweenType;
					this.partialPattern.easeType = this.lastTransitionPattern.easeType;
				}
				catch(e:Error)
				{
					trace("FLASHEFF2 ERROR: an error ocured when trying to set partialBlurAmount, partialStart, tweenDuration,tweenType and easeType on the partialPattern.");
				}
				var _loc_2:* = this.partialPattern;
				_loc_2[this.transitionType]();
			}
			clearInterval(this.partialInterval);
		}

		protected function targetOnAdd(param1:Event) : void
		{
			if(this.target.parent is MovieClip)
			{
				if(MovieClip(this.target.parent).currentFrame <= 1)
				{
					this.target.visible = false;
				}
			}
			this.target.removeEventListener(Event.ADDED_TO_STAGE, this.targetOnAdd);
			this.target.stage.invalidate();
			this.firstLevelOwner.addEventListener(Event.RENDER, callDraw);
		}

		public function removeFilter(param1:IFlashEffFilter) : Boolean
		{
			var _loc_2:* = undefined;
			var _loc_3:uint = 0;
			if(param1 != null)
			{
				param1.remove();
				var _loc_4:int = 0;
				var _loc_5:* = this.filterList;
				for each(_loc_2 in _loc_5)
				{
					if(this.filterList[_loc_2] == param1)
					{
						if(param1.target == this.firstInDepth)
						{
							this.firstInDepth = this.filterAsoc[param1.target.name];
						}
						if(this.filterList.length > (_loc_2 + 1))
						{
							this.filterAsoc[(this.filterList[_loc_2 + 1]).target.name] = this.filterAsoc[param1.target.name];
						}
						this.filterList.splice(_loc_2, 1);
						_loc_3 = 0;
						while(_loc_2 < param1.target.numChildren)
						{
							param1.target.parent.addChild(param1.target.getChildAt(_loc_3));
							_loc_3 = _loc_3 + 1;
						}
						param1.target.parent.removeChild(param1.target);
						return true;
					}
				}
			}
			return false;
		}

		public function setProperties(param1:*) : void
		{
			var child:XML = null;
			var command:IFlashEffCommand = null;
			var filter:IFlashEffFilter = null;
			var me:FlashEff2 = null;
			var urlLdr:URLLoader = null;
			var xmlArg:* = param1;
			if(xmlArg is XML)
			{
				invalidate();
				this._xml = xmlArg;
				removeEffect(true);
				removeAllCommands();
				removeAllFilters();
				removeButtonEffect();
				if(xmlArg.params.children().length() > 0)
				{
					setProp(xmlArg.params, this);
				}
				var _loc_3:int = 0;
				var _loc_4:* = xmlArg.patterns.children();
				for each(child in _loc_4)
				{
					switch(String(child.@type))
					{
					case "command":
						command = addCommandByName(String(child.@name), String(child.@event));
						setProp(child.@params, command);
						break;
					case "showCommand":
						command = addCommandByName(String(child.@name), String(child.@event));
						setProp(child.@params, command);
						break;
					case "hideCommand":
						command = addCommandByName(String(child.@name), String(child.@event));
						setProp(child.@params, command);
						break;
					case "filter":
						filter = addFilterByName(String(child.@name));
						setProp(child.@params, filter);
						break;
					case "buttonEffect":
						this.buttonEffectName = String(child.@name);
						setProp(child.@params, this.buttonEffect);
						break;
					case "hide":
						this.hideTransitionName = String(child.@name);
						setProp(child.@params, this.hidePattern);
						break;
					case "show":
						this.showTransitionName = String(child.@name);
						setProp(child.@params, this.showPattern);
						break;
					case "swap":
						this.swapTransitionName = String(child.@name);
						setProp(child.@params, this.swapPattern);
						break;
					default:
						break;
					}
				}
				drawCalled = false;
				setDrawTime();
			}
			else
			{
				me = this;
				urlLdr = new URLLoader();
				urlLdr.dataFormat = "text";
				function _func_3738(param1:Event)
				{
					var _loc_2:FLASHEFFEvents = new FLASHEFFEvents(FLASHEFFEvents.COMPLETE);
					_loc_2.data = urlLdr.data;
					me.dispatchEvent(_loc_2);
					var _loc_3:XML = XML(urlLdr.data);
					if(String(_loc_3.@params.xmlPath.value) == xmlArg)
					{
						_loc_3.@params.xmlPath.value = "";
					}
					me.setProperties(_loc_3);
				}
				urlLdr.addEventListener(Event.COMPLETE, _func_3738);
				function _func_3739(param1:Event)
				{
					trace("FLASHEFF2 ERROR: There was an IO_ERROR problem loading the xml. Please check the xmlPath.");
					me.dispatchEvent(param1);
				}
				urlLdr.addEventListener("ioError", _func_3739);
				urlLdr.load(new URLRequest(xmlArg));
			}
		}

		public function get swapTargetVisibility() : Boolean
		{
			return __swapTargetVisibility;
		}

		protected function resetChildDisplayList(param1:DisplayObject) : void
		{
			var _loc_3:* = undefined;
			var _loc_4:Object = null;
			var _loc_2:Array = targetPaths;
			var _loc_5:int = 0;
			var _loc_6:* = _loc_2;
			for each(_loc_3 in _loc_6)
			{
				_loc_4 = _loc_6[_loc_3];
				if(_loc_4 != null)
				{
					if(_loc_4.target == param1)
					{
						if(_loc_4.displayList.getChildByName(param1.name) == null)
						{
							_loc_4.displayList.addChild(param1);
							param1.x = _loc_4.x;
							param1.y = _loc_4.y;
							param1.rotation = _loc_4.rotation;
						}
						targetPaths[_loc_3] = null;
						return;
					}
				}
			}
		}

		public function removeEffect(param1:Boolean = false, param2:IFlashEffSymbolText = null) : void
		{
			if(param2 == null)
			{
				param2 = this.lastTransitionPattern;
			}
			if(param2 != null)
			{
				param2.remove();
			}
			if(this.partialPattern != null)
			{
				this.partialPattern.remove();
			}
			if(this.textTable != null)
			{
				this.textTable.removeChilds();
			}
			if(this.partialTable != null)
			{
				this.partialTable.removeChilds();
			}
			if(param1 == false)
			{
				if(_isTransitioning == true)
				{
					eventsDispatched = 0;
					maxEndEvents = 1;
					dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.TRANSITION_END));
				}
			}
			if(target != null)
			{
				this.target.visible = _isTargetVisibleAtEnd;
			}
			this.maxEndEvents = 0;
		}

		public function set selected(param1:Boolean) : void
		{
			var _loc_2:* = undefined;
			var _loc_3:FlashEff2 = null;
			var _loc_4:Point = null;
			if(!isInvalid("all"))
			{
				if(param1 == true)
				{
					var _loc_5:int = 0;
					var _loc_6:* = groupList;
					for each(_loc_2 in _loc_6)
					{
						_loc_3 = groupList[_loc_2];
						if(_loc_3 != this)
						{
							if(_loc_3.selected == true)
							{
								if(_loc_3.groupName == this.groupName)
								{
									_loc_3.selected = false;
								}
							}
						}
					}
				}
			}
			_selected = param1;
			if(this.buttonEffect != null)
			{
				this.buttonEffect["selected"] = param1;
			}
			if(!isInvalid("all"))
			{
				if(this.buttonEffect != null)
				{
					_loc_4 = new Point(this.mouseX, this.mouseY);
					_loc_4 = localToGlobal(_loc_4);
					if(this.highestOwner.hitTestPoint(_loc_4.x, _loc_4.y, true))
					{
						buttonRollOver();
					}
					else
					{
						buttonRollOut();
					}
				}
			}
		}

		public function set buttonEffectName(param1:String) : void
		{
			var btnEff:Class = null;
			var arg:String = param1;
			if(arg != "")
			{
				try
				{
					btnEff = getDefinitionByName(arg);
					this.buttonEffect = IFlashEffButtonEffect(new btnEff(this));
				}
				catch(e:Error)
				{
				}
				this._buttonEffectName = arg;
			}
		}

		public function set showAutoPlay(param1:Boolean) : void
		{
			__showAutoPlay = param1;
			invalidate();
			setDrawTime();
		}

		public function getFilterAt(param1:uint) : IFlashEffFilter
		{
			if(param1 < this.filterList.length)
			{
				return this.filterList[param1];
			}
			return null;
		}

		override protected function draw() : void
		{
			var _loc_1:Boolean = false;
			var _loc_2:* = undefined;
			var _loc_3:Timer = null;
			var _loc_4:* = undefined;
			var _loc_5:FlashEff2 = null;
			var _loc_6:Point = null;
			if(isInvalid("all"))
			{
				if(this.target != null)
				{
					_loc_1 = false;
					if(!(this.showPattern == null) && this.showAutoPlay == true)
					{
						this.transitionType = "show";
						_loc_1 = true;
					}
					else
					{
						if(this.hidePattern != null)
						{
							if(this.hideAutoPlay == true)
							{
								_loc_1 = true;
								this.transitionType = "hide";
							}
						}
					}
					if(this.target.parent != this.targetOwner)
					{
						if(_loc_1 == true || this.filterList.length > 0 || getCommandsNumber() > 0)
						{
							this.target = this.target;
						}
					}
					this.target.visible = this.targetVisibility;
					if(this.selected == true)
					{
						var _loc_7:int = 0;
						var _loc_8:* = groupList;
						for each(_loc_4 in _loc_8)
						{
							_loc_5 = groupList[_loc_4];
							if(_loc_5 != this)
							{
								if(_loc_5.selected == true)
								{
									if(_loc_5.groupName == this.groupName)
									{
										_loc_5.selected = false;
									}
								}
							}
						}
					}
					if(this.buttonEffect != null)
					{
						_loc_6 = new Point(this.mouseX, this.mouseY);
						_loc_6 = localToGlobal(_loc_6);
						if(this.highestOwner.hitTestPoint(_loc_6.x, _loc_6.y, true))
						{
							buttonRollOver();
						}
						else
						{
							buttonRollOut();
						}
					}
					var _loc_7:int = 0;
					var _loc_8:* = this.filterList;
					for each(_loc_2 in _loc_8)
					{
						IFlashEffFilter(this.filterList[_loc_2]).remove();
						IFlashEffFilter(this.filterList[_loc_2]).apply();
					}
				}
				dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.INIT));
				super.draw();
			}
		}

		public function get swapTransition() : IFlashEffSymbolText
		{
			return this.swapPattern;
		}

		public function hide() : void
		{
			this.showTimer.stop();
			this.hideTimer.stop();
			this.transitionType = "hide";
			transitionEffect(this.transitionType);
		}

		public function get isTargetVisibleAtEnd() : Boolean
		{
			return _isTargetVisibleAtEnd;
		}

		public function transitionEffect(param1:String = "show") : void
		{
			var i:* = undefined;
			var transt:String = param1;
			if(isInvalid("all"))
			{
				var _loc_3:int = 0;
				var _loc_4:* = this.filterList;
				for each(i in _loc_4)
				{
					IFlashEffFilter(this.filterList[i]).remove();
					IFlashEffFilter(this.filterList[i]).apply();
				}
			}
			validate();
			removeEffect(true);
			this.maxEndEvents = 1;
			this._cTT = transt;
			if(this.target != null)
			{
				if(this.targetOwner.getChildByName(this.target.name) != this.target)
				{
					this.target = this.target;
				}
				try
				{
					eventsDispatched = 0;
					this.lastTransitionPattern = this[transt + "Pattern"];
					if(transt == "hide")
					{
						if(this.useSwapInsteadHide == true)
						{
							if(this.forceHide == false)
							{
								if(this.swapTarget != null)
								{
									this._cTT = "swap";
									switch(this.swapType)
									{
									case transt.SWAP_TYPE_HIDE:
										addSwapFlashEff2(0);
										break;
									case transt.SWAP_TYPE_SHOW:
										addSwapFlashEff2(this.numChildren);
										break;
									default:
										addSwapFlashEff2(0);
										break;
									}
									this.swapFlashEff2.target = this.swapTarget;
									this.swapFlashEff2.showDelay = this.swapDelay || 0.00;
									if(this.swapType != transt.SWAP_TYPE_HIDE)
									{
										if(this.swapPattern != null)
										{
											this.swapFlashEff2.showTransition = this.swapPattern;
										}
										else
										{
											this.swapFlashEff2.showTransition = clonePattern(this.showPattern);
										}
										if(this.swapType == transt.SWAP_TYPE_SHOW)
										{
											this.target.visible = true;
											dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.TRANSITION_START));
											return;
										}
										else
										{
											this.maxEndEvents = 2;
										}
									}
									else
									{
										this.swapTarget.visible = true;
									}
								}
								else
								{
									trace("FLASHEFF2 ERROR: The swapTarget property is null, a hide transition will be applied.");
								}
							}
						}
					}
					if(this.lastTransitionPattern != null)
					{
						if(this.target.parent != this.targetOwner)
						{
							this.target = this.target;
						}
						this.target.visible = true;
						this.lastTransitionPattern.component = this;
						try
						{
							this.lastTransitionPattern["target"] = this.target;
						}
						catch(e:TypeError)
						{
							trace("FLASHEFF2 ERROR: You have placed a text pattern over a symbol. Please use a symbol pattern instead!");
							return;
						}
						_isTransitioning = true;
						var _loc_3:* = this.lastTransitionPattern;
						_loc_3[transt]();
					}
					else
					{
						trace("FLASHEFF2 WARNING: The " + transt + "Transition pattern is null. The transition will not be applied.");
					}
				}
				catch(e:ReferenceError)
				{
					throw "FLASHEFF2 ERROR: " + e;
				}
			}
			else
			{
				trace("FLASHEFF2 WARNING: Please set the target or _targetInstanceName property before applying an effect.");
			}
			this.forceHide = false;
		}

		public function get absWords() : Array
		{
			return this._absWords.concat();
		}

		public function changeTarget(param1:DisplayObject) : void
		{
			var _loc_2:Timer = null;
			this.nextTarget = param1;
			if(this.target != null)
			{
				this.setNewTarget = true;
				_loc_2 = this.hideTimer;
				this.forceHide = true;
				if(this.hideDelay > 0)
				{
					_loc_2.reset();
					_loc_2.start();
					_loc_2.addEventListener(TimerEvent.TIMER, this.hideCaller);
				}
				else
				{
					hide();
				}
			}
			else
			{
				this.target = param1;
				show(false);
			}
		}

		protected function linesSplit() : Array
		{
			var _loc_7:* = undefined;
			var _loc_8:String = null;
			var _loc_9:Boolean = false;
			var _loc_10:uint = 0;
			var _loc_11:* = undefined;
			var _loc_1:Array = [];
			var _loc_2:Array = [];
			var _loc_3:uint = this.textField.numLines;
			var _loc_4:uint = 0;
			var _loc_5:Number = 0;
			var _loc_6:uint = 0;
			while(_loc_6 < _loc_3)
			{
				_loc_7 = this.textField.getCharBoundaries(_loc_4);
				_loc_8 = this.textField.getLineText(_loc_6);
				_loc_9 = false;
				if(_loc_7 == null)
				{
					_loc_9 = true;
					_loc_10 = _loc_8.length;
					if(_loc_10 > 0)
					{
						_loc_11 = 0;
						while(_loc_11 < _loc_10)
						{
							_loc_7 = this.textField.getCharBoundaries(_loc_4 + _loc_11);
							if(_loc_7 != null)
							{
								_loc_9 = false;
								break;
							}
							_loc_11 = _loc_11 + 1;
						}
					}
				}
				if(_loc_9 == false)
				{
					_loc_2[_loc_6 - _loc_5] = {id:_loc_4, bounds:_loc_7, lineId:_loc_6, text:_loc_8};
					_loc_4 = _loc_4 + String(_loc_8).length;
				}
				else
				{
					_loc_5 = _loc_5 + 1;
					_loc_4 = _loc_4 + _loc_8.length;
				}
				_loc_6 = _loc_6 + 1;
			}
			return _loc_2;
		}

		public function set swapDelay(param1:Number) : void
		{
			this.__swapDelay = param1;
		}

		public function get hideDelay() : Number
		{
			return __hideDelay;
		}

		protected function resetArrays() : void
		{
			_absChars = [];
			_absWords = [];
			_absLines = [];
			_absMatrix = [];
			_absCustom = [];
		}

		public function addCommand(param1:IFlashEffCommand, param2:String) : IFlashEffCommand
		{
			var command:IFlashEffCommand = param1;
			var eventType:String = param2;
			if(command != null)
			{
				try
				{
					this["_" + eventType + "Commands"].push(command);
					command.component = this;
					command.target = this.target;
					command.commandEventType = eventType;
					if(command.eventTypeAsoc[eventType] != "")
					{
						setCommands(eventType);
					}
				}
				catch(e:Error)
				{
					trace("FLASHEFF2 ERROR: Unknown eventType. Available events  are: rollOver, rollOut, press, release, doubleClick, showTransitionStart, showTransitionEnd, hideTransitionStart and hideTransitionEnd.");
				}
			}
			return command;
		}

		protected function charSplit(param1:String, param2:uint) : Array
		{
			var _loc_8:Rectangle = null;
			var _loc_3:Array = String(param1).split("");
			var _loc_4:Array = [];
			var _loc_5:uint = _loc_3.length;
			var _loc_6:uint = 0;
			var _loc_7:uint = 0;
			while(_loc_7 < _loc_5)
			{
				_loc_8 = this.textField.getCharBoundaries(param2 + _loc_7);
				if(_loc_3[_loc_7] != " ")
				{
					if(!isNaN(String(_loc_3[_loc_7]).charCodeAt(0)))
					{
						if(_loc_8 != null)
						{
							_loc_4[_loc_7 - _loc_6] = {id:param2 + _loc_7, bounds:_loc_8, text:_loc_3[_loc_7]};
						}
						else
						{
							_loc_6 = _loc_6 + 1;
						}
					}
				}
				else
				{
					_loc_6 = _loc_6 + 1;
				}
				_loc_7 = _loc_7 + 1;
			}
			return _loc_4;
		}

		protected function releaseCommandHandler(param1:MouseEvent) : void
		{
			runCommands(this._releaseCommands);
		}

		public function get hideTransitionName() : String
		{
			return this._hideTransitionName;
		}

		protected function clonePattern(param1:Object) : Object
		{
			var _loc_2:XML = null;
			var _loc_3:XMLList = null;
			var _loc_4:String = null;
			var _loc_5:Class = null;
			var _loc_6:* = undefined;
			var _loc_7:int = NaN;
			var _loc_8:* = undefined;
			var _loc_9:XML = null;
			var _loc_10:String = null;
			if(param1 != null)
			{
				_loc_2 = describeType(param1);
				_loc_3 = _loc_2.elements("accessor");
				_loc_4 = String(_loc_2.@name);
				_loc_5 = getDefinitionByName(_loc_4);
				_loc_6 = new _loc_5();
				_loc_7 = _loc_3.length();
				_loc_8 = 0;
				while(_loc_8 < _loc_7)
				{
					_loc_9 = _loc_3[_loc_8];
					if(_loc_9.@declaredBy == _loc_4)
					{
						if(_loc_9.@access == "readwrite")
						{
							_loc_10 = _loc_9.@name;
							_loc_6[_loc_10] = param1[_loc_10];
						}
					}
					_loc_8 = _loc_8 + 1;
				}
				return _loc_6;
			}
			return null;
		}

		protected function hideCaller(param1:TimerEvent) : void
		{
			hide();
		}

		protected function rollOutCommandHandler(param1:MouseEvent) : void
		{
			runCommands(this._rollOutCommands);
		}

		public function get clearAfterHide() : Boolean
		{
			return _clearAfterHide;
		}

		public function addFilter(param1:IFlashEffFilter) : void
		{
			var _loc_2:DisplayObject = null;
			var _loc_3:Boolean = false;
			if(param1 != null)
			{
				_loc_2 = this.firstInDepth;
				this.firstInDepth = new Sprite();
				this.firstLevelOwner.addChild(this.firstInDepth);
				this.firstInDepth.addChild(_loc_2);
				param1.component = this;
				param1.target = this.firstInDepth;
				this.filterAsoc[param1.target.name] = _loc_2;
				if(!isInvalid("all"))
				{
					_loc_3 = this.target.visible;
					this.target.visible = true;
					param1.apply();
					this.target.visible = _loc_3;
				}
				this.filterList.push(param1);
			}
		}

		public function get swapType() : String
		{
			return this.__swapType;
		}

		public function removeFromGroupList(param1:DisplayObject) : void
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_4:* = groupList;
			for each(_loc_2 in _loc_4)
			{
				if(groupList[_loc_2].target == param1)
				{
					groupList.splice(_loc_2, 1);
				}
			}
		}

		public function get targetVisibility() : Boolean
		{
			return __targetVisibility;
		}

		public function set isFree(param1:Boolean) : void
		{
		}

		public function get buttonEffect() : IFlashEffButtonEffect
		{
			return this._buttonEffect;
		}

		protected function addSwapFlashEff2(param1:uint = 0)
		{
			var _loc_2:* = undefined;
			if(this.swapFlashEff2 != null)
			{
				removeSwapFlashEff2();
			}
			this.swapFlashEff2 = new FlashEff2();
			this.swapFlashEff2.addEventListener(FLASHEFFEvents.TRANSITION_END, dispatchEvent);
			this.swapFlashEff2.addEventListener(FLASHEFFEvents.DOUBLE_CLICK, dispatchEvent);
			this.swapFlashEff2.addEventListener(FLASHEFFEvents.MOUSE_DOWN, dispatchEvent);
			this.swapFlashEff2.addEventListener(FLASHEFFEvents.MOUSE_UP, dispatchEvent);
			this.swapFlashEff2.addEventListener(FLASHEFFEvents.ROLL_OUT, dispatchEvent);
			this.swapFlashEff2.addEventListener(FLASHEFFEvents.ROLL_OVER, dispatchEvent);
			addChildAt(this.swapFlashEff2, param1);
			var _loc_3:int = 0;
			var _loc_4:* = this.filterList;
			for each(_loc_2 in _loc_4)
			{
				this.swapFlashEff2.addFilter(clonePattern(this.filterList[_loc_2]));
			}
			var _loc_3:int = 0;
			var _loc_4:* = this.commands;
			for each(_loc_2 in _loc_4)
			{
				this.swapFlashEff2.addCommand(clonePattern(this.commands[_loc_2]), this.commands[_loc_2].commandEventType);
			}
		}

		public function addCommandByName(param1:String, param2:String, param3:Object = null) : IFlashEffCommand
		{
			var commandRef:Class = null;
			var command:IFlashEffCommand = null;
			var i:* = undefined;
			var commandName:String = param1;
			var eventType:String = param2;
			var initObj:Object = param3;
			try
			{
				commandRef = getDefinitionByName(commandName);
				command = IFlashEffCommand(new commandRef(this));
				if(initObj != null)
				{
					var _loc_5:int = 0;
					var _loc_6:* = initObj;
					for each(i in _loc_6)
					{
						command[i] = initObj[i];
					}
				}
			}
			catch(e:ReferenceError)
			{
				trace("FLASHEFF2 ERROR: The command pattern '" + e + "' is missing from library.");
				return null;
			}
			return addCommand(command, eventType);
		}

		protected function removeButtonEvents() : void
		{
			this.highestOwner.removeEventListener(MouseEvent.ROLL_OVER, this.rollOverButtonHandler);
			this.highestOwner.removeEventListener(MouseEvent.ROLL_OUT, this.rollOutButtonHandler);
			this.highestOwner.removeEventListener(MouseEvent.MOUSE_DOWN, this.pressButtonHandler);
			this.highestOwner.removeEventListener(MouseEvent.MOUSE_UP, this.releaseButtonHandler);
			isButtonEffectApplyed = false;
		}

		public function get target() : DisplayObject
		{
			return this._target;
		}

		public function swap(param1:DisplayObject = null, param2:String = "") : void
		{
			if(param1 != null)
			{
				this.swapTarget = param1;
			}
			if(param2 != "")
			{
				this.swapType = param2;
			}
			this.useSwapInsteadHide = true;
			hide();
		}

		protected function doubleClickCommandHandler(param1:MouseEvent) : void
		{
			runCommands(this._doubleClickCommands);
			dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.DOUBLE_CLICK));
		}

		public function get _targetInstanceName() : String
		{
			return this.__targetInstanceName;
		}

		public function get useSwapInsteadHide() : Boolean
		{
			return this._useSwapInsteadHide;
		}

		override public function get useHandCursor() : Boolean
		{
			return _useHandCursor;
		}

		public function get targetOwner() : MovieClip
		{
			return this._targetOwner;
		}

		public function get absLines() : Array
		{
			return this._absLines.concat();
		}

		protected function rollOutButtonHandler(param1:MouseEvent = null, param2:Boolean = false) : void
		{
			if(param2 == true || this.isMouseTriggered == true)
			{
				if(this._isTransitioning == false)
				{
					if(this.buttonEffect != null)
					{
						this.buttonEffect.buttonRollOut();
					}
				}
			}
			this.isDragOut = false;
			if(param1 != null)
			{
				dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.ROLL_OUT));
			}
		}

		public function get showAutoPlay() : Boolean
		{
			return __showAutoPlay;
		}

		public function get swapDelay() : Number
		{
			return this.__swapDelay;
		}

		public function get groupName() : String
		{
			return _groupName;
		}

		public function get isTransitioning() : Boolean
		{
			return this._isTransitioning;
		}

		public function set xmlPath(param1:String) : void
		{
			if(param1 != "")
			{
				this.__xmlPath = param1;
				setProperties(this.__xmlPath);
			}
		}

		public function set showTransitionName(param1:String) : void
		{
			var patternClass:Class = null;
			var arg:String = param1;
			if(arg != "")
			{
				try
				{
					patternClass = getDefinitionByName(arg);
					if(this.showPattern != null)
					{
						this.showPattern.remove();
					}
					this.showPattern = IFlashEffSymbolText(new patternClass(this));
				}
				catch(e:ReferenceError)
				{
					throw "FLASHEFF2 ERROR: The pattern '" + e + "' is missing from library.";
				}
				this._showTransitionName = arg;
			}
		}

		public function drawTextTable(param1:String, param2:String, param3:Number, param4:Array, param5:Number, param6:Number, param7:Array = null) : Boolean
		{
			var _loc_9:Array = null;
			var _loc_10:Array = null;
			var _loc_11:Array = null;
			var _loc_14:* = undefined;
			var _loc_15:* = undefined;
			var _loc_16:uint = 0;
			var _loc_19:uint = 0;
			var _loc_28:int = NaN;
			var _loc_29:Object = null;
			var _loc_30:* = undefined;
			var _loc_31:int = NaN;
			var _loc_32:int = NaN;
			var _loc_33:int = NaN;
			var _loc_34:int = NaN;
			this.textTable.removeChilds();
			this.partialTable.removeChilds();
			resetArrays();
			var _loc_8:Object = this.textTable;
			var _loc_12:Boolean = false;
			var _loc_13:Boolean = false;
			var _loc_17:uint = 1;
			var _loc_18:uint = 1;
			var _loc_20:uint = 0;
			var _loc_21:String = param1;
			var _loc_22:String = _loc_21;
			_loc_10 = linesSplit();
			_loc_17 = _loc_10.length;
			var _loc_23:Array = [];
			var _loc_24:Array = [];
			if(param2 == "lines")
			{
				filterArray(_loc_10, param2, param3, param4);
			}
			_loc_14 = 0;
			while(_loc_14 < _loc_17)
			{
				if(_loc_22 == "custom")
				{
					var _loc_35:customSplit = customSplit(_loc_10[_loc_14].text, _loc_10[_loc_14].id, param7[_loc_10[_loc_14].lineId]);
					_loc_10[_loc_14].childs = _loc_35;
					_loc_9 = _loc_35;
					var _loc_35:String = "words";
					_loc_22 = _loc_35;
					_loc_22 = _loc_22;
				}
				else
				{
					var _loc_35:wordsSplit = wordsSplit(_loc_10[_loc_14].text, _loc_10[_loc_14].id);
					_loc_10[_loc_14].childs = _loc_35;
					_loc_9 = _loc_35;
				}
				_loc_10[_loc_14].owner = this.textTable;
				_loc_18 = _loc_9.length;
				_loc_15 = 0;
				while(_loc_15 < _loc_18)
				{
					_loc_23.push(_loc_9[_loc_15]);
					_loc_9[_loc_15].passed = _loc_10[_loc_14].passed;
					_loc_9[_loc_15].owner = this.textTable;
					var _loc_35:charSplit = charSplit(_loc_9[_loc_15].text, _loc_9[_loc_15].id);
					_loc_9[_loc_15].childs = _loc_35;
					_loc_11 = _loc_35;
					_loc_19 = _loc_11.length;
					_loc_16 = 0;
					while(_loc_16 < _loc_19)
					{
						_loc_11[_loc_16].passed = _loc_9[_loc_15].passed;
						_loc_24.push(_loc_11[_loc_16]);
						_loc_16 = _loc_16 + 1;
					}
					_loc_15 = _loc_15 + 1;
				}
				_loc_14 = _loc_14 + 1;
			}
			if(param3 < 100 || param2 == "selectedStrings")
			{
				if(param2 == "words")
				{
					filterArray(_loc_23, param2, param3, param4);
				}
				else
				{
					if(param2 == "letters" || param2 == "selectedStrings")
					{
						filterArray(_loc_24, param2, param3, param4);
					}
				}
				_loc_28 = param5 * 10;
				if(this.transitionType == "hide")
				{
					_loc_28 = 0;
					this._partialTextOwnerClip.alpha = 1;
				}
				else
				{
					this._partialTextOwnerClip.alpha = 0;
				}
				clearInterval(this.partialInterval);
				this.lastTransitionPattern.tweenDuration;
				this.partialInterval = this.lastTransitionPattern.tweenDuration || setInterval(this.startPartialEffect, _loc_28 * 0);
				var _loc_36:* = this.maxEndEvents + 1;
				this.maxEndEvents = _loc_36;
			}
			switch(_loc_22.toLocaleLowerCase())
			{
			case "lines":
				_loc_17 = _loc_10.length;
				_loc_8 = this.textTable;
				_loc_15 = 0;
				while(_loc_15 < _loc_17)
				{
					_loc_29 = _loc_8;
					if(_loc_10[_loc_15].passed == false)
					{
						_loc_29 = this.partialTable;
					}
					_loc_30 = _loc_29.pushChild({type:"FeGroup", x:_loc_10[_loc_15].bounds.x, y:_loc_10[_loc_15].bounds.y, text:_loc_10[_loc_15].text, bounds:_loc_10[_loc_15].bounds, id:_loc_10[_loc_15].id});
					_loc_10[_loc_15].owner = _loc_30;
					_absLines.push(_loc_30);
					_loc_15 = _loc_15 + 1;
				}
				_loc_22 = "words";
				_loc_17 = _loc_10.length;
				_loc_14 = 0;
				while(_loc_14 < _loc_17)
				{
					_loc_31 = _loc_10[_loc_14].owner.x;
					_loc_32 = _loc_10[_loc_14].owner.y;
					_loc_29 = _loc_10[_loc_14].owner;
					_loc_9 = _loc_10[_loc_14].childs;
					_loc_18 = _loc_9.length;
					_loc_15 = 0;
					while(_loc_15 < _loc_18)
					{
						_loc_29 = _loc_29;
						_loc_33 = _loc_31;
						_loc_34 = _loc_32;
						if(_loc_9[_loc_15].passed == false && _loc_22 == "words" || param2 == "words")
						{
							_loc_29 = this.partialTable;
							_loc_33 = 0;
							_loc_34 = 0;
						}
						else
						{
							if(_loc_9[_loc_15].passed == false)
							{
								_loc_33 = 0;
								_loc_34 = 0;
							}
						}
						_loc_30 = _loc_29.pushChild({type:"FeGroup", x:_loc_9[_loc_15].bounds.x - _loc_33, y:_loc_9[_loc_15].bounds.y - _loc_34, text:_loc_9[_loc_15].text, bounds:_loc_9[_loc_15].bounds, id:_loc_9[_loc_15].id});
						_loc_9[_loc_15].owner = _loc_30;
						_absWords.push(_loc_30);
						if(_loc_22 == "custom")
						{
							_absCustom.push(_loc_30);
						}
						_loc_15 = _loc_15 + 1;
					}
					_loc_14 = _loc_14 + 1;
				}
				_loc_22 = "chars";
				_loc_14 = 0;
				while(_loc_14 < _loc_17)
				{
					_loc_9 = _loc_10[_loc_14].childs;
					_loc_18 = _loc_9.length;
					_loc_15 = 0;
					while(_loc_15 < _loc_18)
					{
						_loc_11 = _loc_9[_loc_15].childs;
						_loc_29 = _loc_9[_loc_15].owner;
						_loc_31 = _loc_29.x + _loc_10[_loc_14].owner.x;
						_loc_32 = _loc_29.y + _loc_10[_loc_14].owner.y;
						_loc_19 = _loc_11.length;
						_loc_16 = 0;
						while(_loc_16 < _loc_19)
						{
							_loc_29 = _loc_29;
							_loc_33 = _loc_31;
							_loc_34 = _loc_32;
							if(_loc_11[_loc_16].passed != false)
							{
								_loc_11[_loc_16].passed = _loc_9[_loc_15].passed;
							}
							if(_loc_11[_loc_16].passed == false)
							{
								if(_loc_22 == "chars" || param2 == "letters" || param2 == "selectedStrings")
								{
									_loc_29 = this.partialTable;
									_loc_33 = 0;
									_loc_34 = 0;
								}
								else
								{
									if(param2 == "words")
									{
										_loc_33 = _loc_29.x;
										_loc_34 = _loc_29.y;
									}
								}
							}
							_loc_30 = _loc_29.pushChild({type:"FeChar", x:(_loc_11[_loc_16].bounds.x - 2) - _loc_33, y:(_loc_11[_loc_16].bounds.y - 2) - _loc_34, text:_loc_11[_loc_16].text, bounds:_loc_11[_loc_16].bounds, id:_loc_11[_loc_16].id});
							_loc_20 = this.textField.getLineIndexOfChar(_loc_30.id);
							_loc_30.bottomPosition = this.textField.getLineMetrics(_loc_20).ascent;
							_loc_30.applyTextFormat(this.textField.getTextFormat(_loc_30.id, _loc_30.id + 1));
							_absChars.push(_loc_30);
							_loc_16 = _loc_16 + 1;
						}
						_loc_15 = _loc_15 + 1;
					}
					_loc_14 = _loc_14 + 1;
				}
				break;
			case "words":
				_loc_17 = _loc_10.length;
				_loc_14 = 0;
				while(_loc_14 < _loc_17)
				{
					_loc_31 = _loc_10[_loc_14].owner.x;
					_loc_32 = _loc_10[_loc_14].owner.y;
					_loc_29 = _loc_10[_loc_14].owner;
					_loc_9 = _loc_10[_loc_14].childs;
					_loc_18 = _loc_9.length;
					_loc_15 = 0;
					while(_loc_15 < _loc_18)
					{
						_loc_29 = _loc_29;
						_loc_33 = _loc_31;
						_loc_34 = _loc_32;
						if(_loc_9[_loc_15].passed == false && _loc_22 == "words" || param2 == "words")
						{
							_loc_29 = this.partialTable;
							_loc_33 = 0;
							_loc_34 = 0;
						}
						else
						{
							if(_loc_9[_loc_15].passed == false)
							{
								_loc_33 = 0;
								_loc_34 = 0;
							}
						}
						_loc_30 = _loc_29.pushChild({type:"FeGroup", x:_loc_9[_loc_15].bounds.x - _loc_33, y:_loc_9[_loc_15].bounds.y - _loc_34, text:_loc_9[_loc_15].text, bounds:_loc_9[_loc_15].bounds, id:_loc_9[_loc_15].id});
						_loc_9[_loc_15].owner = _loc_30;
						_absWords.push(_loc_30);
						if(_loc_22 == "custom")
						{
							_absCustom.push(_loc_30);
						}
						_loc_15 = _loc_15 + 1;
					}
					_loc_14 = _loc_14 + 1;
				}
				_loc_22 = "chars";
				_loc_14 = 0;
				while(_loc_14 < _loc_17)
				{
					_loc_9 = _loc_10[_loc_14].childs;
					_loc_18 = _loc_9.length;
					_loc_15 = 0;
					while(_loc_15 < _loc_18)
					{
						_loc_11 = _loc_9[_loc_15].childs;
						_loc_29 = _loc_9[_loc_15].owner;
						_loc_31 = _loc_29.x + _loc_10[_loc_14].owner.x;
						_loc_32 = _loc_29.y + _loc_10[_loc_14].owner.y;
						_loc_19 = _loc_11.length;
						_loc_16 = 0;
						while(_loc_16 < _loc_19)
						{
							_loc_29 = _loc_29;
							_loc_33 = _loc_31;
							_loc_34 = _loc_32;
							if(_loc_11[_loc_16].passed != false)
							{
								_loc_11[_loc_16].passed = _loc_9[_loc_15].passed;
							}
							if(_loc_11[_loc_16].passed == false)
							{
								if(_loc_22 == "chars" || param2 == "letters" || param2 == "selectedStrings")
								{
									_loc_29 = this.partialTable;
									_loc_33 = 0;
									_loc_34 = 0;
								}
								else
								{
									if(param2 == "words")
									{
										_loc_33 = _loc_29.x;
										_loc_34 = _loc_29.y;
									}
								}
							}
							_loc_30 = _loc_29.pushChild({type:"FeChar", x:(_loc_11[_loc_16].bounds.x - 2) - _loc_33, y:(_loc_11[_loc_16].bounds.y - 2) - _loc_34, text:_loc_11[_loc_16].text, bounds:_loc_11[_loc_16].bounds, id:_loc_11[_loc_16].id});
							_loc_20 = this.textField.getLineIndexOfChar(_loc_30.id);
							_loc_30.bottomPosition = this.textField.getLineMetrics(_loc_20).ascent;
							_loc_30.applyTextFormat(this.textField.getTextFormat(_loc_30.id, _loc_30.id + 1));
							_absChars.push(_loc_30);
							_loc_16 = _loc_16 + 1;
						}
						_loc_15 = _loc_15 + 1;
					}
					_loc_14 = _loc_14 + 1;
				}
				break;
			case "chars":
				_loc_14 = 0;
				while(_loc_14 < _loc_17)
				{
					_loc_9 = _loc_10[_loc_14].childs;
					_loc_18 = _loc_9.length;
					_loc_15 = 0;
					while(_loc_15 < _loc_18)
					{
						_loc_11 = _loc_9[_loc_15].childs;
						_loc_29 = _loc_9[_loc_15].owner;
						_loc_31 = _loc_29.x + _loc_10[_loc_14].owner.x;
						_loc_32 = _loc_29.y + _loc_10[_loc_14].owner.y;
						_loc_19 = _loc_11.length;
						_loc_16 = 0;
						while(_loc_16 < _loc_19)
						{
							_loc_29 = _loc_29;
							_loc_33 = _loc_31;
							_loc_34 = _loc_32;
							if(_loc_11[_loc_16].passed != false)
							{
								_loc_11[_loc_16].passed = _loc_9[_loc_15].passed;
							}
							if(_loc_11[_loc_16].passed == false)
							{
								if(_loc_22 == "chars" || param2 == "letters" || param2 == "selectedStrings")
								{
									_loc_29 = this.partialTable;
									_loc_33 = 0;
									_loc_34 = 0;
								}
								else
								{
									if(param2 == "words")
									{
										_loc_33 = _loc_29.x;
										_loc_34 = _loc_29.y;
									}
								}
							}
							_loc_30 = _loc_29.pushChild({type:"FeChar", x:(_loc_11[_loc_16].bounds.x - 2) - _loc_33, y:(_loc_11[_loc_16].bounds.y - 2) - _loc_34, text:_loc_11[_loc_16].text, bounds:_loc_11[_loc_16].bounds, id:_loc_11[_loc_16].id});
							_loc_20 = this.textField.getLineIndexOfChar(_loc_30.id);
							_loc_30.bottomPosition = this.textField.getLineMetrics(_loc_20).ascent;
							_loc_30.applyTextFormat(this.textField.getTextFormat(_loc_30.id, _loc_30.id + 1));
							_absChars.push(_loc_30);
							_loc_16 = _loc_16 + 1;
						}
						_loc_15 = _loc_15 + 1;
					}
					_loc_14 = _loc_14 + 1;
				}
				break;
			default:
				break;
			}
			this.textTable.cleanMe();
			var _loc_25:uint = this.textTable.childs.length;
			_loc_20 = 0;
			var _loc_26:Number = -1;
			var _loc_27:Number = 0;
			if(_loc_25 < 1)
			{
				var _loc_36:* = this.maxEndEvents - 1;
				this.maxEndEvents = _loc_36;
			}
			else
			{
				_absMatrix[_loc_20] = [];
			}
			_loc_14 = 0;
			while(_loc_14 < _loc_25)
			{
				_loc_30 = this.textTable.childs[_loc_14];
				_loc_20 = this.textField.getLineIndexOfChar(_loc_30.id);
				if(_loc_20 != _loc_26)
				{
					_loc_26 = _loc_20;
					_loc_27 = _absMatrix.push([]);
				}
				_absMatrix[_loc_27 - 1].push(_loc_30);
				_loc_14 = _loc_14 + 1;
			}
			_loc_14 = 0;
			while(_loc_14 < _absMatrix.length)
			{
				if(_absMatrix[_loc_14].length == 0)
				{
					_absMatrix.splice(_loc_14, 1);
					_loc_14 = _loc_14 - 1;
				}
				_loc_14 = _loc_14 + 1;
			}
			this._textOwnerClip.visible = true;
			DisplayObject(this.textTable).visible = true;
			DisplayObject(this._partialTextOwnerClip).visible = true;
			this.textField.visible = false;
			return true;
		}

		protected function filterArray(param1:Array, param2:String, param3:Number, param4:Array) : void
		{
			var _loc_6:uint = 0;
			var _loc_7:Array = null;
			var _loc_8:* = undefined;
			var _loc_9:uint = 0;
			var _loc_10:int = NaN;
			var _loc_11:String = null;
			var _loc_12:Object = null;
			var _loc_13:int = 0;
			var _loc_14:String = null;
			var _loc_15:int = 0;
			var _loc_16:int = 0;
			var _loc_17:RegExp = null;
			var _loc_18:String = null;
			var _loc_19:uint = 0;
			var _loc_20:* = undefined;
			var _loc_5:uint = param1.length;
			if(param2 != "selectedStrings")
			{
				_loc_6 = _loc_5;
				_loc_7 = new Array(_loc_6);
				_loc_8 = 0;
				while(_loc_8 < _loc_6)
				{
					_loc_7[_loc_8] = _loc_8;
					_loc_8 = _loc_8 + 1;
				}
				while((_loc_6 / _loc_6) * 100 > param3)
				{
					_loc_9 = Math.floor(Math.random() * _loc_7.length);
					param1[_loc_7[_loc_9]].passed = false;
					_loc_6 = _loc_6 - 1;
					_loc_7.splice(_loc_9, 1);
				}
			}
			else
			{
				_loc_10 = param4.length;
				_loc_11 = this.textField.text;
				_loc_12 = {};
				_loc_8 = 0;
				while(_loc_8 < _loc_6)
				{
					param1[_loc_8].passed = false;
					_loc_12[param1[_loc_8].id] = _loc_8;
					_loc_8 = _loc_8 + 1;
				}
				_loc_8 = 0;
				while(_loc_8 < _loc_10)
				{
					_loc_13 = 0;
					_loc_14 = param4[_loc_8];
					_loc_15 = _loc_11.indexOf(_loc_14, _loc_13);
					_loc_16 = _loc_14.length;
					_loc_17 = new RegExp(" ", "g");
					_loc_18 = _loc_14.replace(_loc_17, "");
					_loc_19 = _loc_18.length;
					while(_loc_15 != -1)
					{
						_loc_20 = _loc_15;
						while(_loc_20 < (_loc_20 + _loc_16))
						{
							if(_loc_12[_loc_20] != undefined)
							{
								param1[_loc_12[_loc_20]].passed = true;
							}
							_loc_20 = _loc_20 + 1;
						}
						_loc_13 = _loc_20 + _loc_16;
						_loc_20 = _loc_11.indexOf(_loc_14, _loc_13);
					}
					_loc_8 = _loc_8 + 1;
				}
			}
		}

		public function get toggle() : Boolean
		{
			return _toggle;
		}

		public function set swapTargetInstanceName(param1:String) : void
		{
			var scope:DisplayObjectContainer = null;
			var paths:Array = null;
			var targName:String = null;
			var i:* = undefined;
			var newTarget:DisplayObject = null;
			var strPath:String = null;
			var existObj:Object = null;
			var arg:String = param1;
			if(arg != "")
			{
				if(this.parent is DisplayObject)
				{
					scope = this.parent;
					paths = arg.split(".");
					targName = paths.pop();
					try
					{
						i = 0;
						while(i < paths.length)
						{
							scope = scope[paths[i]];
							i = i + 1;
						}
					}
					catch(e:Error)
					{
						trace("FLASHEFF2 ERROR: The swapTargetInstanceName path is invalid.");
						return;
					}
					if(scope != null)
					{
						newTarget = scope.getChildByName(targName);
						if(newTarget == null)
						{
							strPath = getPath(scope);
							existObj = arg.targetPaths[(strPath + ".") + arg];
							if(existObj != null)
							{
								newTarget = existObj.target;
							}
						}
						this.swapTarget = newTarget;
					}
					else
					{
						trace("FLASHEFF2 ERROR: The swapTargetInstanceName path is invalid.");
					}
				}
				this.__swapTargetInstanceName = arg;
			}
			else
			{
				this.swapTarget = null;
			}
		}

		public function set hideAutoPlay(param1:Boolean) : void
		{
			__hideAutoPlay = param1;
			invalidate();
			setDrawTime();
		}

		public function get textField() : TextField
		{
			return this._textField;
		}

		public function removeShowTransition() : void
		{
			if(this.showPattern != null)
			{
				this.showPattern.remove();
				this.showPattern = null;
				this._showTransitionName = "";
			}
		}

		public function removeHideTransition() : void
		{
			if(this.hidePattern != null)
			{
				this.hidePattern.remove();
				this.hidePattern = null;
				this._hideTransitionName = "";
			}
		}

		public function get showTransitionName() : String
		{
			return this._showTransitionName;
		}

		public function set drawAfterFilters(param1:Boolean) : void
		{
			if(param1 != this.drawAfterFilters)
			{
				if(param1 == true)
				{
					buttonTarget = this.aDBT;
					aDBTO.addChild(this.buttonOwner);
				}
				else
				{
					buttonTarget = this.bDBT;
					this.bDBTO.addChild(this.buttonOwner);
				}
				if(this.buttonEffect != null)
				{
					this.buttonEffect.target = this.buttonTarget;
				}
			}
			this._drawAfterFilters = param1;
		}

		public function get swapTargetInstanceName() : String
		{
			return this.__swapTargetInstanceName;
		}

		public function set swapTransitionName(param1:String) : void
		{
			var patternClass:Class = null;
			var arg:String = param1;
			if(arg != "")
			{
				try
				{
					patternClass = getDefinitionByName(arg);
					if(this.swapPattern != null)
					{
						this.swapPattern.remove();
					}
					this.swapPattern = new patternClass(this);
				}
				catch(e:ReferenceError)
				{
					throw "FLASHEFF2 ERROR: The pattern '" + e + "' is missing from library.";
				}
				this._swapTransitionName = arg;
			}
		}

		public function applyButtonEffect() : void
		{
			setButtonEvents();
			this.isButtonEffectApplyed = true;
			this.highestOwner.mouseChildren = false;
		}

		public function get drawAfterFilters() : Boolean
		{
			return this._drawAfterFilters;
		}

		public function get textOwnerClip() : Sprite
		{
			return _textOwnerClip;
		}

		public function get partialTextOwnerClip() : Sprite
		{
			return _partialTextOwnerClip;
		}

		public function set groupName(param1:String) : void
		{
			_groupName = param1;
			addToGroupList(this.target);
		}

		public function buttonRollOut() : void
		{
			rollOutButtonHandler(null, true);
		}
	}
}
package 
{
	import com.jumpeye.flashEff2.buttonEffect.*;
	import com.jumpeye.flashEff2.presets.*;
	import com.jumpeye.transitions.easing.*;

	public class FlashEff2Code extends FlashEff2
	{
		public function FlashEff2Code()
		{
			super();
			initAssets();
		}

		protected function initAssets() : void
		{
			var _loc_1:JFESP1 = null;
			var _loc_2:JFESP2 = null;
			var _loc_3:JFESP3 = null;
			var _loc_4:JFESP4 = null;
			var _loc_5:JFESP5 = null;
			var _loc_6:JFESP6 = null;
			var _loc_7:JFESP7 = null;
			var _loc_8:JFESP8 = null;
			var _loc_9:JFESP9 = null;
			var _loc_10:JFESP10 = null;
			var _loc_11:JFESP11 = null;
			var _loc_12:JFESP12 = null;
			var _loc_13:JFESP13 = null;
			var _loc_14:JFESP14 = null;
			var _loc_15:JFESP15 = null;
			var _loc_16:JFESP16 = null;
			var _loc_17:JFESP17 = null;
			var _loc_18:JFESP18 = null;
			var _loc_19:JFESP19 = null;
			var _loc_20:JFESP20 = null;
			var _loc_21:JFESPM2 = null;
			var _loc_22:JFESPM3 = null;
			var _loc_23:JFESPM4 = null;
			var _loc_24:JFESPM5 = null;
			var _loc_25:JFESPM6 = null;
			var _loc_26:JFESPM7 = null;
			var _loc_27:JFESPM8 = null;
			var _loc_28:JFETP2 = null;
			var _loc_29:JFETP3 = null;
			var _loc_30:JFETP4 = null;
			var _loc_31:JFETP5 = null;
			var _loc_32:JFETP6 = null;
			var _loc_33:JFETP7 = null;
			var _loc_34:JFETP8 = null;
			var _loc_35:JFETP9 = null;
			var _loc_36:JFETP10 = null;
			var _loc_37:JFETP11 = null;
			var _loc_38:JFETP12 = null;
			var _loc_39:JFETP13 = null;
			var _loc_40:JFETP14 = null;
			var _loc_41:JFETP15 = null;
			var _loc_42:JFETP16 = null;
			var _loc_43:JFETP17 = null;
			var _loc_44:JFETP18 = null;
			var _loc_45:JFETP19 = null;
			var _loc_46:JFETP20 = null;
			var _loc_47:JFETP21 = null;
			var _loc_48:JFETP22 = null;
			var _loc_49:JFETP23 = null;
			var _loc_50:JFETP24 = null;
			var _loc_51:JFETP25 = null;
			var _loc_52:JFETP26 = null;
			var _loc_53:JFETP27 = null;
			var _loc_54:JFETP28 = null;
			var _loc_55:JFETP29 = null;
			var _loc_56:JFETP30 = null;
			var _loc_57:JFETP3D2 = null;
			var _loc_58:JFETP3D3 = null;
			var _loc_59:JFETP3D4 = null;
			var _loc_60:JFETP3D5 = null;
			var _loc_61:JFETP3D6 = null;
			var _loc_62:JFETP3D7 = null;
			var _loc_63:JFETP3D8 = null;
			var _loc_64:JFETP3D9 = null;
			var _loc_65:JFETP3D10 = null;
			var _loc_66:JFETP3D11 = null;
			var _loc_67:JFETP3D12 = null;
			var _loc_68:JFETP3D13 = null;
			var _loc_69:JFETP3D14 = null;
			var _loc_70:JFETP3D15 = null;
			var _loc_71:JFETP3D16 = null;
			var _loc_72:JFETP3D17 = null;
			var _loc_73:JFETP3D18 = null;
			var _loc_74:JFETP3D19 = null;
			var _loc_75:Back = null;
			var _loc_76:Bounce = null;
			var _loc_77:Circular = null;
			var _loc_78:Cubic = null;
			var _loc_79:Elastic = null;
			var _loc_80:Exponential = null;
			var _loc_81:Linear = null;
			var _loc_82:Quadratic = null;
			var _loc_83:Quartic = null;
			var _loc_84:Quintic = null;
			var _loc_85:Sine = null;
			var _loc_86:Strong = null;
			var _loc_87:FEBColorMatrixFilterPlugin = new FEBColorMatrixFilterPlugin();
			var _loc_88:FEBCustomTintPlugin = new FEBCustomTintPlugin();
			var _loc_89:FEBFilterPlugins = new FEBFilterPlugins();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class focusRectSkin extends MovieClip
	{
		public function focusRectSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;
	import flash.text.*;

	dynamic public class FTWButton extends Sprite
	{
		public var text:TextField;

		public function FTWButton()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;
	import flash.text.*;

	dynamic public class GreenButton extends Sprite
	{
		public var tText:TextField;

		public function GreenButton()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderRenderer_disabledSkin extends MovieClip
	{
		public function HeaderRenderer_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderRenderer_downSkin extends MovieClip
	{
		public function HeaderRenderer_downSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderRenderer_overSkin extends MovieClip
	{
		public function HeaderRenderer_overSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderRenderer_selectedDisabledSkin extends MovieClip
	{
		public function HeaderRenderer_selectedDisabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderRenderer_selectedDownSkin extends MovieClip
	{
		public function HeaderRenderer_selectedDownSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderRenderer_selectedOverSkin extends MovieClip
	{
		public function HeaderRenderer_selectedOverSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderRenderer_selectedUpSkin extends MovieClip
	{
		public function HeaderRenderer_selectedUpSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderRenderer_upSkin extends MovieClip
	{
		public function HeaderRenderer_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderSortArrow_ascIcon extends MovieClip
	{
		public function HeaderSortArrow_ascIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class HeaderSortArrow_descIcon extends MovieClip
	{
		public function HeaderSortArrow_descIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class List_skin extends MovieClip
	{
		public function List_skin()
		{
			super();
		}
	}
}
package 
{
	import Misc.*;
	import Scene.*;
	import flash.display.*;
	import flash.events.*;

	public class Main extends MovieClip
	{
		public function Main()
		{
			super();
			new g(this);
			addEventListener("connected", connected, true);
			g.scene = new Manager(this);
			g.scene.loader();
			this.stage.addEventListener(Event.ACTIVATE, on_activate);
		}

		private function connected(param1:Event) : void
		{
			removeEventListener("connected", connected, true);
			g.scene.lobby();
		}

		private function on_activate(param1:Event)
		{
			if(g.scene.activeScene == "Lobby")
			{
				BaseChat(g.scene.getScene())._tInput.setFocus();
			}
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class NumericStepperDownArrow_disabledSkin extends MovieClip
	{
		public function NumericStepperDownArrow_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class NumericStepperDownArrow_downSkin extends MovieClip
	{
		public function NumericStepperDownArrow_downSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class NumericStepperDownArrow_overSkin extends MovieClip
	{
		public function NumericStepperDownArrow_overSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class NumericStepperDownArrow_upSkin extends MovieClip
	{
		public function NumericStepperDownArrow_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class NumericStepperUpArrow_disabledSkin extends MovieClip
	{
		public function NumericStepperUpArrow_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class NumericStepperUpArrow_downSkin extends MovieClip
	{
		public function NumericStepperUpArrow_downSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class NumericStepperUpArrow_overSkin extends MovieClip
	{
		public function NumericStepperUpArrow_overSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class NumericStepperUpArrow_upSkin extends MovieClip
	{
		public function NumericStepperUpArrow_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;
	import flash.text.*;

	dynamic public class RedButton extends Sprite
	{
		public var tText:TextField;

		public function RedButton()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollArrowDown_disabledSkin extends MovieClip
	{
		public function ScrollArrowDown_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollArrowDown_downSkin extends MovieClip
	{
		public function ScrollArrowDown_downSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollArrowDown_overSkin extends MovieClip
	{
		public function ScrollArrowDown_overSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollArrowDown_upSkin extends MovieClip
	{
		public function ScrollArrowDown_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollArrowUp_disabledSkin extends MovieClip
	{
		public function ScrollArrowUp_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollArrowUp_downSkin extends MovieClip
	{
		public function ScrollArrowUp_downSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollArrowUp_overSkin extends MovieClip
	{
		public function ScrollArrowUp_overSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollArrowUp_upSkin extends MovieClip
	{
		public function ScrollArrowUp_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollBar_thumbIcon extends MovieClip
	{
		public function ScrollBar_thumbIcon()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollPane_disabledSkin extends MovieClip
	{
		public function ScrollPane_disabledSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollPane_upSkin extends MovieClip
	{
		public function ScrollPane_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollThumb_downSkin extends MovieClip
	{
		public function ScrollThumb_downSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollThumb_overSkin extends MovieClip
	{
		public function ScrollThumb_overSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollThumb_upSkin extends MovieClip
	{
		public function ScrollThumb_upSkin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class ScrollTrack_skin extends MovieClip
	{
		public function ScrollTrack_skin()
		{
			super();
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class StarGames extends BitmapData
	{
		public function StarGames(param1:int = 32, param2:int = 32)
		{
			super(param1, param2);
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class StarRating extends BitmapData
	{
		public function StarRating(param1:int = 32, param2:int = 32)
		{
			super(param1, param2);
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class StarWon extends BitmapData
	{
		public function StarWon(param1:int = 32, param2:int = 32)
		{
			super(param1, param2);
		}
	}
}
package 
{
	import flash.display.*;

	dynamic public class TextArea_disabledSkin extends MovieClip
	{
		public function TextArea_disabledSkin()
		{
			super();
		}
	}
}
package Ad
{
	import flash.display.*;

	dynamic public class Ad extends Sprite
	{
		public function Ad()
		{
			super();
		}
	}
}
package Ad
{
	import flash.display.*;

	dynamic public class IntroAlgebraImage extends Sprite
	{
		public function IntroAlgebraImage()
		{
			super();
		}
	}
}
package Ad
{
	import flash.display.*;

	dynamic public class IntroCountingImage extends Sprite
	{
		public function IntroCountingImage()
		{
			super();
		}
	}
}
package Ad
{
	import flash.display.*;

	dynamic public class Volume1Image extends Sprite
	{
		public function Volume1Image()
		{
			super();
		}
	}
}
package Game
{
	import Game.Countdown.*;
	import Misc.*;
	import flash.events.*;

	public class Countdown extends FTWBase
	{
		private var userlist:Userlist;

		public function Countdown()
		{
			super();
			userlist = new Userlist();
			userlist.x = 520;
			userlist.y = 52;
			addChild(userlist);
			EventManager.add(this, Event.ADDED, on_added);
			EventManager.add(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		private function update_scores(param1:String) : void
		{
			var _loc_2:Array = null;
			var _loc_3:int = 0;
			var _loc_4:Array = null;
			if(param1.length > 0)
			{
				_loc_2 = param1.split("\n");
				_loc_3 = 0;
				while(_loc_3 < _loc_2.length)
				{
					_loc_4 = String(_loc_2[_loc_3]).split("\t");
					userlist.update_score(_loc_4[0], uint(_loc_4[1]));
					_loc_3++;
				}
			}
		}

		override public function on_plugin_message(param1:Object) : void
		{
			var _loc_2:int = 0;
			var _loc_3:Object = null;
			var _loc_4:Array = null;
			var _loc_5:Array = null;
			var _loc_6:Array = null;
			switch(param1.response.Action)
			{
			case "cd_response":
				userlist.response(param1.response.name, param1.response.score, param1.response.answer, param1.response.correct);
				break;
			case "add_player":
				userlist.add_player(param1.response.name, param1.response.points, param1.response.rating);
				break;
			case "add_spectator":
				userlist.add_spectator(param1.response.msg);
				break;
			case "RemoveUser":
				userlist.remove_user(param1.response.msg);
				break;
			case "scores":
				update_scores(param1.response.scores);
				break;
			case "GameUserList":
				if(param1.response.players.length > 0)
				{
					_loc_4 = String(param1.response.players).split("\n");
					_loc_2 = 0;
					while(_loc_2 < _loc_4.length)
					{
						_loc_5 = String(_loc_4[_loc_2]).split("\t");
						_loc_3 = new Object();
						_loc_3.name = _loc_5[0];
						_loc_3.rating = _loc_5[1];
						_loc_3.points = _loc_5[2];
						userlist.add_player(_loc_3.name, Math.round(Number(_loc_3.points)), _loc_3.rating);
						_loc_2++;
					}
				}
				if(param1.response.spectators.length > 0)
				{
					_loc_6 = String(param1.response.spectators).split("\n");
					_loc_2 = 0;
					while(_loc_2 < _loc_6.length)
					{
						userlist.add_spectator(_loc_6[_loc_2]);
						_loc_2++;
					}
				}
				break;
			case "scores":
				update_scores(String(param1.response.scores));
				break;
			default:
				super.on_plugin_message(param1);
				break;
			}
		}

		override protected function begin_problem(param1:uint) : void
		{
			var _loc_2:String = null;
			_loc_2 = "Problem " + param1;
			text_header_left.text = _loc_2;
			userlist.clear_answers();
			panel_problem.show_response_area();
			super.begin_problem(param1);
		}

		override protected function end_problem(param1:uint) : void
		{
			trace("*** CD END PROBLEM");
			super.end_problem(param1);
		}

		override protected function on_got_answer(param1:ProblemAnswerEvent) : void
		{
			panel_problem.hide_response_area();
		}

		override protected function on_added(param1:Event) : void
		{
			if(param1.eventPhase == EventPhase.AT_TARGET)
			{
				super.on_added(param1);
				EventManager.remove(this, Event.ADDED, on_added);
			}
		}

		override protected function on_added_to_stage(param1:Event) : void
		{
			g.server.addEventListener("pluginMessage", "on_plugin_message", this);
			super.on_added_to_stage(param1);
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
		}

		override protected function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			g.server.removeEventListener("pluginMessage", "on_plugin_message", this);
			super.on_removed_from_stage(param1);
		}
	}
}
package Game
{
	import Lobby.*;
	import Misc.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;

	public class FinalScoreboardPanel extends Sprite
	{
		public var scoreboard:DataGrid;
		public var _bLeave:GreenButton;
		public var _bReview:GreenButton;

		public function FinalScoreboardPanel()
		{
			super();
			scoreboard.columns = ["User", "Score", "Response", "Time"];
			scoreboard.setStyle("borderStyle", "none");
			_bLeave.tText.text = "Leave";
			_bReview.tText.text = "Review";
			EventManager.add(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			__setProp_scoreboard_FinalScoreboardPanel_Layer1_0();
		}

		public function board(param1:String) : void
		{
			var _loc_4:Array = null;
			var _loc_5:* = undefined;
			var _loc_2:Array = param1.split("\n");
			var _loc_3:uint = 0;
			while(_loc_3 < _loc_2.length)
			{
				_loc_4 = _loc_2[_loc_3].split("\t");
				if(_loc_4.length > 2)
				{
					_loc_5 = {User:_loc_4[0], Response:response_text(uint(_loc_4[1])), Time:_loc_4[2], Score:Math.round(_loc_4[3])};
					scoreboard.addItem(_loc_5);
				}
				_loc_3 = _loc_3 + 1;
			}
			scoreboard.sortItemsOn("Score", Array.NUMERIC | Array.DESCENDING);
		}

		public function add(param1:String, param2:uint, param3:Number, param4:Number) : void
		{
			var _loc_5:* = {User:param1, Response:response_text(param2), Time:param3, Score:param4};
			scoreboard.addItem(_loc_5);
			scoreboard.sortItemsOn("Score", Array.NUMERIC | Array.DESCENDING);
		}

		private function response_text(param1:uint) : String
		{
			switch(param1)
			{
			case 0:
				return "Incorrect";
			case 1:
				return "Correct";
			case 2:
				return "Give Up";
			case 4:
				return "Time Out";
			default:
				break;
			}
			return "";
		}

		public function show() : void
		{
			scoreboard.removeAll();
			this.visible = true;
		}

		public function hide() : void
		{
			this.visible = false;
		}

		private function on_leave(param1:MouseEvent) : void
		{
			FTWBase(parent).on_leave_game(param1);
		}

		private function on_review(param1:MouseEvent) : void
		{
			FTWBase(parent).addChild(new Review());
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.remove(_bLeave, MouseEvent.CLICK, on_leave);
			EventManager.remove(_bReview, MouseEvent.CLICK, on_review);
		}

		private function on_added_to_stage(param1:Event) : void
		{
			removeEventListener(Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.add(_bLeave, MouseEvent.CLICK, on_leave, "FinalScoreBoardPanel._bLeave.CLICK");
			EventManager.add(_bReview, MouseEvent.CLICK, on_review, "FinalScoreBoardPanel._bReview.CLICK");
		}

		public function __setProp_scoreboard_FinalScoreboardPanel_Layer1_0()
		{
			try
			{
				scoreboard["componentInspectorSetting"] = true;
			}
			catch(e:Error)
			{
			}
			scoreboard.allowMultipleSelection = false;
			scoreboard.editable = false;
			scoreboard.headerHeight = 25;
			scoreboard.horizontalLineScrollSize = 4;
			scoreboard.horizontalPageScrollSize = 0;
			scoreboard.horizontalScrollPolicy = "off";
			scoreboard.resizableColumns = false;
			scoreboard.rowHeight = 20;
			scoreboard.showHeaders = true;
			scoreboard.sortableColumns = true;
			scoreboard.verticalLineScrollSize = 4;
			scoreboard.verticalPageScrollSize = 0;
			scoreboard.verticalScrollPolicy = "auto";
			try
			{
				scoreboard["componentInspectorSetting"] = false;
			}
			catch(e:Error)
			{
			}
		}
	}
}
package Game
{
	import Game.FTW.*;
	import Misc.*;
	import flash.events.*;

	public class FTW extends FTWBase
	{
		private var _userlist:Userlist;

		public function FTW()
		{
			super();
			_userlist = new Userlist();
			_userlist.width = 189;
			_userlist.height = 315;
			_userlist.x = 520;
			_userlist.y = 52;
			addChild(_userlist);
			EventManager.add(this, Event.ADDED, on_added);
			EventManager.add(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		private function update_scores(param1:String) : void
		{
			var _loc_2:Array = null;
			var _loc_3:int = 0;
			var _loc_4:Array = null;
			if(param1.length > 0)
			{
				_loc_2 = param1.split("\n");
				_loc_3 = 0;
				while(_loc_3 < _loc_2.length)
				{
					_loc_4 = String(_loc_2[_loc_3]).split("\t");
					_userlist.updatePlayer(_loc_4[0], Number(_loc_4[1]));
					_loc_3++;
				}
			}
		}

		override public function on_plugin_message(param1:Object) : void
		{
			var _loc_2:int = 0;
			var _loc_3:Object = null;
			var _loc_4:Array = null;
			var _loc_5:Array = null;
			var _loc_6:Array = null;
			var _loc_7:Array = null;
			switch(param1.response.Action)
			{
			case "add_player":
				_userlist.addPlayer(param1.response.name, Number(param1.response.points), Number(param1.response.rating));
				break;
			case "add_spectator":
				_userlist.addSpectator(param1.response.msg);
				break;
			case "RemoveUser":
				_userlist.removeUser(param1.response.msg);
				break;
			case "GameUserList":
				if(param1.response.players.length > 0)
				{
					_loc_4 = String(param1.response.players).split("\n");
					_loc_5 = new Array();
					_loc_2 = 0;
					while(_loc_2 < _loc_4.length)
					{
						_loc_6 = String(_loc_4[_loc_2]).split("\t");
						_loc_3 = new Object();
						_loc_3.name = _loc_6[0];
						_loc_3.rating = _loc_6[1];
						_loc_3.points = _loc_6[2];
						_loc_5.push(_loc_3);
						_loc_2++;
					}
					_userlist.addPlayers(_loc_5);
				}
				if(param1.response.spectators.length > 0)
				{
					_loc_7 = String(param1.response.spectators).split("\n");
					if(_loc_7.length > 0)
					{
						_userlist.addSpectators(_loc_7);
					}
				}
				break;
			case "scores":
				update_scores(String(param1.response.scores));
				break;
			default:
				super.on_plugin_message(param1);
				break;
			}
		}

		override protected function begin_problem(param1:uint) : void
		{
			var _loc_2:String = null;
			_loc_2 = "Problem " + param1;
			_loc_2 = _loc_2 + " of " + g.game.problem_count;
			text_header_left.text = _loc_2;
			super.begin_problem(param1);
		}

		override protected function end_problem(param1:uint) : void
		{
			super.end_problem(param1);
		}

		override protected function on_added(param1:Event) : void
		{
			if(param1.eventPhase == EventPhase.AT_TARGET)
			{
				super.on_added(param1);
				EventManager.remove(this, Event.ADDED, on_added);
			}
		}

		override protected function on_added_to_stage(param1:Event) : void
		{
			g.server.addEventListener("pluginMessage", "on_plugin_message", this);
			super.on_added_to_stage(param1);
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
		}

		override protected function on_removed_from_stage(param1:Event) : void
		{
			g.server.removeEventListener("pluginMessage", "on_plugin_message", this);
			super.on_removed_from_stage(param1);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}
	}
}
package Game
{
	import Misc.*;
	import Scene.*;
	import Type.*;
	import com.electrotank.electroserver4.esobject.*;
	import flash.events.*;
	import flash.text.*;
	import flash.utils.*;

	public class FTWBase extends BaseChat
	{
		public var button_leave:FTWButton;
		public var button_start:FTWButton;
		public var text_game_id:TextField;
		public var text_header_left:TextField;
		public var text_header_right:TextField;
		protected var panel_problem:ProblemPanel;
		protected var panel_spectator:SpectatorPanel;
		protected var panel_timer:TimerPanel;
		protected var panel_information:InformationPanel;
		protected var panel_scoreboard:ScoreboardPanel;
		protected var panel_final_scoreboard:FinalScoreboardPanel;
		private var problem_start_time:uint;
		private var problem_interval:Timer;
		private var problem_time_remaining:uint;
		private var start_enabled:Boolean = false;
		private var leave_button_interval:uint;
		private var responded:Boolean = false;

		public function FTWBase()
		{
			super();
			button_leave.text.text = "Leave";
			button_start.text.text = "Start";
			text_header_left.text = "";
			text_header_right.text = "";
			panel_problem = new ProblemPanel(g.game.playerType == 9);
			panel_problem.x = 10;
			panel_problem.y = 53;
			EventManager.add(panel_problem, ProblemAnswerEvent.ANSWER, got_answer);
			panel_spectator = new SpectatorPanel();
			panel_spectator.x = 10;
			panel_spectator.y = 53;
			panel_timer = new TimerPanel();
			panel_timer.x = 10;
			panel_timer.y = 53;
			panel_information = new InformationPanel();
			panel_information.x = 10;
			panel_information.y = 53;
			panel_scoreboard = new ScoreboardPanel();
			panel_scoreboard.x = 10;
			panel_scoreboard.y = 53;
			panel_final_scoreboard = new FinalScoreboardPanel();
			panel_final_scoreboard.x = 10;
			panel_final_scoreboard.y = 53;
			text_game_id.text = "Game# " + g.game.id;
			problem_interval = null;
		}

		private function hide_panels() : void
		{
			panel_scoreboard.hide();
			panel_information.hide();
			panel_problem.hide();
			panel_timer.hide();
			panel_final_scoreboard.hide();
			panel_spectator.hide();
		}

		private function stop_problem_timer()
		{
			if(problem_interval != null)
			{
				EventManager.remove(problem_interval, "timer", problem_countdown);
				problem_interval.stop();
				problem_interval.reset();
				problem_interval = null;
			}
		}

		public function on_leave_game(param1:MouseEvent) : void
		{
			var _loc_2:String = null;
			EventManager.remove(button_start, MouseEvent.CLICK, on_start_game);
			EventManager.remove(button_leave, MouseEvent.CLICK, on_leave_game);
			EventManager.remove(panel_timer, TimerEvent.TIMER_COMPLETE, on_start_game_timer);
			if(start_enabled)
			{
				EventManager.remove(g.game.problems[1], Event.COMPLETE, enable_start);
				start_enabled = false;
			}
			g.server.removeEventListener("pluginMessage", "on_plugin_message", this);
			stop_problem_timer();
			var _loc_3:int = 0;
			var _loc_4:* = g.game.problems;
			for each(_loc_2 in _loc_4)
			{
				g.game.problems[_loc_2].cleanup();
			}
			g.server.leaveRoom(g.game.zone_name, g.game.room_name);
			g.server.addEventListener("leaveRoom", "on_leave_room_event", this);
		}

		public function on_leave_room_event(param1:Object) : void
		{
			g.server.removeEventListener("leaveRoom", "on_leave_room_event", this);
			g.activeRoomName = "Lobby";
			g.activeZoneName = "FTW";
			g.scene.lobby();
		}

		public function on_start_game(param1:MouseEvent) : void
		{
			var _loc_2:EsObject = null;
			button_start.enabled;
			if(button_start.enabled && start_enabled)
			{
				_loc_2 = new EsObject();
				_loc_2.setInteger("id", g.game.id);
				g.server.esServerPlugin(g.manager, "start_game", _loc_2);
				disable_start();
			}
		}

		protected function on_start_game_timer(param1:TimerEvent) : void
		{
			EventManager.remove(panel_timer, TimerEvent.TIMER_COMPLETE, on_start_game_timer);
			begin_problem(1);
		}

		protected function begin_problem(param1:uint) : void
		{
			if(!(param1 == 1 && g.game.problemNumber == 1))
			{
				g.game.problemNumber = 1;
				hide_panels();
				panel_timer.message = "Game will begin in...";
				panel_timer.show();
				panel_timer.start(3);
				setTimeout(loadProblem, 2000, 1);
				EventManager.add(panel_timer, TimerEvent.TIMER_COMPLETE, on_start_game_timer);
				return;
			}
			if((g.game.problems.length - 1) < param1 || g.game.problems[param1] == undefined)
			{
				panel_information.large = "\n\nPlease wait for next problem.\n\n";
				panel_information.show();
			}
			g.chat.displayChat = false;
			g.game.problemNumber = param1;
			g.game.last_problem_number_displayed = param1;
			stop_problem_timer();
			problem_interval = new Timer(1000, g.game.time_per_problem);
			EventManager.add(problem_interval, "timer", problem_countdown);
			problem_interval.start();
			problem_time_remaining = g.game.time_per_problem;
			text_header_right.text = "Time remaining: " + problem_time_remaining;
			problem_start_time = getTimer();
			hide_panels();
			if(g.game.problems[param1].loaded)
			{
				if(g.game.player_type != FTW.SPECTATOR)
				{
					panel_problem.attach(g.game.problems[param1]);
					panel_problem.show();
				}
				else
				{
					g.scene.debug("Showing Panel Spectator");
					panel_spectator.attach(g.game.problems[param1]);
					panel_spectator.show();
				}
			}
			else
			{
				panel_information.large = "\n\nUnable to load problem.\n\n";
				panel_information.show();
			}
			this.responded = false;
		}

		public function check_answer(param1:String, param2:int) : Boolean
		{
			param1 = g.clean_answer(param1);
			var _loc_3:int = 0;
			while(_loc_3 < g.game.problems[param2].answers.length)
			{
				if(param1 == g.game.problems[param2].answers[_loc_3])
				{
					return true;
				}
				_loc_3++;
			}
			return false;
		}

		private function got_answer(param1:ProblemAnswerEvent) : void
		{
			var _loc_2:int = NaN;
			var _loc_3:EsObject = null;
			if(param1.answer.length > 0 && this.responded == false)
			{
				if(g.chat.checkLanguage(param1.answer))
				{
					param1.answer = "Censored";
				}
				g.chat.displayChat = true;
				this.responded = true;
				g.game.problems[param1.problem_number].user_answer = param1.answer;
				_loc_2 = (Number(getTimer() - problem_start_time)) / 1000;
				if(_loc_2 > g.game.time_per_problem)
				{
					_loc_2 = g.game.time_per_problem;
					stop_problem_timer();
				}
				_loc_3 = new EsObject();
				_loc_3.setInteger("id", g.user.id);
				_loc_3.setInteger("r", check_answer(param1.answer, param1.problem_number) ? 1 : 0);
				_loc_3.setDouble("t", _loc_2);
				_loc_3.setString("answer", param1.answer);
				plugin("response", _loc_3);
				on_got_answer(param1);
				if(!g.user.muted && g.user.gameChat)
				{
					stage.focus = _tInput;
				}
			}
		}

		protected function on_got_answer(param1:ProblemAnswerEvent) : void
		{
		}

		public function loadProblem(param1:Number) : void
		{
			if(g.game.problems[param1] === undefined || !g.game.problems[param1].loaded)
			{
				g.game.problems[param1] = new Problem(param1);
			}
		}

		protected function end_problem(param1:uint) : void
		{
			if(g.game.last_problem_number_displayed < g.game.problem_count)
			{
				setTimeout(loadProblem, 5000, g.game.last_problem_number_displayed + 1);
			}
			g.chat.displayChat = true;
			if(panel_scoreboard.visible == false)
			{
				hide_panels();
				panel_scoreboard.show();
			}
			stop_problem_timer();
			this.text_header_right.text = "";
			panel_scoreboard.countdown(param1);
		}

		protected function end_game(param1:String) : void
		{
			g.chat.displayChat = true;
			stop_problem_timer();
			hide_panels();
			panel_final_scoreboard.show();
			panel_final_scoreboard.board(param1);
			text_header_right.text = "";
			g.game.ended = true;
		}

		private function timeout()
		{
			var _loc_1:EsObject = null;
			if(this.responded == false)
			{
				this.responded = true;
				_loc_1 = new EsObject();
				_loc_1.setInteger("id", g.user.id);
				_loc_1.setInteger("r", 4);
				_loc_1.setDouble("t", g.game.time_per_problem);
				_loc_1.setString("answer", "time");
				plugin("response", _loc_1);
			}
		}

		private function problem_countdown(param1:TimerEvent) : void
		{
			var _loc_3:* = this.problem_time_remaining - 1;
			this.problem_time_remaining = _loc_3;
			if(problem_time_remaining > 0)
			{
				this.text_header_right.text = "Time remaining: " + problem_time_remaining;
			}
			else
			{
				timeout();
				this.text_header_right.text = "Time's up";
				stop_problem_timer();
			}
		}

		public function enable_start(param1:Event) : void
		{
			start_enabled = true;
			button_start.visible = true;
			button_start.alpha = 1;
			button_start.enabled = true;
			EventManager.add(button_start, MouseEvent.CLICK, on_start_game, "FTWBase.button_start");
			panel_information.large = "\n\nClick the Start button\nto begin game.";
		}

		public function disable_start() : void
		{
			button_start.alpha = 0.40;
			button_start.enabled = false;
			EventManager.remove(button_start, MouseEvent.CLICK, on_start_game);
			start_enabled = false;
		}

		public function on_leave_button_interval() : void
		{
			button_leave.alpha = 1;
			EventManager.add(button_leave, MouseEvent.CLICK, on_leave_game, "FTWBase.button_leave");
			clearInterval(leave_button_interval);
		}

		override public function on_plugin_message(param1:Object) : void
		{
			var _loc_2:EsObject = null;
			switch(param1.response.Action)
			{
			case "problem_number":
				if(param1.response.number > 1 && panel_information.visible == true)
				{
					panel_information.large = "\n\nPlease wait for next problem to start...";
				}
				if(param1.response.number > 1)
				{
					loadProblem(param1.response.number + 1);
				}
				g.game.can_start_game;
				if(g.game.can_start_game && param1.response.number == 0)
				{
					enable_start(null);
				}
				else
				{
					disable_start();
				}
				break;
			case "end_problem":
				disable_start();
				end_problem(param1.response.interval);
				break;
			case "end_game":
				disable_start();
				end_game(param1.response.scoreboard);
				break;
			case "scoreboard":
				hide_panels();
				panel_scoreboard.show();
				panel_scoreboard.board(param1.response.scoreboard);
				break;
			case "scoreboard_update":
				panel_scoreboard.add(param1.response.user, uint(param1.response.resp), Number(param1.response.time));
				break;
			case "ready":
				if(g.game.problems.length > 0)
				{
					if(g.game.problems[param1.response.problem] != undefined)
					{
						if(g.game.problems[param1.response.problem] is Problem)
						{
							if(g.game.problems[param1.response.problem].loaded)
							{
								_loc_2 = new EsObject();
								_loc_2.setInteger("n", param1.response.problem);
								_loc_2.setInteger("id", g.user.id);
								plugin("ready", _loc_2);
							}
						}
						else
						{
							server_log("on_ready: g.game.problems[" + param1.response.problem + "] is not of type Problem. Attempting reload");
							loadProblem(param1.response.problem);
						}
					}
					else
					{
						server_log("on_ready: g.game.problems[" + param1.response.problem + "] is undefined. Trying to reload problem.");
						loadProblem(param1.response.problem);
					}
				}
				else
				{
					server_log("on_ready: g.game.problems.length <= 0. Trying to reload problem.");
					loadProblem(param1.response.problem);
				}
				break;
			case "go":
				if(g.game.problems.length > 0)
				{
					if(g.game.problems[param1.response.problem] != undefined)
					{
						if(g.game.problems[param1.response.problem] is Problem && g.game.problems[param1.response.problem].loaded)
						{
							begin_problem(param1.response.problem);
						}
					}
				}
				break;
			case "GMLeft":
				enable_start(null);
				panel_information.large = "\n\nGame creator left\n\nYou now can start the game.";
				break;
			case "player_type":
				if(param1.response.type == "spectator")
				{
					g.game.player_type = FTW.SPECTATOR;
				}
				else
				{
					g.game.player_type = FTW.PLAYER;
				}
				break;
			case "load_problem":
				if(param1.response.problem > 1)
				{
					loadProblem(param1.response.problem);
				}
				break;
			default:
				super.on_plugin_message(param1);
				break;
			}
		}

		override protected function on_added(param1:Event) : void
		{
			super.on_added(param1);
		}

		override protected function on_added_to_stage(param1:Event) : void
		{
			super.on_added_to_stage(param1);
			panel_problem.hide();
			addChild(panel_problem);
			panel_spectator.hide();
			addChild(panel_spectator);
			panel_information.show();
			addChild(panel_information);
			panel_timer.hide();
			addChild(panel_timer);
			panel_scoreboard.hide();
			addChild(panel_scoreboard);
			panel_final_scoreboard.hide();
			addChild(panel_final_scoreboard);
			var _loc_2:EsObject = new EsObject();
			_loc_2.setInteger("user_id", g.user.id);
			_loc_2.setInteger("game_id", g.game.id);
			_loc_2.setString("user_ip", g.user.ip);
			_loc_2.setString("rating", String(g.user.current_rating));
			_loc_2.setInteger("player_type", g.game.player_type);
			_loc_2.setString("version", g.version);
			g.server.esServerPlugin(g.manager, "enter_game", _loc_2);
			button_leave.alpha = 0.50;
			leave_button_interval = setInterval(on_leave_button_interval, 1000);
			if(g.game.can_start_game)
			{
				button_start.visible = true;
				button_start.alpha = 0.50;
				panel_information.large = "\n\nPreparing game...";
			}
			else
			{
				button_start.visible = false;
				panel_information.large = "\n\nPlease wait for game to begin...";
			}
			button_start.enabled = false;
		}

		override protected function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(panel_problem, ProblemAnswerEvent.ANSWER, got_answer);
			super.on_removed_from_stage(param1);
		}

		override protected function on_removed(param1:Event) : void
		{
			EventManager.remove(panel_problem, ProblemAnswerEvent.ANSWER, got_answer);
			super.on_removed(param1);
		}

		public function plugin(param1:String, param2:EsObject = null) : void
		{
			g.server.esRoomPlugin("Game", g.game.zone_name, g.game.room_name, param1, param2);
		}

		public function server_log(param1:String) : void
		{
			var _loc_2:EsObject = new EsObject();
			_loc_2.setString("message", param1);
			plugin("log", _loc_2);
		}
	}
}
package Game
{
	import flash.display.*;
	import flash.text.*;

	public class InformationPanel extends Sprite
	{
		public var _t_large:TextField;
		public var _t_small:TextField;

		public function InformationPanel()
		{
			super();
		}

		public function Information()
		{
		}

		public function set small(param1:String) : void
		{
			_t_small.text = param1;
		}

		public function set large(param1:String) : void
		{
			_t_large.text = param1;
		}

		public function show()
		{
			this.visible = true;
		}

		public function hide()
		{
			this.large = "";
			this.small = "";
			this.visible = false;
		}
	}
}
package Game
{
	import Misc.*;
	import com.electrotank.electroserver4.esobject.*;
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;
	import flash.utils.*;

	public class Problem extends EventDispatcher
	{
		public var number:uint = 0;
		public var id:uint = 0;
		public var filename:String = "";
		public var answer:String = "";
		public var real_answer:String = "";
		public var answers:Array;
		public var user_answer:String = "";
		public var book:uint = -28;
		public var image:Loader = null;
		public var loaded:Boolean = false;
		public var error:String = "";
		public var reported:Boolean = false;
		public var loadInterval:uint = 0;
		public var loadCount:uint = 0;

		public function Problem(param1:uint)
		{
			super();
			this.number = param1;
			g.server.addEventListener("pluginMessage", "on_plugin_message", this);
			this.answers = new Array();
			loadCount = 0;
			poll();
		}

		override public function toString() : String
		{
			var _loc_1:String = null;
			_loc_1 = "Problem Number: " + number + "\n" + "Problem ID: " + id + "\n" + "Filename: " + filename + "\n" + "Answer: " + answer + "\n" + "User Answer: " + user_answer + "\n" + "Book: " + book + "\n" + "Loaded: " + loaded + "\n" + "Error: " + error + "\n" + "Reported: " + reported + "\n" + "Load Interval: " + loadInterval + "\n" + "Load Count: " + loadCount;
			return _loc_1;
		}

		public function load_image() : void
		{
			if(loadInterval != 0)
			{
				clearInterval(loadInterval);
				loadInterval = 0;
			}
			var _loc_1:URLRequest = new URLRequest(filename);
			image = new Loader();
			image.load(_loc_1);
			EventManager.add(image.contentLoaderInfo, Event.COMPLETE, setloaded);
			EventManager.add(image.contentLoaderInfo, IOErrorEvent.IO_ERROR, seterror);
			g.debug;
			if(g.debug && 1 == 0)
			{
				EventManager.add(image.contentLoaderInfo, HTTPStatusEvent.HTTP_STATUS, http_status_handler);
				EventManager.add(image.contentLoaderInfo, Event.INIT, init_handler);
				EventManager.add(image.contentLoaderInfo, Event.OPEN, open_handler);
				EventManager.add(image.contentLoaderInfo, Event.UNLOAD, unload_handler);
				EventManager.add(image.contentLoaderInfo, ProgressEvent.PROGRESS, progress_handler);
			}
		}

		public function on_plugin_message(param1:Object) : void
		{
			var _loc_2:int = 0;
			var _loc_3:Array = null;
			var _loc_4:int = 0;
			switch(param1.response.Action)
			{
			case "Problem":
				if(param1.response.number != this.number)
				{
					return;
				}
				if(param1.response.file.length > 10)
				{
					g.server.removeEventListener("pluginMessage", "on_plugin_message", this);
					if(!g.user.s3)
					{
						_loc_2 = 0;
						_loc_2 = this.filename.lastIndexOf("/");
						param1.response.file = "http://www.artofproblemsolving.com/Forum/latexrender/pictures/";
						param1.response.file = param1.response.file + (this.filename.charAt(_loc_2 + 1)) + "/";
						param1.response.file = param1.response.file + (this.filename.charAt(_loc_2 + 2)) + "/";
						param1.response.file = param1.response.file + (this.filename.charAt(_loc_2 + 3)) + "/";
						param1.response.file = param1.response.file + (this.filename.substr(_loc_2 + 1));
					}
					this.id = param1.response.id;
					this.book = param1.response.book;
					this.answer = g.clean_answer(param1.response.answer);
					this.real_answer = param1.response.answer;
					this.filename = param1.response.file;
					load_image();
					this.answers = new Array();
					this.answers.push(this.answer);
					if(param1.response.alt_answers.length > 0)
					{
						_loc_3 = String(param1.response.alt_answers).split("\n");
						if(_loc_3.length > 0)
						{
							_loc_4 = _loc_3.length - 1;
							while(_loc_4 >= 0)
							{
								this.answers.push(g.clean_answer(_loc_3[_loc_4]));
								_loc_4 = _loc_4 - 1;
							}
						}
					}
				}
				else
				{
					if(loadInterval > 0)
					{
						clearInterval(loadInterval);
					}
					g.scene.debug("on-plugin_message: Setting interval");
					loadInterval = setInterval(poll, 1000);
				}
				break;
			default:
				break;
			}
		}

		private function poll() : void
		{
			var _loc_1:EsObject = null;
			if(loadInterval > 0)
			{
				clearInterval(loadInterval);
				loadInterval = 0;
			}
			if(g.server.isConnected)
			{
				_loc_1 = new EsObject();
				_loc_1.setInteger("n", this.number);
				g.server.esRoomPlugin("Game", g.game.zone_name, g.game.room_name, "Problem", _loc_1);
			}
		}

		private function setloaded(param1:Event) : void
		{
			remove_load_event_listeners();
			this.loaded = true;
			dispatchEvent(new Event(Event.COMPLETE));
		}

		private function seterror(param1:IOErrorEvent) : void
		{
			var _loc_2:EsObject = new EsObject();
			_loc_2.setString("message", "I/O Error loading " + number + " " + filename + " " + param1.text);
			g.server.esRoomPlugin("Game", g.game.zone_name, g.game.room_name, "log", _loc_2);
			remove_load_event_listeners();
			var _loc_4:* = this.loadCount + 1;
			this.loadCount = _loc_4;
			if(loadCount >= 3)
			{
				this.error = param1.text;
			}
			else
			{
				loadInterval = setInterval(load_image, 3000);
				var _loc_4:* = this.loadCount + 1;
				this.loadCount = _loc_4;
			}
		}

		private function remove_load_event_listeners() : void
		{
			if(image)
			{
				EventManager.remove(image.contentLoaderInfo, Event.COMPLETE, setloaded);
				EventManager.remove(image.contentLoaderInfo, IOErrorEvent.IO_ERROR, seterror);
				g.debug;
				if(g.debug && 1 == 0)
				{
					EventManager.remove(image.contentLoaderInfo, HTTPStatusEvent.HTTP_STATUS, http_status_handler);
					EventManager.remove(image.contentLoaderInfo, Event.INIT, init_handler);
					EventManager.remove(image.contentLoaderInfo, Event.OPEN, open_handler);
					EventManager.remove(image.contentLoaderInfo, Event.UNLOAD, unload_handler);
					EventManager.remove(image.contentLoaderInfo, ProgressEvent.PROGRESS, progress_handler);
				}
			}
		}

		public function cleanup()
		{
			g.server.removeEventListener("pluginMessage", "on_plugin_message", this);
			remove_load_event_listeners();
			if(loadInterval > 0)
			{
				clearInterval(loadInterval);
				loadInterval = 0;
			}
		}

		private function http_status_handler(param1:HTTPStatusEvent) : void
		{
			g.debuglog("HTTPStatusEvent.HTTP_Status: " + param1.status);
		}

		private function init_handler(param1:Event) : void
		{
			g.debuglog("Event.INIT: " + param1);
		}

		private function open_handler(param1:Event) : void
		{
			g.debuglog("Event.OPEN: " + param1);
		}

		private function unload_handler(param1:Event) : void
		{
			g.debuglog("Event.UNLOAD: " + param1);
		}

		private function progress_handler(param1:ProgressEvent) : void
		{
			g.debuglog("ProgressEvent.PROGRESS: " + param1);
		}
	}
}
package Game
{
	import flash.events.*;

	public class ProblemAnswerEvent extends Event
	{
		public static const ANSWER:String = "answer";
		public var answer:String;
		public var problem_number:uint;

		public function ProblemAnswerEvent(param1:uint, param2:String, param3:Boolean = false, param4:Boolean = false) : void
		{
			super(ANSWER);
			this.answer = param2;
			this.problem_number = param1;
		}

		override public function toString() : String
		{
			return "Problem Number: " + this.problem_number + " Answer: " + answer + " Event: " + super.toString();
		}

		override public function clone() : Event
		{
			return new ProblemAnswerEvent(this.problem_number, this.answer, this.bubbles, this.cancelable);
		}
	}
}
package Game
{
	import Misc.*;
	import fl.containers.*;
	import flash.display.*;
	import flash.events.*;

	public class ProblemPanel extends Sprite
	{
		public var _sp_problem:ScrollPane;
		public var input:ProblemPanel_Input;
		private var problem_number:uint;

		public function ProblemPanel(param1:Boolean = false)
		{
			super();
			EventManager.add(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			spectator(param1);
			__setProp__sp_problem_ProblemPanel_Layer1_0();
		}

		public function spectator(param1:Boolean = true)
		{
			if(param1)
			{
				input.visible = false;
				_sp_problem.height = 285;
			}
			else
			{
				input.create_listeners();
				EventManager.add(input, ProblemAnswerEvent.ANSWER, on_answer);
				input.visible = true;
				_sp_problem.height = 265;
			}
		}

		public function attach(param1:Problem) : void
		{
			problem_number = param1.number;
			clear();
			var _loc_2:Sprite = new Sprite();
			_loc_2.graphics.beginFill(16777215);
			_loc_2.graphics.drawRect(0, 0, param1.image.width + 10, param1.image.height + 10);
			_loc_2.visible = false;
			param1.image.x = 5;
			param1.image.y = 5;
			var _loc_3:Sprite = Sprite(_sp_problem.content);
			_loc_3.addChild(_loc_2);
			_loc_3.addChild(param1.image);
			_sp_problem.update();
		}

		public function clear() : void
		{
			while(Sprite(_sp_problem.content).numChildren)
			{
				Sprite(_sp_problem.content).removeChildAt(0);
			}
		}

		public function show() : void
		{
			this.visible = true;
			input.visible = true;
			input.problem_number = problem_number;
			input.reset();
		}

		public function hide() : void
		{
			this.visible = false;
		}

		public function show_response_area() : void
		{
			input.visible = true;
		}

		public function hide_response_area() : void
		{
			input.visible = false;
		}

		private function on_answer(param1:ProblemAnswerEvent) : void
		{
			dispatchEvent(param1);
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(input, ProblemAnswerEvent.ANSWER, on_answer);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			input.remove_listeners();
		}

		private function on_added_to_stage(param1:Event) : void
		{
			if(param1.currentTarget == this)
			{
				EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			}
		}

		public function __setProp__sp_problem_ProblemPanel_Layer1_0()
		{
			try
			{
				_sp_problem["componentInspectorSetting"] = true;
			}
			catch(e:Error)
			{
			}
			_sp_problem.enabled = true;
			_sp_problem.horizontalLineScrollSize = 4;
			_sp_problem.horizontalPageScrollSize = 0;
			_sp_problem.horizontalScrollPolicy = "auto";
			_sp_problem.scrollDrag = false;
			_sp_problem.source = "EmptyClip";
			_sp_problem.verticalLineScrollSize = 4;
			_sp_problem.verticalPageScrollSize = 0;
			_sp_problem.verticalScrollPolicy = "auto";
			_sp_problem.visible = true;
			try
			{
				_sp_problem["componentInspectorSetting"] = false;
			}
			catch(e:Error)
			{
			}
		}
	}
}
package Game
{
	import Misc.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import flash.ui.*;

	public class ProblemPanel_Input extends Sprite
	{
		public var answer:TextField;
		public var problem_number:uint;

		public function ProblemPanel_Input()
		{
			super();
			answer.maxChars = 12;
		}

		public function reset() : void
		{
			if(answer)
			{
				stage.focus = answer;
				answer.text = "";
				answer.visible = true;
				answer.setSelection(0, 0);
			}
		}

		public function create_listeners() : void
		{
			EventManager.add(answer, KeyboardEvent.KEY_DOWN, this.on_key_down);
		}

		public function remove_listeners() : void
		{
			EventManager.remove(answer, KeyboardEvent.KEY_DOWN, on_key_down);
		}

		private function on_key_down(param1:KeyboardEvent) : void
		{
			if(param1.charCode == Keyboard.ENTER)
			{
				if(answer.text.length > 0 && answer.text.length <= 12)
				{
					dispatchEvent(new ProblemAnswerEvent(problem_number, answer.text));
					answer.text = "";
				}
			}
		}
	}
}
package Game
{
	import Ad.*;
	import Misc.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import flash.utils.*;

	public class ScoreboardPanel extends Sprite
	{
		public var scoreboard:DataGrid;
		public var next_problem:TextField;
		public var seconds:uint;
		public var countdown_interval:uint;
		public var ad:Ad;

		public function ScoreboardPanel()
		{
			super();
			__setProp_scoreboard_ScoreboardPanel_Layer1_0();
		}

		public function EndProblemPanel()
		{
			scoreboard.columns = ["Time", "Response", "User"];
			scoreboard.setStyle("borderStyle", "none");
			scoreboard.sortItemsOn("Time");
			countdown_interval = 0;
		}

		public function countdown(param1:uint) : void
		{
			this.seconds = param1;
			if(countdown_interval == 0)
			{
				countdown_interval = setInterval(update_countdown, 1000);
				next_problem.text = "Next problem in " + param1;
			}
		}

		private function update_countdown() : void
		{
			var _loc_2:* = this.seconds - 1;
			this.seconds = _loc_2;
			if(seconds > 0)
			{
				next_problem.text = "Next problem in " + seconds;
			}
			else
			{
				next_problem.text = "";
				clearInterval(countdown_interval);
				countdown_interval = 0;
			}
		}

		public function board(param1:String) : void
		{
			var _loc_4:Array = null;
			var _loc_5:* = undefined;
			var _loc_2:Array = param1.split("\n");
			var _loc_3:uint = 0;
			while(_loc_3 < _loc_2.length)
			{
				_loc_4 = _loc_2[_loc_3].split("\t");
				if(_loc_4.length > 2)
				{
					_loc_5 = {User:_loc_4[0], Response:response_text(uint(_loc_4[1])), Time:Number(_loc_4[2]).toFixed(3)};
					scoreboard.addItem(_loc_5);
				}
				_loc_3 = _loc_3 + 1;
			}
		}

		public function add(param1:String, param2:uint, param3:Number) : void
		{
			var _loc_4:* = {User:param1, Response:response_text(param2), Time:param3.toFixed(3)};
			scoreboard.addItem(_loc_4);
		}

		private function response_text(param1:uint) : String
		{
			switch(param1)
			{
			case 0:
				return "Incorrect";
			case 1:
				return "Correct";
			case 2:
				return "Give Up";
			case 4:
				return "Time Out";
			default:
				break;
			}
			return "";
		}

		public function show() : void
		{
			try
			{
				if(g.game.problemNumber > 0)
				{
					if(g.game.problems[g.game.problemNumber] == undefined)
					{
						ad.book = 100;
					}
					else
					{
						if(g.game.problems[g.game.problemNumber] == null)
						{
							ad.book = 100;
						}
						else
						{
							ad.book = 100;
							ad.book = g.game.problems[g.game.problemNumber].book;
						}
					}
				}
				else
				{
					ad.book = 100;
				}
				scoreboard.removeAll();
				this.visible = true;
			}
			catch(e:*)
			{
				g.server.log("Exception: " + e.toString());
			}
		}

		public function hide() : void
		{
			if(countdown_interval != 0)
			{
				clearInterval(countdown_interval);
				countdown_interval = 0;
			}
			next_problem.text = "";
			this.visible = false;
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		private function on_added_to_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
		}

		public function __setProp_scoreboard_ScoreboardPanel_Layer1_0()
		{
			try
			{
				scoreboard["componentInspectorSetting"] = true;
			}
			catch(e:Error)
			{
			}
			scoreboard.allowMultipleSelection = false;
			scoreboard.editable = false;
			scoreboard.headerHeight = 25;
			scoreboard.horizontalLineScrollSize = 4;
			scoreboard.horizontalPageScrollSize = 0;
			scoreboard.horizontalScrollPolicy = "off";
			scoreboard.resizableColumns = false;
			scoreboard.rowHeight = 20;
			scoreboard.showHeaders = true;
			scoreboard.sortableColumns = true;
			scoreboard.verticalLineScrollSize = 4;
			scoreboard.verticalPageScrollSize = 0;
			scoreboard.verticalScrollPolicy = "auto";
			try
			{
				scoreboard["componentInspectorSetting"] = false;
			}
			catch(e:Error)
			{
			}
		}
	}
}
package Game
{
	public class ScoringType extends Object
	{
		public static var RANK:uint = 1;
		public static var TIME:uint = 2;
		public static var CORRECT:uint = 3;
		public static var COMPOSITE:uint = 4;
		public static var COUNTDOWN:uint = 5;

		final public static function toString(param1:uint) : String
		{
			if(param1 == ScoringType.RANK)
			{
				return "Ranking";
			}
			if(param1 == ScoringType.TIME)
			{
				return "Time";
			}
			if(param1 == ScoringType.CORRECT)
			{
				return "Responses";
			}
			if(param1 == ScoringType.COMPOSITE)
			{
				return "Composite";
			}
			if(param1 == ScoringType.COUNTDOWN)
			{
				return "Countdown";
			}
			return "Unknown";
		}

		public function ScoringType()
		{
			super();
		}
	}
}
package Game
{
	import fl.containers.*;
	import flash.display.*;

	public class SpectatorPanel extends Sprite
	{
		public var _sp_problem:ScrollPane;
		private var problem_number:uint;

		public function SpectatorPanel(param1:Boolean = false)
		{
			super();
			__setProp__sp_problem_SpectatorPanel_Layer1_0();
		}

		public function attach(param1:Problem) : void
		{
			problem_number = param1.number;
			clear();
			var _loc_2:Sprite = new Sprite();
			_loc_2.graphics.beginFill(16777215);
			_loc_2.graphics.drawRect(0, 0, param1.image.width + 10, param1.image.height + 10);
			_loc_2.visible = false;
			param1.image.x = 5;
			param1.image.y = 5;
			var _loc_3:Sprite = Sprite(_sp_problem.content);
			_loc_3.addChild(_loc_2);
			_loc_3.addChild(param1.image);
			_sp_problem.update();
		}

		public function clear() : void
		{
			while(Sprite(_sp_problem.content).numChildren)
			{
				Sprite(_sp_problem.content).removeChildAt(0);
			}
		}

		public function show() : void
		{
			this.visible = true;
		}

		public function hide() : void
		{
			this.visible = false;
		}

		public function __setProp__sp_problem_SpectatorPanel_Layer1_0()
		{
			try
			{
				_sp_problem["componentInspectorSetting"] = true;
			}
			catch(e:Error)
			{
			}
			_sp_problem.enabled = true;
			_sp_problem.horizontalLineScrollSize = 4;
			_sp_problem.horizontalPageScrollSize = 0;
			_sp_problem.horizontalScrollPolicy = "auto";
			_sp_problem.scrollDrag = false;
			_sp_problem.source = "EmptyClip";
			_sp_problem.verticalLineScrollSize = 4;
			_sp_problem.verticalPageScrollSize = 0;
			_sp_problem.verticalScrollPolicy = "auto";
			_sp_problem.visible = true;
			try
			{
				_sp_problem["componentInspectorSetting"] = false;
			}
			catch(e:Error)
			{
			}
		}
	}
}
package Game
{
	import Misc.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import flash.utils.*;

	public class TimerPanel extends Sprite
	{
		public var _message:TextField;
		public var _time:TextField;
		private var _seconds:uint;
		private var _start_time:uint;

		public function TimerPanel()
		{
			super();
		}

		public function Timer()
		{
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		public function start(param1:uint = 0) : void
		{
			if(param1 > 0)
			{
				this._seconds = param1;
				this._start_time = getTimer();
			}
			EventManager.add(this, Event.ENTER_FRAME, update_time);
		}

		public function stop() : void
		{
			remove_events();
		}

		public function update_time(param1:Event)
		{
			var _loc_3:TimerEvent = null;
			var _loc_2:int = this._seconds - (int((getTimer() - this._start_time) / 1000));
			_time.text = String(_loc_2);
			if(_loc_2 <= 0)
			{
				remove_events();
				_loc_3 = new TimerEvent(TimerEvent.TIMER_COMPLETE);
				dispatchEvent(_loc_3);
			}
		}

		public function set message(param1:String) : void
		{
			_message.text = param1;
		}

		public function show()
		{
			this.visible = true;
		}

		public function hide()
		{
			this.visible = false;
			remove_events();
		}

		public function remove_events()
		{
			EventManager.remove(this, Event.ENTER_FRAME, update_time);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		public function on_removed_from_stage()
		{
			remove_events();
		}
	}
}
package Game.Countdown
{
	import flash.display.*;
	import flash.text.*;

	public class Player extends Sprite
	{
		private var _score:uint;
		private var _username:String;
		private var _answer:String;
		public var active:Boolean;
		private var username_text:TextField;
		private var score_text:TextField;
		private var answer_text:TextField;

		public function Player(param1:String)
		{
			super();
			username_text = new TextField();
			score_text = new TextField();
			answer_text = new TextField();
			var _loc_2:TextFormat = new TextFormat();
			_loc_2.font = "_sans";
			_loc_2.size = 48;
			_loc_2.bold = true;
			_loc_2.align = "center";
			score_text.width = 180;
			score_text.defaultTextFormat = _loc_2;
			var _loc_3:TextFormat = new TextFormat();
			_loc_3.font = "_sans";
			_loc_3.size = 13;
			_loc_3.align = "center";
			username_text.height = 25;
			username_text.width = 180;
			username_text.y = 50;
			username_text.defaultTextFormat = _loc_3;
			answer_text.height = 25;
			answer_text.width = 180;
			answer_text.y = 68;
			answer_text.defaultTextFormat = _loc_3;
			this.score = 0;
			this.username = param1;
			this.answer = "";
			this.active = true;
			addChild(answer_text);
			addChild(score_text);
			addChild(username_text);
		}

		public function get score() : uint
		{
			return this._score;
		}

		public function set score(param1:uint) : void
		{
			this._score = param1;
			this.score_text.text = String(param1);
		}

		public function get username() : String
		{
			return this._username;
		}

		public function set username(param1:String) : void
		{
			this._username = param1;
			this.username_text.text = param1;
		}

		public function get answer() : String
		{
			return this._answer;
		}

		public function set answer(param1:String) : void
		{
			this._answer = param1;
			this.answer_text.text = param1;
		}

		public function reset() : void
		{
			this.answer = "";
		}
	}
}
package Game.Countdown
{
	import flash.display.*;

	public class Userlist extends Sprite
	{
		private var players:Array;
		private var spectators:Array;
		private var number_of_players:uint = 0;

		public function Userlist()
		{
			super();
			players = new Array(4);
			spectators = new Array();
			var _loc_1:uint = 0;
			while(_loc_1 < 4)
			{
				players[_loc_1] = null;
				_loc_1 = _loc_1 + 1;
			}
			this.graphics.beginFill(15663086);
			this.graphics.drawRect(0, 0, 189, 316);
			this.graphics.endFill();
		}

		public function update_score(param1:String, param2:uint) : void
		{
			var _loc_3:Player = find_player_by_name(param1);
			if(_loc_3 != null)
			{
				_loc_3.score = param2;
			}
		}

		public function response(param1:String, param2:String, param3:String, param4:String) : void
		{
			trace((param1 + " ") + param3 + " " + param4);
			var _loc_5:Player = find_player_by_name(param1);
			if(_loc_5 != null)
			{
				if(param4 == "true")
				{
					_loc_5.answer = "Correct " + param3;
				}
				else
				{
					_loc_5.answer = "Incorrect " + param3;
				}
				_loc_5.score = uint(param2);
			}
		}

		public function clear_answers()
		{
			var _loc_1:uint = 0;
			while(_loc_1 < players.length)
			{
				if(players[_loc_1] != null)
				{
					players[_loc_1].answer = "";
				}
				_loc_1 = _loc_1 + 1;
			}
		}

		public function add_player(param1:String, param2:uint, param3:String) : Boolean
		{
			var _loc_5:uint = 0;
			var _loc_4:Player = find_player_by_name(param1);
			if(_loc_4 == null)
			{
				if(number_of_players > 4)
				{
					return false;
				}
				_loc_4 = new Player(param1);
				_loc_4.score = param2;
				_loc_5 = 0;
				while(_loc_5 < players.length)
				{
					if(players[_loc_5] == null)
					{
						players[_loc_5] = _loc_4;
						var _loc_7:* = this.number_of_players + 1;
						this.number_of_players = _loc_7;
						break;
					}
					_loc_5 = _loc_5 + 1;
				}
			}
			else
			{
				if(_loc_4.active == false)
				{
					_loc_4.active = true;
					var _loc_7:* = this.number_of_players + 1;
					this.number_of_players = _loc_7;
				}
			}
			repaint();
			return true;
		}

		public function add_spectator(param1:String) : Boolean
		{
			var _loc_2:uint = 0;
			while(_loc_2 < spectators.length)
			{
				if(spectators[_loc_2] == param1)
				{
					return false;
				}
				_loc_2 = _loc_2 + 1;
			}
			spectators.push(param1);
			repaint();
			return true;
		}

		public function remove_player(param1:String) : Boolean
		{
			var _loc_2:Player = find_player_by_name(param1);
			if(_loc_2 != null)
			{
				var _loc_4:* = this.number_of_players - 1;
				this.number_of_players = _loc_4;
				_loc_2.active = false;
				repaint();
				return true;
			}
			return false;
		}

		public function remove_spectator(param1:String) : void
		{
			var _loc_2:uint = 0;
			while(_loc_2 < spectators.length)
			{
				if(spectators[_loc_2] == param1)
				{
					spectators.splice(_loc_2, 1);
					repaint();
					break;
				}
				_loc_2 = _loc_2 + 1;
			}
		}

		public function remove_user(param1:String) : void
		{
			if(!remove_player(param1))
			{
				remove_spectator(param1);
			}
		}

		public function find_player_by_name(param1:String) : Player
		{
			var _loc_2:uint = players.length;
			while(_loc_2)
			{
				if(!(players[_loc_2] == null) && players[_loc_2].username == param1)
				{
					return players[_loc_2];
				}
			}
			return null;
		}

		public function player_count() : uint
		{
			var _loc_1:uint = players.length;
			var _loc_2:uint = 0;
			while(_loc_1)
			{
				if(!(players[_loc_1] == null) && players[_loc_1].active)
				{
					_loc_2 = _loc_2 + 1;
				}
			}
			return _loc_2;
		}

		public function repaint() : void
		{
			var _loc_1:uint = 0;
			erase();
			number_of_players = player_count();
			var _loc_2:uint = 5;
			while(_loc_1 < players.length)
			{
				if(!(players[_loc_1] == null) && players[_loc_1].active)
				{
					players[_loc_1].x = 0;
					players[_loc_1].y = _loc_2;
					addChild(players[_loc_1]);
					_loc_2 = _loc_2 + 70;
					if(number_of_players == 2)
					{
						_loc_2 = _loc_2 + 70;
					}
					else
					{
						if(number_of_players == 3)
						{
							_loc_2 = _loc_2 + 35;
						}
					}
				}
				_loc_1 = _loc_1 + 1;
			}
		}

		public function erase() : void
		{
			while(this.numChildren)
			{
				removeChildAt(0);
			}
		}
	}
}
package Game.FTW
{
	import fl.controls.*;
	import fl.data.*;

	public class Userlist extends List
	{
		private var players:Array;
		private var spectators:Array;
		private var playerLabel:Object;
		private var spectatorLabel:Object;
		private var sortMethod:String = "points";

		public function Userlist()
		{
			super();
			players = new Array();
			spectators = new Array();
			spectatorLabel = new Object();
			spectatorLabel.type = 2;
			spectatorLabel.text = "Spectators";
			playerLabel = new Object();
			playerLabel.type = 2;
			playerLabel.text = "Players";
			setStyle("cellRenderer", UserlistRenderer);
		}

		public function addPlayer(param1:String, param2:Number, param3:Number) : void
		{
			var _loc_4:Object = null;
			if(!isOnList(param1))
			{
				_loc_4 = new Object();
				_loc_4.name = param1;
				_loc_4.points = param2;
				if(param3 > 0)
				{
					_loc_4.rating = Math.round(param3);
				}
				else
				{
					_loc_4.rating = "None";
				}
				_loc_4.ratingVal = int(param3);
				_loc_4.type = 0;
				players.push(_loc_4);
				refresh();
			}
		}

		public function addPlayers(param1:Array) : void
		{
			var _loc_2:int = 0;
			while(_loc_2 < param1.length)
			{
				if(!isOnList(param1[_loc_2].name))
				{
					if(param1[_loc_2].rating > 0)
					{
						param1[_loc_2].rating = Math.round(param1[_loc_2].rating);
					}
					else
					{
						param1[_loc_2].rating = "None";
					}
					param1[_loc_2].ratingVal = int(param1[_loc_2].rating);
					param1[_loc_2].type = 0;
					this.players.push(param1[_loc_2]);
				}
				_loc_2++;
			}
			refresh();
		}

		public function addSpectator(param1:String) : void
		{
			var _loc_2:Object = null;
			if(!isOnList(param1))
			{
				_loc_2 = new Object();
				_loc_2.name = param1;
				_loc_2.type = 1;
				spectators.push(_loc_2);
				refresh();
			}
		}

		public function addSpectators(param1:Array) : void
		{
			var _loc_2:int = 0;
			while(_loc_2 < param1.length)
			{
				addSpectator(param1[_loc_2]);
				_loc_2++;
			}
			refresh();
		}

		public function updatePlayer(param1:String, param2:Number) : void
		{
			var _loc_3:Object = getPlayer(param1);
			if(_loc_3 != null)
			{
				_loc_3.points = Math.round(param2);
				refresh();
			}
		}

		public function updatePoints(param1:Array) : void
		{
			var _loc_3:Object = null;
			var _loc_2:uint = 0;
			while(_loc_2 < param1.length)
			{
				_loc_3 = getPlayer(param1[_loc_2].name);
				if(_loc_3 != null)
				{
					_loc_3.points = Math.round(param1[_loc_2].points);
				}
				_loc_2 = _loc_2 + 1;
			}
			refresh();
		}

		public function removeUser(param1:String) : void
		{
			var _loc_2:int = 0;
			_loc_2 = findPlayer(param1);
			if(_loc_2 >= 0)
			{
				players.splice(_loc_2, 1);
			}
			else
			{
				_loc_2 = findSpectator(param1);
				if(_loc_2 >= 0)
				{
					spectators.splice(_loc_2, 1);
				}
			}
			if(_loc_2 >= 0)
			{
				refresh();
			}
		}

		public function setSortMethod(param1:String) : void
		{
			if(param1 == "points")
			{
				this.sortMethod = param1;
			}
			else
			{
				if(param1 == "rating")
				{
					this.sortMethod = "ratingVal";
				}
				else
				{
					this.sortMethod = "name";
				}
			}
			refresh();
		}

		public function getSelectedUser() : String
		{
			return selectedItem != null ? selectedItem.name : null;
		}

		private function refresh() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:String = null;
			var _loc_3:Array = null;
			var _loc_4:uint = 0;
			_loc_1 = this.verticalScrollPosition;
			_loc_2 = getSelectedUser();
			if(this.sortMethod == "name")
			{
				players.sortOn(this.sortMethod, Array.CASEINSENSITIVE);
			}
			else
			{
				players.sortOn(this.sortMethod, Array.NUMERIC + Array.DESCENDING);
			}
			spectators.sortOn("name", Array.CASEINSENSITIVE);
			if(spectators.length > 0)
			{
				_loc_3 = [playerLabel].concat(players, spectatorLabel, spectators);
			}
			else
			{
				_loc_3 = players;
			}
			dataProvider = new DataProvider(_loc_3);
			this.verticalScrollPosition = _loc_1;
			if(_loc_2)
			{
				_loc_4 = 0;
				while(_loc_4 < _loc_3.length)
				{
					if(_loc_3[_loc_4].name == _loc_2)
					{
						this.selectedIndex = _loc_4;
						break;
					}
					_loc_4 = _loc_4 + 1;
				}
			}
		}

		private function findPlayer(param1:String) : int
		{
			var _loc_2:uint = 0;
			while(_loc_2 < players.length)
			{
				if(players[_loc_2].name == param1)
				{
					return _loc_2;
				}
				_loc_2 = _loc_2 + 1;
			}
			return -1;
		}

		private function findSpectator(param1:String) : int
		{
			var _loc_2:uint = 0;
			while(_loc_2 < spectators.length)
			{
				if(spectators[_loc_2].name == param1)
				{
					return _loc_2;
				}
				_loc_2 = _loc_2 + 1;
			}
			return -1;
		}

		private function isOnList(param1:String) : Boolean
		{
			var _loc_2:int = findPlayer(param1);
			if(_loc_2 >= 0)
			{
				return true;
			}
			return findSpectator(param1) >= 0;
		}

		private function getPlayer(param1:String) : Object
		{
			var _loc_2:uint = 0;
			while(_loc_2 < players.length)
			{
				if(players[_loc_2].name == param1)
				{
					return players[_loc_2];
				}
				_loc_2 = _loc_2 + 1;
			}
			return null;
		}
	}
}
package Game.FTW
{
	import Misc.*;
	import fl.controls.listClasses.*;
	import fl.core.*;
	import flash.display.*;
	import flash.events.*;
	import flash.geom.*;
	import flash.text.*;

	public class UserlistRenderer extends UIComponent implements ICellRenderer
	{
		protected var _selected:Boolean;
		protected var _listData:ListData;
		protected var _data:Object;

		public function UserlistRenderer() : void
		{
			super();
			focusEnabled = true;
		}

		override public function setSize(param1:Number, param2:Number) : void
		{
			super.setSize(param1, param2);
		}

		public function get listData() : ListData
		{
			return _listData;
		}

		public function set listData(param1:ListData) : void
		{
			_listData = param1;
		}

		public function get data() : Object
		{
			return _data;
		}

		public function set data(param1:Object) : void
		{
			_data = param1;
		}

		public function get selected() : Boolean
		{
			return _selected;
		}

		public function set selected(param1:Boolean) : void
		{
			_selected = param1;
			drawLayout();
		}

		protected function toggleSelected(param1:MouseEvent) : void
		{
			_selected = !_selected;
		}

		public function setMouseState(param1:String) : void
		{
		}

		private function showRating(param1:Event) : void
		{
			var _loc_2:TextField = TextField(getChildAt(0));
			_loc_2.text = String(this.data.rating);
		}

		private function hideRating(param1:Event) : void
		{
			var _loc_2:TextField = TextField(getChildAt(0));
			_loc_2.text = String(this.data.points);
		}

		protected function drawLayout() : void
		{
			var _loc_1:Array = null;
			var _loc_4:Matrix = null;
			var _loc_5:TextField = null;
			var _loc_6:TextField = null;
			var _loc_7:TextField = null;
			var _loc_8:TextFormat = null;
			this.graphics.clear();
			var _loc_2:Array = [1, 1, 1, 1, 1];
			var _loc_3:Array = [0, 1, 127, 224, 255];
			if(_selected)
			{
				if(_data.type == 1)
				{
					_loc_1 = [0, 16772846, 16764108, 16772846, 0];
				}
				else
				{
					_loc_1 = [0, 15658751, 13421823, 15658751, 0];
				}
				_loc_4 = new Matrix();
				_loc_4.createGradientBox(this.width, this.height, Math.PI / 2, 0, 0);
				this.graphics.beginGradientFill(GradientType.LINEAR, _loc_1, _loc_2, _loc_3, _loc_4, SpreadMethod.PAD);
				this.graphics.drawRect(0, 0, this.width, this.height);
				this.graphics.endFill();
			}
			if(this.numChildren <= 0)
			{
				_loc_5 = new TextField();
				_loc_7 = new TextField();
				_loc_6 = new TextField();
				var _loc_9:Boolean = false;
				_loc_6.selectable = _loc_9;
				var _loc_9:Boolean = _loc_9;
				_loc_7.selectable = _loc_9;
				_loc_5.selectable = _loc_9;
				var _loc_9:Boolean = true;
				_loc_6.mouseEnabled = _loc_9;
				var _loc_9:Boolean = _loc_9;
				_loc_7.mouseEnabled = _loc_9;
				_loc_5.mouseEnabled = _loc_9;
				var _loc_9:* = this.width;
				_loc_6.width = _loc_9;
				var _loc_9:* = _loc_9;
				_loc_7.width = _loc_9;
				_loc_5.width = _loc_9;
				var _loc_9:* = this.height;
				_loc_6.height = _loc_9;
				var _loc_9:* = _loc_9;
				_loc_7.height = _loc_9;
				_loc_5.height = _loc_9;
				_loc_8 = new TextFormat();
				_loc_8.align = "center";
				_loc_8.bold = true;
				_loc_8.font = "_sans";
				_loc_7.defaultTextFormat = _loc_8;
				_loc_8 = new TextFormat();
				_loc_8.align = "right";
				_loc_8.font = "_sans";
				_loc_6.defaultTextFormat = _loc_8;
				_loc_8 = new TextFormat();
				_loc_8.align = "left";
				_loc_8.font = "_sans";
				_loc_5.defaultTextFormat = _loc_8;
				addChildAt(_loc_6, 0);
				addChildAt(_loc_7, 1);
				addChildAt(_loc_5, 2);
				EventManager.add(this, MouseEvent.MOUSE_OVER, showRating);
				EventManager.add(this, MouseEvent.MOUSE_OUT, hideRating);
				EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			}
			else
			{
				_loc_6 = TextField(getChildAt(0));
				_loc_7 = TextField(getChildAt(1));
				_loc_5 = TextField(getChildAt(2));
			}
			switch(_data.type)
			{
			case 0:
				_loc_5.visible = true;
				_loc_7.visible = false;
				_loc_6.visible = true;
				_loc_5.text = _data.name;
				if(_data.points != undefined)
				{
					_loc_6.text = String(Math.round(_data.points));
				}
				if(_data.rating != undefined)
				{
					this.data.rating = _data.rating;
				}
				if(_data.points != undefined)
				{
					this.data.points = _data.points;
				}
				break;
			case 1:
				_loc_5.visible = true;
				_loc_7.visible = false;
				_loc_6.visible = false;
				_loc_5.text = _data.name;
				_loc_7.text = "";
				_loc_6.text = "";
				break;
			case 2:
				_loc_1 = [0, 15658734, 13421772, 15658734, 0];
				_loc_4 = new Matrix();
				_loc_4.createGradientBox(this.width, this.height, Math.PI / 2, 0, 0);
				this.graphics.beginGradientFill(GradientType.LINEAR, _loc_1, _loc_2, _loc_3, _loc_4, SpreadMethod.PAD);
				this.graphics.drawRect(0, 0, this.width, this.height);
				this.graphics.endFill();
				_loc_5.visible = false;
				_loc_6.visible = false;
				_loc_7.visible = true;
				_loc_7.text = _data.text;
				break;
			default:
				this.visible = false;
				break;
			}
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.remove(this, MouseEvent.MOUSE_OVER, showRating);
			EventManager.remove(this, MouseEvent.MOUSE_OUT, hideRating);
		}
	}
}
package Lobby
{
	import Misc.*;
	import fl.motion.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;

	public class GameClip extends Sprite
	{
		public static var class_name:* = "Lobby.GameClip";
		public static var instance_number_counter:int = 0;
		public static var CREATED:uint = 1;
		public static var STARTING:uint = 2;
		public static var STARTED:uint = 3;
		public static var ENDING:uint = 4;
		public static var ENDED:uint = 5;
		private var instance_number:int = 0;
		private var _id:uint;
		private var _name:String;
		private var _players:uint;
		private var _type:String;
		private var _status:uint;
		private var _problems:uint;
		public var destroy:Boolean = false;
		public var _tType:TextField;
		public var _tName:TextField;
		public var _tPlayers:TextField;
		public var _tInfo:TextField;
		public var _sBackground:Sprite;

		public function GameClip(param1:uint, param2:String, param3:String, param4:uint, param5:uint, param6:uint = 0, param7:uint = 1) : void
		{
			super();
			var _loc_9:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_9;
			instance_number = instance_number_counter;
			_tPlayers.text = "Players: " + param6;
			_tPlayers.blendMode = BlendMode.LAYER;
			_tName.blendMode = BlendMode.LAYER;
			_tType.blendMode = BlendMode.LAYER;
			this.name = param2;
			this.type = param3;
			this.players = param6;
			this.status = param7;
			this.id = param1;
			this._problems = param5;
			EventManager.add(this, MouseEvent.CLICK, on_clicked, "GameClip");
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		private function on_clicked(param1:MouseEvent) : void
		{
			var _loc_2:GameInfo = new GameInfo(_id);
			g.scene.getScene().addChild(_loc_2);
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(this, MouseEvent.CLICK, on_clicked);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.remove(this, Event.ENTER_FRAME, fade_in);
			EventManager.remove(this, Event.ENTER_FRAME, fade_out);
		}

		public function show() : void
		{
			this.visible = true;
			this.alpha = 0;
			EventManager.add(this, Event.ENTER_FRAME, fade_in);
		}

		private function fade_in(param1:Event) : void
		{
			var _loc_2:Number = this.alpha;
			_loc_2 = _loc_2 + 0.05;
			if(_loc_2 >= 1)
			{
				_loc_2 = 1;
				EventManager.remove(this, Event.ENTER_FRAME, fade_in);
			}
			this.alpha = _loc_2;
		}

		public function hide() : void
		{
			_tInfo.text = "";
			EventManager.add(this, Event.ENTER_FRAME, fade_out);
		}

		private function fade_out(param1:Event) : void
		{
			var _loc_2:Number = this.alpha;
			_loc_2 = _loc_2 - 0.05;
			if(_loc_2 <= 0)
			{
				EventManager.remove(this, Event.ENTER_FRAME, fade_out);
				dispatchEvent(new Event("HIDE_GAME_CLIP", true));
			}
			this.alpha = _loc_2;
		}

		public function set id(param1:uint) : void
		{
			this._id = param1;
		}

		public function get id() : uint
		{
			return _id;
		}

		override public function set name(param1:String) : void
		{
			this._name = param1;
			_tName.text = param1;
		}

		override public function get name() : String
		{
			return this._name;
		}

		public function set type(param1:String) : void
		{
			this._type = param1;
			_tType.text = param1;
		}

		public function get type() : String
		{
			return this._type;
		}

		public function set players(param1:uint) : void
		{
			this._players = param1;
			if(param1 > 0)
			{
				_tPlayers.text = "Players: " + param1;
			}
			else
			{
				_tPlayers.text = "";
			}
		}

		public function get players() : uint
		{
			return this._players;
		}

		public function set status(param1:uint) : void
		{
			var _loc_2:uint = 0;
			var _loc_3:Color = null;
			if(param1 >= GameClip.CREATED && param1 <= GameClip.ENDED)
			{
				this._status = param1;
				_loc_2 = 13489660;
				if(param1 == GameClip.STARTED || param1 == GameClip.STARTING)
				{
					_loc_2 = 49877;
				}
				_loc_3 = new Color();
				_loc_3.setTint(_loc_2, 1);
				_sBackground.transform.colorTransform = _loc_3;
			}
			switch(param1)
			{
			case GameClip.CREATED:
				_tInfo.text = "Forming";
				break;
			case GameClip.STARTING:
				_tInfo.text = "Starting";
				break;
			case GameClip.STARTED:
				this.problem = 1;
				break;
			case GameClip.ENDING:
				_tInfo.text = "Ending";
				break;
			case GameClip.ENDED:
				_tInfo.text = "Ended";
				break;
			default:
				break;
			}
		}

		public function get status() : uint
		{
			return this._status;
		}

		public function set problem(param1:uint) : void
		{
			if(_type != "Countdown")
			{
				if(param1 > 0)
				{
					_tInfo.text = "Problem " + param1 + " of " + this._problems;
				}
				else
				{
					_tInfo.text = this._problems + " problems";
				}
			}
			else
			{
				if(param1 > 0)
				{
					_tInfo.text = "Problem " + param1;
				}
				else
				{
					_tInfo.text = "Not started";
				}
			}
		}

		override public function toString() : String
		{
			return "[Object GameClip] id=" + _id + " name=" + _name + " type=" + _type + " Players=" + _players + " status=" + _status + " visible=" + String(visible);
		}
	}
}
package Lobby
{
	import Misc.*;
	import fl.containers.*;
	import flash.display.*;
	import flash.events.*;

	public class GameGrid extends Sprite
	{
		public static var class_name:* = "Lobby.GameInfo";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		private var games:Array;
		public var _spGames:ScrollPane;

		public function GameGrid()
		{
			super();
			var _loc_2:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_2;
			instance_number = instance_number_counter;
			games = new Array();
			EventManager.add(this, "HIDE_GAME_CLIP", final_hide);
			EventManager.add(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			__setProp__spGames_GameGrid_Layer1_0();
		}

		public function is_game(param1:uint) : Boolean
		{
			var _loc_2:GameClip = find_clip(param1);
			if(_loc_2 == null || _loc_2.visible == false)
			{
				return false;
			}
			return true;
		}

		public function new_game(param1:uint, param2:String, param3:String, param4:uint, param5:uint) : void
		{
			var _loc_6:GameClip = new GameClip(param1, param2, param3, param4, param5);
			_loc_6.visible = false;
			Sprite(_spGames.content).addChild(_loc_6);
			games.push(_loc_6);
		}

		public function game_list(param1:String) : void
		{
			var _loc_4:Array = null;
			var _loc_5:GameClip = null;
			var _loc_6:uint = 0;
			var _loc_7:String = null;
			var _loc_8:String = null;
			var _loc_9:uint = 0;
			var _loc_10:uint = 0;
			var _loc_11:uint = 0;
			var _loc_12:uint = 0;
			var _loc_13:uint = 0;
			if(param1.length <= 0)
			{
				return;
			}
			var _loc_2:Array = param1.split("\n");
			var _loc_3:uint = 0;
			while(_loc_3 < _loc_2.length)
			{
				_loc_4 = _loc_2[_loc_3].split("\t");
				_loc_5 = find_clip(_loc_4[0]);
				if(_loc_5 == null)
				{
					_loc_6 = uint(_loc_4[0]);
					_loc_7 = _loc_4[1];
					_loc_8 = _loc_4[2];
					_loc_9 = uint(_loc_4[3]);
					_loc_10 = uint(_loc_4[4]);
					_loc_11 = uint(_loc_4[5]);
					_loc_12 = uint(_loc_4[6]);
					_loc_13 = uint(_loc_4[7]);
					_loc_5 = new GameClip(_loc_6, _loc_7, _loc_8, _loc_9, _loc_12, _loc_11, _loc_10);
					_loc_5.problem = _loc_13;
					_loc_5.visible = false;
					Sprite(_spGames.content).addChild(_loc_5);
					this.games.push(_loc_5);
					if((_loc_11 > 0 && _loc_11 <= 50 || g.user.access > 100 && _loc_10 == GameClip.ENDED) && _loc_10 == GameClip.ENDING)
					{
						display_game(_loc_4[0]);
					}
				}
				_loc_3 = _loc_3 + 1;
			}
		}

		public function remove_game(param1:uint) : void
		{
			var _loc_2:int = find_clip_position(param1);
			if(_loc_2 >= 0)
			{
				hide_game(param1);
			}
		}

		public function update(param1:uint, param2:uint, param3:uint, param4:uint, param5:uint) : void
		{
			var _loc_6:GameClip = find_clip(param1);
			if(_loc_6 == null)
			{
				return;
			}
			if(param2 == GameClip.ENDED || param2 == GameClip.ENDING || param5 <= 0 || param5 > 50 || param4 > 50)
			{
				_loc_6.destroy = param2 == GameClip.ENDED || param2 == GameClip.ENDING;
				hide_game(param1);
			}
			else
			{
				display_game(param1);
			}
			_loc_6.status = param2;
			_loc_6.players = param5;
			_loc_6.problem = param3;
		}

		private function display_game(param1:uint) : void
		{
			var _loc_3:int = 0;
			var _loc_4:int = 0;
			var _loc_2:int = find_clip_position(param1);
			if(_loc_2 >= 0 && games[_loc_2].visible == false)
			{
				_loc_3 = 0;
				_loc_4 = 0;
				while(_loc_4 < _loc_2)
				{
					if(games[_loc_4].visible == true)
					{
						_loc_3++;
					}
					_loc_4++;
				}
				games[_loc_2].show();
				set_display_position(games[_loc_2], _loc_3);
				_loc_4 = _loc_2 + 1;
				while(_loc_4 < games.length)
				{
					if(games[_loc_4].visible == true)
					{
						_loc_3++;
						set_display_position(games[_loc_4], _loc_3);
					}
					_loc_4++;
				}
			}
			_spGames.update();
		}

		private function hide_game(param1:uint) : void
		{
			var _loc_2:GameClip = find_clip(param1);
			if(!(_loc_2 == null) && _loc_2.visible)
			{
				_loc_2.hide();
			}
		}

		private function final_hide(param1:Event) : void
		{
			var _loc_5:int = 0;
			var _loc_6:int = 0;
			var _loc_2:GameClip = GameClip(param1.target);
			var _loc_3:uint = _loc_2.id;
			var _loc_4:int = find_clip_position(_loc_3);
			if(_loc_4 >= 0)
			{
				_loc_5 = 0;
				_loc_6 = 0;
				while(_loc_6 < _loc_4)
				{
					if(games[_loc_6].visible == true)
					{
						_loc_5++;
					}
					_loc_6++;
				}
				games[_loc_4].visible = false;
				_loc_6 = _loc_4 + 1;
				while(_loc_6 < games.length)
				{
					if(games[_loc_6].visible == true)
					{
						set_display_position(games[_loc_6], _loc_5);
						_loc_5++;
					}
					_loc_6++;
				}
				games[_loc_4].destroy;
				if(games[_loc_4].destroy || 1 == 1)
				{
					Sprite(_spGames.content).removeChild(games[_loc_4]);
					games.splice(_loc_4, 1);
				}
			}
		}

		private function set_display_position(param1:DisplayObject, param2:uint) : void
		{
			var _loc_3:uint = (param2 % 4) * 125;
			var _loc_4:uint = (Math.floor(param2 / 4)) * 105;
			param1.x = _loc_3;
			param1.y = _loc_4;
		}

		private function find_clip(param1:uint) : GameClip
		{
			var _loc_2:uint = 0;
			while(_loc_2 < games.length)
			{
				if(games[_loc_2].id == param1)
				{
					return games[_loc_2];
				}
				_loc_2 = _loc_2 + 1;
			}
			return null;
		}

		private function find_clip_position(param1:uint) : int
		{
			var _loc_2:uint = 0;
			while(_loc_2 < games.length)
			{
				if(games[_loc_2].id == param1)
				{
					return _loc_2;
				}
				_loc_2 = _loc_2 + 1;
			}
			return -1;
		}

		public function on_added_to_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
		}

		public function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.remove(this, "HIDE_GAME_CLIP", final_hide);
		}

		override public function toString() : String
		{
			var _loc_1:String = "[object GameGrid] ";
			if(games.length <= 0)
			{
				return _loc_1 + "No games";
			}
			var _loc_2:uint = 0;
			while(_loc_2 < games.length)
			{
				_loc_1 = _loc_1 + (games[_loc_2].toString() + "\n");
				_loc_2 = _loc_2 + 1;
			}
			return _loc_1;
		}

		public function __setProp__spGames_GameGrid_Layer1_0()
		{
			try
			{
				_spGames["componentInspectorSetting"] = true;
			}
			catch(e:Error)
			{
			}
			_spGames.enabled = true;
			_spGames.horizontalLineScrollSize = 4;
			_spGames.horizontalPageScrollSize = 0;
			_spGames.horizontalScrollPolicy = "auto";
			_spGames.scrollDrag = false;
			_spGames.source = "EmptyClip";
			_spGames.verticalLineScrollSize = 4;
			_spGames.verticalPageScrollSize = 0;
			_spGames.verticalScrollPolicy = "auto";
			_spGames.visible = true;
			try
			{
				_spGames["componentInspectorSetting"] = false;
			}
			catch(e:Error)
			{
			}
		}
	}
}
package Lobby
{
	import Misc.*;
	import Type.*;
	import com.electrotank.electroserver4.esobject.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import net.theyak.events.*;
	import net.theyak.ui.*;

	public class GameInfo extends Sprite
	{
		public static var class_name:* = "Lobby.GameInfo";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		private var window:YakDialog;
		private var status:TextField;
		private var join:Button;
		private var spectate:Button;
		private var password:TextInput;
		private var password_label:TextField;
		private var time_per_problem:TextField;
		private var number_of_problems:TextField;
		private var rated:TextField;
		private var scoring_method:TextField;
		private var rounds:TextField;
		private var levels:TextField;
		private var game_password:String;
		public var userlist:Userlist;
		private var game_id:uint;

		public function GameInfo(param1:uint)
		{
			super();
			var _loc_7:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_7;
			instance_number = instance_number_counter;
			game_id = param1;
			window = new YakDialog("Game Information", 250, 375);
			EventManager.add(window, "DialogEvent", on_dialog_closed);
			var _loc_2:EsObject = new EsObject();
			_loc_2.setInteger("game_id", game_id);
			g.server.esServerPlugin(g.manager, "subscribe", _loc_2);
			g.server.addEventListener("pluginMessage", "on_plugin_message", this);
			join = new Button();
			spectate = new Button();
			join.label = "Join";
			join.y = 314;
			join.setSize(90, join.height);
			join.mouseEnabled = true;
			join.visible = false;
			window.canvas.addChild(join);
			spectate.label = "Spectate";
			spectate.y = 314;
			spectate.setSize(90, spectate.height);
			spectate.mouseEnabled = true;
			spectate.visible = false;
			window.canvas.addChild(spectate);
			userlist = new Userlist();
			userlist.width = 228;
			userlist.height = 150;
			userlist.x = 5;
			userlist.y = 5;
			window.canvas.addChild(userlist);
			var _loc_3:TextFormat = new TextFormat();
			_loc_3.font = "_sans";
			var _loc_4:TextFormat = new TextFormat();
			_loc_4.font = "_sans";
			_loc_4.align = "center";
			var _loc_5:TextFormat = new TextFormat();
			_loc_5.font = "_sans";
			_loc_5.align = "right";
			status = new TextField();
			status.width = userlist.width;
			status.height = 22;
			status.defaultTextFormat = _loc_4;
			status.text = "Obtaining Status";
			status.y = 160;
			status.x = 2;
			window.canvas.addChild(status);
			time_per_problem = new TextField();
			time_per_problem.width = window.canvas.width;
			time_per_problem.height = 22;
			time_per_problem.defaultTextFormat = _loc_4;
			time_per_problem.text = "";
			time_per_problem.y = 178;
			time_per_problem.x = 2;
			window.canvas.addChild(time_per_problem);
			number_of_problems = new TextField();
			number_of_problems.width = window.canvas.width;
			number_of_problems.height = 22;
			number_of_problems.defaultTextFormat = _loc_4;
			number_of_problems.text = "";
			number_of_problems.y = 196;
			number_of_problems.x = 2;
			window.canvas.addChild(number_of_problems);
			rated = new TextField();
			rated.width = window.canvas.width;
			rated.height = 22;
			rated.defaultTextFormat = _loc_4;
			rated.text = "";
			rated.y = 214;
			rated.x = 2;
			window.canvas.addChild(rated);
			scoring_method = new TextField();
			scoring_method.width = window.canvas.width;
			scoring_method.height = 22;
			scoring_method.defaultTextFormat = _loc_4;
			scoring_method.text = "";
			scoring_method.y = 232;
			scoring_method.x = 2;
			window.canvas.addChild(scoring_method);
			rounds = new TextField();
			rounds.width = window.canvas.width;
			rounds.height = 22;
			rounds.defaultTextFormat = _loc_4;
			rounds.text = "";
			rounds.y = 250;
			rounds.x = 2;
			window.canvas.addChild(rounds);
			levels = new TextField();
			levels.width = window.canvas.width;
			levels.height = 22;
			levels.defaultTextFormat = _loc_4;
			levels.text = "";
			levels.y = 268;
			levels.x = 2;
			window.canvas.addChild(levels);
			password_label = new TextField();
			password_label.width = 90;
			password_label.height = 22;
			password_label.defaultTextFormat = _loc_5;
			password_label.text = "Password";
			password_label.y = 287;
			password_label.x = 2;
			password_label.visible = false;
			window.canvas.addChild(password_label);
			password = new TextInput();
			password.move(95, 287);
			password.visible = false;
			window.canvas.addChild(password);
			window.center(g.scene.getScene());
			addChild(window);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		public function on_plugin_message(param1:Object) : void
		{
			switch(param1.response.Action)
			{
			case "sub_player_list":
				on_player_list(param1.response.players);
				break;
			case "sub_player_add":
				on_player_add(param1.response.name, param1.response.rating);
				break;
			case "sub_player_leave":
				on_player_leave(param1.response.name);
				break;
			case "sub_game_status":
				on_game_status(uint(param1.response.status));
				break;
			case "sub_game_info":
				on_game_information(param1.response);
				break;
			case "sub_game_full":
				on_game_full(true, 1);
				break;
			case "sub_close":
				close();
				break;
			default:
				break;
			}
		}

		private function on_player_list(param1:String) : void
		{
			var _loc_4:Array = null;
			if(param1.length <= 0)
			{
				return;
			}
			userlist.clear();
			var _loc_2:Array = param1.split("\n");
			var _loc_3:uint = 0;
			while(_loc_3 < _loc_2.length)
			{
				_loc_4 = String(_loc_2[_loc_3]).split("\t");
				userlist.addUser(_loc_4[0], _loc_4[1], false);
				_loc_3 = _loc_3 + 1;
			}
		}

		private function on_player_add(param1:String, param2:String) : void
		{
			userlist.addUser(param1, param2);
		}

		private function on_player_leave(param1:String) : void
		{
			userlist.removeUser(param1);
		}

		private function on_game_status(param1:uint) : void
		{
			if(param1 == GameStatus.STARTING || param1 == GameStatus.STARTED)
			{
				join.visible = false;
				this.status.text = "Game has started";
			}
			else
			{
				if(param1 == GameStatus.ENDING || param1 == GameStatus.ENDED)
				{
					join.visible = false;
					spectate.visible = false;
					this.status.text = "Game has ended";
				}
				else
				{
					join.visible = true;
					this.status.text = "";
				}
			}
		}

		private function on_game_information(param1:*) : void
		{
			var _loc_2:Array = new Array();
			var _loc_3:Array = new Array();
			if(param1.sprint)
			{
				_loc_2.push("Sprint");
			}
			if(param1.target)
			{
				_loc_2.push("Target");
			}
			if(param1.team)
			{
				_loc_2.push("Team");
			}
			if(param1.countdown)
			{
				_loc_2.push("Countdown");
			}
			if(param1.school)
			{
				_loc_3.push("School");
			}
			if(param1.chapter)
			{
				_loc_3.push("Chapter");
			}
			if(param1.state)
			{
				_loc_3.push("State");
			}
			if(param1.national)
			{
				_loc_3.push("Nats");
			}
			rounds.text = _loc_2.length == 4 ? "" : _loc_2.join(", ");
			levels.text = _loc_3.length == 4 ? "" : _loc_3.join(", ");
			on_number_of_problems(int(param1.problems));
			on_time_per_problem(int(param1.time));
			on_rated(param1.rated);
			on_scoring_method(int(param1.scoring));
			on_password(param1.pw);
			EventManager.add(join, MouseEvent.CLICK, on_join_game, "GameInfo.Join");
			if(int(param1.max_players) < 0 || int(param1.max_players) > int(param1.players))
			{
				join.visible = true;
			}
			else
			{
				join.x = 20;
				join.y = 20;
				join.visible = false;
			}
			if(param1.spectators)
			{
				EventManager.add(spectate, MouseEvent.CLICK, on_spectate_game, "GameInfo.Spectate");
				join.x = 25;
				if(join.visible)
				{
					spectate.x = 125;
				}
				else
				{
					spectate.x = 75;
				}
				spectate.visible = true;
			}
			else
			{
				spectate.visible = false;
				join.x = 75;
			}
			on_game_status(int(param1.status));
		}

		private function on_game_full(param1:Boolean, param2:uint) : void
		{
			if(param1)
			{
				join.visible = false;
				this.status.text = "Game is full";
			}
			else
			{
				on_game_status(param2);
			}
		}

		private function on_number_of_problems(param1:uint) : void
		{
			number_of_problems.text = "Number of Problems: " + param1;
		}

		private function on_time_per_problem(param1:uint) : void
		{
			time_per_problem.text = "Time Per Problem: " + param1 + " seconds";
		}

		private function on_rated(param1:Boolean) : void
		{
			if(param1)
			{
				this.rated.text = "Game is rated";
			}
			else
			{
				this.rated.text = "Game is not rated";
			}
		}

		private function on_scoring_method(param1:uint) : void
		{
			scoring_method.text = "Scoring method: " + ScoringMethod.LABELS[param1];
			if(param1 == ScoringMethod.COUNTDOWN)
			{
				number_of_problems.text = "";
			}
		}

		private function on_password(param1:String) : void
		{
			game_password = param1;
			if(param1.length > 0)
			{
				password.visible = true;
				password_label.visible = true;
			}
			else
			{
				password.visible = false;
				password_label.visible = false;
			}
		}

		private function on_button(param1:uint) : void
		{
			var _loc_2:EsObject = null;
			var _loc_3:YakAlert = null;
			if(password.text == game_password)
			{
				g.game.reset();
				g.game.player_type = param1;
				_loc_2 = new EsObject();
				_loc_2.setInteger("id", game_id);
				_loc_2.setString("pw", password.text);
				_loc_2.setInteger("user_id", g.user.id);
				g.server.esServerPlugin(g.manager, "join_game", _loc_2);
			}
			else
			{
				_loc_3 = new YakAlert("Invalid Password", "Error", "OK");
				_loc_3.center(g.scene.getScene());
				g.scene.getScene().addChild(_loc_3);
			}
			close();
		}

		private function on_join_game(param1:MouseEvent) : void
		{
			on_button(FTW.PLAYER);
		}

		private function on_spectate_game(param1:MouseEvent) : void
		{
			on_button(FTW.SPECTATOR);
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(window, "DialogEvent", on_dialog_closed);
			EventManager.remove(join, MouseEvent.CLICK, on_join_game);
			EventManager.remove(spectate, MouseEvent.CLICK, on_spectate_game);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			var _loc_2:EsObject = new EsObject();
			_loc_2.setInteger("game_id", game_id);
			g.server.esServerPlugin(g.manager, "unsubscribe", _loc_2);
		}

		private function on_dialog_closed(param1:DialogEvent) : void
		{
			if(param1.action == "close")
			{
				close(param1);
			}
		}

		private function close(param1:Event = null) : void
		{
			if(parent != null)
			{
				parent.removeChild(this);
			}
		}
	}
}
package Lobby
{
	import Game.*;
	import Misc.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import net.theyak.events.*;
	import net.theyak.ui.*;

	public class NewCountdown extends Sprite
	{
		public static var class_name:* = "Lobby.NewCountdown";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		private var window:YakDialog;
		private var player_count:NumericStepper;
		private var rated:CheckBox;
		private var ok:Button;
		private var cancel:Button;
		private var password:TextInput;
		private var school:CheckBox;
		private var chapter:CheckBox;
		private var state:CheckBox;
		private var sprint:CheckBox;
		private var target:CheckBox;
		private var countdown:CheckBox;
		private var player_count_label:TextField;
		private var rated_label:TextField;
		private var password_label:TextField;
		private var school_label:TextField;
		private var chapter_label:TextField;
		private var state_label:TextField;
		private var sprint_label:TextField;
		private var target_label:TextField;
		private var countdown_label:TextField;

		public function NewCountdown()
		{
			super();
			var _loc_3:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_3;
			instance_number = instance_number_counter;
			window = new YakDialog("New Countdown", 250, 290);
			EventManager.add(window, "DialogEvent", on_dialog_closed);
			player_count = new NumericStepper();
			player_count.stepSize = 1;
			player_count.minimum = 2;
			player_count.maximum = 4;
			player_count.value = 2;
			player_count.width = 45;
			player_count.move(120, 45);
			window.canvas.addChild(player_count);
			rated = new CheckBox();
			rated.move(115, 80);
			rated.label = " ";
			rated.selected = true;
			window.canvas.addChild(rated);
			password = new TextInput();
			password.move(115, 150);
			window.canvas.addChild(password);
			ok = new Button();
			ok.label = "Create";
			ok.x = 10;
			ok.y = 220;
			EventManager.add(ok, MouseEvent.CLICK, on_create_game, "NewCountdown.Create");
			ok.setSize(60, ok.height);
			ok.mouseEnabled = true;
			window.canvas.addChild(ok);
			cancel = new Button();
			cancel.label = "Cancel";
			cancel.x = 80;
			cancel.y = 220;
			EventManager.add(cancel, MouseEvent.CLICK, on_cancel, "NewCountdown.Cancel");
			cancel.setSize(60, cancel.height);
			cancel.mouseEnabled = true;
			window.canvas.addChild(cancel);
			var _loc_1:TextFormat = new TextFormat();
			_loc_1.font = "_sans";
			_loc_1.bold = true;
			_loc_1.align = "right";
			player_count_label = new TextField();
			player_count_label.width = 105;
			player_count_label.height = 25;
			player_count_label.text = "Player Count";
			player_count_label.x = 10;
			player_count_label.y = 45;
			player_count_label.setTextFormat(_loc_1);
			window.canvas.addChild(player_count_label);
			rated_label = new TextField();
			rated_label.width = 105;
			rated_label.height = 25;
			rated_label.text = "Rated";
			rated_label.x = 10;
			rated_label.y = 80;
			rated_label.setTextFormat(_loc_1);
			window.canvas.addChild(rated_label);
			password_label = new TextField();
			password_label.width = 105;
			password_label.height = 25;
			password_label.text = "Password";
			password_label.x = 10;
			password_label.y = 150;
			password_label.setTextFormat(_loc_1);
			window.canvas.addChild(password_label);
			window.center(g.scene.getScene());
			addChild(window);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		private function on_create_game(param1:MouseEvent) : void
		{
			g.game.reset();
			g.game.type = "Countdown";
			g.game.max_players = player_count.value;
			g.game.problem_count = 20;
			g.game.time_per_problem = 45;
			g.game.rated = rated.selected;
			g.game.spectators = true;
			var _loc_2:Boolean = true;
			g.game.countdown = _loc_2;
			var _loc_2:Boolean = _loc_2;
			g.game.team = _loc_2;
			var _loc_2:Boolean = _loc_2;
			g.game.target = _loc_2;
			g.game.sprint = _loc_2;
			var _loc_2:Boolean = true;
			g.game.national = _loc_2;
			var _loc_2:Boolean = _loc_2;
			g.game.state = _loc_2;
			var _loc_2:Boolean = _loc_2;
			g.game.chapter = _loc_2;
			g.game.school = _loc_2;
			g.game.amc8 = true;
			g.game.scoring_method = ScoringType.COUNTDOWN;
			g.game.password = password.text;
			g.replay = g.game.clone();
			g.game.create();
			parent.removeChild(this);
		}

		private function on_cancel(param1:MouseEvent) : void
		{
			if(parent)
			{
				parent.removeChild(this);
			}
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(window, "DialogEvent", on_dialog_closed);
			EventManager.remove(ok, MouseEvent.CLICK, on_create_game);
			EventManager.remove(cancel, MouseEvent.CLICK, on_cancel);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		private function on_dialog_closed(param1:DialogEvent) : void
		{
			if(param1.action == "close")
			{
				close(param1);
			}
		}

		private function close(param1:Event) : void
		{
			parent.removeChild(this);
		}
	}
}
package Lobby
{
	import Game.*;
	import Misc.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import net.theyak.events.*;
	import net.theyak.ui.*;

	public class NewGame extends Sprite
	{
		public static var class_name:* = "Lobby.NewGame";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		private var window:YakDialog;
		private var scoring_method:ComboBox;
		private var problem_count:NumericStepper;
		private var time_per_problem:NumericStepper;
		private var rated:CheckBox;
		private var spectators:CheckBox;
		private var ok:Button;
		private var cancel:Button;
		private var password:TextInput;
		private var scoring_method_label:TextField;
		private var problem_count_label:TextField;
		private var time_per_problem_label:TextField;
		private var rated_label:TextField;
		private var spectators_label:TextField;
		private var password_label:TextField;
		private var school:CheckBox;
		private var chapter:CheckBox;
		private var state:CheckBox;
		private var sprint:CheckBox;
		private var target:CheckBox;
		private var countdown:CheckBox;
		private var school_label:TextField;
		private var chapter_label:TextField;
		private var state_label:TextField;
		private var sprint_label:TextField;
		private var target_label:TextField;
		private var countdown_label:TextField;

		public function NewGame()
		{
			super();
			var _loc_3:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_3;
			instance_number = instance_number_counter;
			window = new YakDialog("New Game", 250, 290);
			EventManager.add(window, "DialogEvent", on_dialog_closed);
			scoring_method = new ComboBox();
			scoring_method.setSize(100, 22);
			scoring_method.addItem({label:"Ranking", data:ScoringType.RANK});
			scoring_method.addItem({label:"Time", data:ScoringType.TIME});
			scoring_method.addItem({label:"Responses", data:ScoringType.CORRECT});
			scoring_method.addItem({label:"Time/Rank", data:ScoringType.COMPOSITE});
			scoring_method.move(120, 10);
			window.canvas.addChild(scoring_method);
			problem_count = new NumericStepper();
			problem_count.stepSize = 1;
			problem_count.minimum = 4;
			problem_count.maximum = 20;
			problem_count.value = 10;
			problem_count.width = 45;
			problem_count.move(120, 45);
			window.canvas.addChild(problem_count);
			time_per_problem = new NumericStepper();
			time_per_problem.stepSize = 1;
			time_per_problem.minimum = 5;
			time_per_problem.maximum = 120;
			time_per_problem.value = 45;
			time_per_problem.width = 45;
			time_per_problem.move(120, 80);
			window.canvas.addChild(time_per_problem);
			rated = new CheckBox();
			rated.move(115, 115);
			rated.label = " ";
			rated.selected = true;
			window.canvas.addChild(rated);
			spectators = new CheckBox();
			spectators.move(115, 150);
			spectators.label = " ";
			window.canvas.addChild(spectators);
			password = new TextInput();
			password.move(115, 185);
			window.canvas.addChild(password);
			ok = new Button();
			ok.label = "Create Game";
			ok.x = 25;
			ok.y = 220;
			EventManager.add(ok, MouseEvent.CLICK, on_create_game, "NewGame.Create");
			ok.setSize(90, ok.height);
			ok.mouseEnabled = true;
			window.canvas.addChild(ok);
			cancel = new Button();
			cancel.label = "Cancel";
			cancel.x = 125;
			cancel.y = 220;
			EventManager.add(cancel, MouseEvent.CLICK, on_cancel, "NewGame.Cancel");
			cancel.setSize(90, cancel.height);
			cancel.mouseEnabled = true;
			window.canvas.addChild(cancel);
			var _loc_1:TextFormat = new TextFormat();
			_loc_1.font = "_sans";
			_loc_1.bold = true;
			_loc_1.align = "right";
			scoring_method_label = new TextField();
			scoring_method_label.width = 105;
			scoring_method_label.height = 25;
			scoring_method_label.text = "Game Type";
			scoring_method_label.x = 10;
			scoring_method_label.y = 10;
			scoring_method_label.setTextFormat(_loc_1);
			window.canvas.addChild(scoring_method_label);
			problem_count_label = new TextField();
			problem_count_label.width = 105;
			problem_count_label.height = 25;
			problem_count_label.text = "Problem Count";
			problem_count_label.x = 10;
			problem_count_label.y = 45;
			problem_count_label.setTextFormat(_loc_1);
			window.canvas.addChild(problem_count_label);
			time_per_problem_label = new TextField();
			time_per_problem_label.width = 105;
			time_per_problem_label.height = 25;
			time_per_problem_label.text = "Time Per Problem";
			time_per_problem_label.x = 10;
			time_per_problem_label.y = 80;
			time_per_problem_label.setTextFormat(_loc_1);
			window.canvas.addChild(time_per_problem_label);
			rated_label = new TextField();
			rated_label.width = 105;
			rated_label.height = 25;
			rated_label.text = "Rated";
			rated_label.x = 10;
			rated_label.y = 115;
			rated_label.setTextFormat(_loc_1);
			window.canvas.addChild(rated_label);
			spectators_label = new TextField();
			spectators_label.width = 105;
			spectators_label.height = 25;
			spectators_label.text = "Spectators";
			spectators_label.x = 10;
			spectators_label.y = 150;
			spectators_label.setTextFormat(_loc_1);
			window.canvas.addChild(spectators_label);
			password_label = new TextField();
			password_label.width = 105;
			password_label.height = 25;
			password_label.text = "Password";
			password_label.x = 10;
			password_label.y = 185;
			password_label.setTextFormat(_loc_1);
			window.canvas.addChild(password_label);
			window.center(g.scene.getScene());
			addChild(window);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		private function on_create_game(param1:MouseEvent) : void
		{
			g.game.reset();
			g.game.type = "FTW";
			g.game.max_players = -1;
			g.game.problem_count = problem_count.value;
			g.game.time_per_problem = time_per_problem.value;
			g.game.rated = rated.selected;
			g.game.spectators = spectators.selected;
			g.game.scoring_method = scoring_method.selectedItem.data;
			g.game.password = password.text;
			var _loc_2:Boolean = true;
			g.game.countdown = _loc_2;
			var _loc_2:Boolean = _loc_2;
			g.game.team = _loc_2;
			var _loc_2:Boolean = _loc_2;
			g.game.target = _loc_2;
			g.game.sprint = _loc_2;
			var _loc_2:Boolean = true;
			g.game.national = _loc_2;
			var _loc_2:Boolean = _loc_2;
			g.game.state = _loc_2;
			var _loc_2:Boolean = _loc_2;
			g.game.chapter = _loc_2;
			g.game.school = _loc_2;
			g.game.amc8 = true;
			g.replay = g.game.clone();
			g.game.create();
			close(param1);
		}

		private function on_cancel(param1:MouseEvent) : void
		{
			close(param1);
		}

		private function on_dialog_closed(param1:DialogEvent) : void
		{
			if(param1.action == "close")
			{
				close(param1);
			}
		}

		private function close(param1:Event) : void
		{
			scoring_method.close();
			parent.removeChild(this);
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(window, "DialogEvent", on_dialog_closed);
			EventManager.remove(ok, MouseEvent.CLICK, on_create_game);
			EventManager.remove(cancel, MouseEvent.CLICK, on_cancel);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}
	}
}
package Lobby
{
	import Game.*;
	import Misc.*;
	import fl.containers.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;
	import net.theyak.events.*;
	import net.theyak.ui.*;

	public class Review extends Sprite
	{
		public static var class_name:* = "Lobby.Review";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		private var window:YakDialog;
		private var pane:ScrollPane;
		private var next_button:Button;
		private var previous_button:Button;
		private var report_button:Button;
		private var ask_button:Button;
		private var problem_number:uint;

		public function Review()
		{
			super();
			g.debuglog("Review Constructor");
			var _loc_2:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_2;
			instance_number = instance_number_counter;
			g.debuglog("In Review");
			window = new YakDialog("Review Problems", 492, 360);
			EventManager.add(window, "DialogEvent", on_dialog_closed);
			EventManager.add(window, KeyboardEvent.KEY_UP, on_key_up);
			pane = new ScrollPane();
			pane.move(5, 5);
			pane.setSize(470, 220);
			pane.source = new Sprite();
			window.canvas.addChild(pane);
			problem_number = 1;
			display_problem();
			next_button = new Button();
			next_button.label = "Next";
			next_button.x = 110;
			next_button.y = 300;
			window.canvas.addChild(next_button);
			previous_button = new Button();
			previous_button.label = "Previous";
			previous_button.x = 5;
			previous_button.y = 300;
			window.canvas.addChild(previous_button);
			ask_button = new Button();
			ask_button.label = "Ask on Forum";
			ask_button.x = 270;
			ask_button.y = 300;
			window.canvas.addChild(ask_button);
			report_button = new Button();
			report_button.label = "Report";
			report_button.x = 375;
			report_button.y = 300;
			window.canvas.addChild(report_button);
			window.center(g.scene.getScene());
			addChild(window);
			EventManager.add(previous_button, MouseEvent.CLICK, on_previous_button);
			EventManager.add(ask_button, MouseEvent.CLICK, on_ask_button);
			EventManager.add(report_button, MouseEvent.CLICK, on_report_button);
			EventManager.add(next_button, MouseEvent.CLICK, on_next_button);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.add(this, Event.ADDED_TO_STAGE, on_added);
		}

		private function display_problem() : void
		{
			if(problem_number < 1)
			{
				problem_number = g.game.last_problem_number_displayed;
			}
			else
			{
				if(problem_number > g.game.last_problem_number_displayed)
				{
					problem_number = 1;
				}
			}
			var _loc_1:uint = 100000;
			while(g.game.problems[problem_number] && problem_number == _loc_1)
			{
				if(_loc_1 == 100000)
				{
					_loc_1 = problem_number;
				}
				var _loc_6:* = this.problem_number + 1;
				this.problem_number = _loc_6;
				if(problem_number > g.game.last_problem_number_displayed)
				{
					problem_number = 1;
				}
			}
			while(Sprite(pane.content).numChildren)
			{
				Sprite(pane.content).removeChildAt(0);
			}
			var _loc_2:Problem = g.game.problems[problem_number];
			_loc_2.image.x = 5;
			_loc_2.image.y = 5;
			var _loc_3:Sprite = new Sprite();
			_loc_3.graphics.beginFill(16777215);
			_loc_3.graphics.drawRect(0, 0, _loc_2.image.width + 10, _loc_2.image.height + 10);
			_loc_3.visible = false;
			var _loc_4:Sprite = Sprite(pane.content);
			_loc_4.addChild(_loc_3);
			_loc_4.addChild(_loc_2.image);
			if(_loc_2.user_answer != null)
			{
				window.setTitle("Problem " + problem_number + "; Answer: " + _loc_2.real_answer + "; Your answer: " + _loc_2.user_answer);
			}
			else
			{
				window.setTitle("Problem " + problem_number + "; Answer: " + _loc_2.real_answer + "; Your answer: None");
			}
			pane.update();
		}

		private function on_report_button(param1:MouseEvent) : void
		{
			addChild(new Review_Report(g.game.problems[problem_number]));
		}

		private function on_cancel(param1:MouseEvent) : void
		{
			parent.removeChild(this);
		}

		private function on_ask_button(param1:MouseEvent) : void
		{
			var _loc_2:URLRequest = new URLRequest((g.phpPath + "ask_forum.php?problem_id=") + g.game.problems[problem_number].id);
			navigateToURL(_loc_2, "_blank");
		}

		private function on_key_up(param1:KeyboardEvent) : void
		{
			if(param1.keyCode == 37)
			{
				var _loc_3:* = this.problem_number - 1;
				this.problem_number = _loc_3;
			}
			else
			{
				if(param1.keyCode == 39)
				{
					var _loc_3:* = this.problem_number + 1;
					this.problem_number = _loc_3;
				}
			}
			display_problem();
		}

		private function on_next_button(param1:MouseEvent) : void
		{
			var _loc_3:* = this.problem_number + 1;
			this.problem_number = _loc_3;
			display_problem();
		}

		private function on_previous_button(param1:MouseEvent) : void
		{
			var _loc_3:* = this.problem_number - 1;
			this.problem_number = _loc_3;
			display_problem();
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(window, "DialogEvent", on_dialog_closed);
			EventManager.remove(window, KeyboardEvent.KEY_UP, on_key_up);
			EventManager.remove(previous_button, MouseEvent.CLICK, on_previous_button);
			EventManager.remove(ask_button, MouseEvent.CLICK, on_ask_button);
			EventManager.remove(report_button, MouseEvent.CLICK, on_report_button);
			EventManager.remove(next_button, MouseEvent.CLICK, on_next_button);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added);
		}

		private function on_added(param1:Event) : void
		{
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added);
			next_button.setFocus();
		}

		private function on_dialog_closed(param1:DialogEvent) : void
		{
			if(param1.action == "close")
			{
				close(param1);
			}
		}

		private function close(param1:Event) : void
		{
			pane.scrollDrag = false;
			parent.removeChild(this);
		}
	}
}
package Lobby
{
	import Game.*;
	import Misc.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import net.theyak.events.*;
	import net.theyak.ui.*;
	import net.theyak.util.*;

	public class Review_Report extends Sprite
	{
		public static var class_name:* = "Lobby.Review_Report";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		private var window:YakDialog;
		private var ok_button:Button;
		private var cancel_button:Button;
		private var report:TextArea;
		private var problem:Problem;

		public function Review_Report(param1:Problem)
		{
			super();
			var _loc_4:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_4;
			instance_number = instance_number_counter;
			this.problem = param1;
			window = new YakDialog("Report Problem", 400, 300);
			var _loc_2:TextField = new TextField();
			_loc_2.text = "Please describe the issue and click submit.";
			_loc_2.x = 5;
			_loc_2.y = 5;
			_loc_2.width = 390;
			window.canvas.addChild(_loc_2);
			ok_button = new Button();
			ok_button.label = "Submit";
			ok_button.x = 97;
			ok_button.y = 240;
			window.canvas.addChild(ok_button);
			cancel_button = new Button();
			cancel_button.label = "Cancel";
			cancel_button.x = 202;
			cancel_button.y = 240;
			window.canvas.addChild(cancel_button);
			report = new TextArea();
			report.setSize(380, 190);
			report.x = 5;
			report.y = 35;
			window.canvas.addChild(report);
			window.center(g.scene.getScene());
			addChild(window);
			EventManager.add(ok_button, MouseEvent.CLICK, on_ok_button);
			EventManager.add(cancel_button, MouseEvent.CLICK, close);
			EventManager.add(window, "DialogEvent", on_dialog_closed);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.add(this, Event.ADDED_TO_STAGE, on_added_to_stage);
		}

		private function on_ok_button(param1:MouseEvent) : void
		{
			Net.callServer((g.phpPath + "problem_report.php?pid=") + problem.id + "&uid=" + g.user.id + "&r=" + escape(report.text) + "&a=" + escape(problem.user_answer));
			var _loc_2:YakAlert = new YakAlert("Thanks, your report has been received.", "Report", "OK");
			_loc_2.center(g.scene.getScene());
			g.scene.getScene().addChild(_loc_2);
			close(param1);
		}

		private function on_added_to_stage(param1:Event) : void
		{
			report.setFocus();
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
		}

		private function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(ok_button, MouseEvent.CLICK, on_ok_button);
			EventManager.remove(cancel_button, MouseEvent.CLICK, close);
			EventManager.remove(window, "DialogEvent", on_dialog_closed);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
		}

		private function on_dialog_closed(param1:DialogEvent) : void
		{
			if(param1.action == "close")
			{
				close(param1);
			}
		}

		private function close(param1:Event) : void
		{
			parent.removeChild(this);
		}
	}
}
package Lobby
{
	import Misc.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;
	import flash.text.*;
	import net.theyak.events.*;
	import net.theyak.ui.*;

	public class Status extends Sprite
	{
		public static var class_name:* = "Lobby.Status";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		private var _alert:YakAlert;
		private var _username:String;
		private var _reason:TextInput;
		private var _time:TextInput;
		public var variables:URLLoader;

		public function Status(param1:String)
		{
			var username:String = param1;
			variables = new URLLoader();
			super();
			var _loc_4:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_4;
			instance_number = instance_number_counter;
			_username = username;
			var request:URLRequest = new URLRequest((g.URLPath + "PHP/Status.php?u=") + escape(username));
			variables.dataFormat = URLLoaderDataFormat.VARIABLES;
			EventManager.add(variables, Event.COMPLETE, userLoaded);
			EventManager.add(variables, IOErrorEvent.IO_ERROR, userLoadedError);
			EventManager.add(variables, SecurityErrorEvent.SECURITY_ERROR, securityError);
			try
			{
				variables.load(request);
			}
			catch(err:SecurityError)
			{
				error("Security error");
			}
		}

		private function userLoaded(param1:Event) : void
		{
			var _loc_3:Boolean = false;
			var _loc_4:Boolean = false;
			var _loc_5:* = undefined;
			var _loc_6:* = undefined;
			remove_url_loader_listeners();
			var _loc_2:URLLoader = URLLoader(param1.target);
			if(_loc_2.data.error)
			{
				error(_loc_2.data.error);
			}
			else
			{
				_loc_3 = g.user.access < 100 || _loc_2.data.banned == "true";
				_loc_4 = _loc_2.data.muted == "true";
				_loc_5 = _loc_4 ? "Unmute" : "Mute";
				_loc_6 = "Ban";
				if(g.user.access >= 255)
				{
					_alert = new YakAlert("", "Status for " + _username, _loc_5, _loc_6);
				}
				else
				{
					_alert = new YakAlert("", "Status for " + _username, _loc_5);
				}
				_alert.center(g.scene.getScene());
				add_alert_listeners();
				field("Muted", "No", 20, 20);
				field("Banned", "No", 20, 40);
				_reason = new TextInput();
				_time = new TextInput();
				if(!_loc_4 || !_loc_3)
				{
					field("Reason", "", 20, 60);
					_reason.x = 75;
					_reason.y = 60;
					_reason.setSize(200, 20);
					_reason.mouseEnabled = false;
					_alert.canvas.addChild(_reason);
					field("Minutes", "", 20, 86);
					_time.x = 75;
					_time.y = 86;
					_time.setSize(30, 20);
					_alert.canvas.addChild(_time);
				}
				addChild(_alert);
			}
		}

		private function field(param1:String, param2:String, param3:uint, param4:uint, param5:uint = 0)
		{
			var _loc_6:TextField = new TextField();
			var _loc_7:TextFormat = new TextFormat();
			var _loc_8:TextFormat = new TextFormat();
			_loc_6.x = param3;
			_loc_6.y = param4;
			_loc_6.autoSize = "left";
			_loc_6.text = " " + param1 + ": " + param2;
			_loc_7.font = "_sans";
			_loc_7.size = 12;
			_loc_7.bold = true;
			_loc_7.color = param5;
			_loc_8.font = "_sans";
			_loc_8.color = param5;
			_loc_8.bold = false;
			_loc_6.setTextFormat(_loc_8, param1.length + 2, _loc_6.text.length);
			_loc_6.setTextFormat(_loc_7, 0, param1.length + 2);
			_alert.canvas.addChild(_loc_6);
		}

		private function userLoadedError(param1:Event) : void
		{
			remove_url_loader_listeners();
			error("Load Error");
		}

		private function securityError(param1:Event) : void
		{
			remove_url_loader_listeners();
			error("A security error");
		}

		private function error(param1:String) : void
		{
			_alert = new YakAlert(param1, "Error", "OK");
			_alert.center(g.scene.getScene());
			add_alert_listeners();
			g.scene.getScene().addChild(_alert);
		}

		private function onAlertClosed(param1:DialogEvent) : void
		{
			if(param1.action == "close")
			{
				close(param1);
			}
		}

		private function onAlertButton(param1:AlertEvent) : void
		{
			var _loc_2:int = 0;
			var _loc_3:String = "";
			switch(param1.button)
			{
			case "Mute":
				if(_time.text.length > 0)
				{
					_loc_2 = parseInt(_time.text);
				}
				if(_loc_2 <= 0)
				{
					_loc_2 = 240;
				}
				if(_reason.text.length > 0)
				{
					_loc_3 = _reason.text;
				}
				g.server.toServerPlugin(g.auxiliary, "Mute", {name:_username, time:_loc_2, reason:_loc_3});
				g.chat.noticeEvent("User " + _username + " muted for " + _loc_2 + " minutes.");
				break;
			case "Ban":
				if(_time.text.length > 0)
				{
					_loc_2 = parseInt(_time.text);
				}
				if(_loc_2 <= 0)
				{
					_loc_2 = 2880;
				}
				if(_reason.text.length > 0)
				{
					_loc_3 = _reason.text;
				}
				g.server.toServerPlugin(g.auxiliary, "Ban", {name:_username, time:_loc_2, reason:_loc_3});
				g.chat.noticeEvent("User " + _username + " banned for " + _loc_2 + " minutes.");
				break;
			case "Unban":
				g.server.toServerPlugin(g.auxiliary, "Unban", {name:_username});
				g.chat.noticeEvent("User " + _username + " no longer banned");
				break;
			case "Unmute":
				g.server.toServerPlugin(g.auxiliary, "Unmute", {name:_username});
				g.chat.noticeEvent("User " + _username + " no longer muted");
				break;
			default:
				break;
			}
		}

		private function add_alert_listeners()
		{
			EventManager.add(_alert, "AlertEvent", onAlertButton);
			EventManager.add(_alert, "DialogEvent", onAlertClosed);
			EventManager.add(_alert, Event.REMOVED_FROM_STAGE, on_alert_removed_from_stage);
		}

		private function on_alert_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(_alert, "AlertEvent", onAlertButton);
			EventManager.remove(_alert, "DialogEvent", onAlertClosed);
			EventManager.remove(_alert, Event.REMOVED_FROM_STAGE, on_alert_removed_from_stage);
		}

		private function remove_url_loader_listeners()
		{
			EventManager.remove(variables, Event.COMPLETE, userLoaded);
			EventManager.remove(variables, IOErrorEvent.IO_ERROR, userLoadedError);
			EventManager.remove(variables, SecurityErrorEvent.SECURITY_ERROR, securityError);
		}

		private function close(param1:Event) : void
		{
			on_alert_removed_from_stage(param1);
			remove_url_loader_listeners();
			parent.removeChild(this);
		}
	}
}
package Lobby
{
	import Misc.*;
	import fl.motion.*;
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;
	import flash.text.*;

	public class UserInformation extends Sprite
	{
		public static var class_name:* = "Lobby.UserInformation";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		private var _games_today:TextField;
		private var _current_rating:TextField;
		private var _login_rating:TextField;
		private var _login_box:WhiteBox = null;

		public function UserInformation()
		{
			var _loc_4:uint = 0;
			var _loc_5:Color = null;
			super();
			var _loc_7:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_7;
			instance_number = instance_number_counter;
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			var _loc_1:TextFormat = new TextFormat();
			_loc_1.bold = true;
			_loc_1.font = "_sans";
			var _loc_2:TextField = new TextField();
			_loc_2.x = 3;
			_loc_2.y = 3;
			_loc_2.width = 190;
			_loc_2.height = 22;
			_loc_2.selectable = false;
			_loc_2.text = "Games Today";
			_loc_2.setTextFormat(_loc_1);
			addChild(_loc_2);
			if(g.user.access > 0)
			{
				_loc_2 = new TextField();
				_loc_2.x = 3;
				_loc_2.y = 21;
				_loc_2.width = 190;
				_loc_2.height = 22;
				_loc_2.text = "Rating at login";
				_loc_2.setTextFormat(_loc_1);
				addChild(_loc_2);
				_loc_2 = new TextField();
				_loc_2.x = 3;
				_loc_2.y = 39;
				_loc_2.width = 190;
				_loc_2.height = 22;
				_loc_2.text = "Current Rating";
				_loc_2.setTextFormat(_loc_1);
				addChild(_loc_2);
			}
			else
			{
				_login_box = new WhiteBox();
				_login_box.x = 0;
				_login_box.y = 45;
				_login_box.width = 190;
				_login_box.height = 20;
				_loc_4 = 11388412;
				_loc_5 = new Color();
				_loc_5.setTint(_loc_4, 0.80);
				_login_box.transform.colorTransform = _loc_5;
				addChild(_login_box);
				EventManager.add(_login_box, MouseEvent.CLICK, on_login);
				_loc_1 = new TextFormat();
				_loc_1.color = 16777215;
				_loc_1.bold = true;
				_loc_1.align = "center";
				_loc_1.font = "_sans";
				_loc_2 = new TextField();
				_loc_2.width = 190;
				_loc_2.height = 20;
				_loc_2.x = 0;
				_loc_2.y = 45;
				_loc_2.text = "Login / Register";
				_loc_2.selectable = false;
				_loc_2.mouseEnabled = false;
				_loc_2.setTextFormat(_loc_1);
				addChild(_loc_2);
			}
			var _loc_3:TextFormat = new TextFormat();
			_loc_3.align = "right";
			_loc_3.font = "_sans";
			_games_today = new TextField();
			_games_today.defaultTextFormat = _loc_3;
			_games_today.text = String(g.user.gamesToday);
			_games_today.x = 0;
			_games_today.y = 3;
			_games_today.width = 186;
			_games_today.height = 22;
			_games_today.selectable = false;
			addChild(_games_today);
			if(g.user.access > 0)
			{
				_login_rating = new TextField();
				_login_rating.defaultTextFormat = _loc_3;
				_login_rating.text = g.user.login_rating_display;
				_login_rating.x = 0;
				_login_rating.y = 21;
				_login_rating.width = 186;
				_login_rating.height = 22;
				_login_rating.selectable = false;
				addChild(_login_rating);
				_current_rating = new TextField();
				_current_rating.defaultTextFormat = _loc_3;
				_current_rating.text = g.user.current_rating_display;
				_current_rating.x = 0;
				_current_rating.y = 39;
				_current_rating.width = 186;
				_current_rating.height = 22;
				_current_rating.selectable = false;
				addChild(_current_rating);
			}
		}

		public function set games_today(param1:uint) : void
		{
			_games_today.text = String(param1);
		}

		public function set rating(param1:String) : void
		{
			this.current_rating = param1;
		}

		public function set current_rating(param1:String) : void
		{
			if(param1 == "")
			{
				_current_rating.text = g.user.current_rating_display;
			}
			else
			{
				_current_rating.text = param1;
			}
		}

		public function set login_rating(param1:String) : void
		{
			if(param1 == "")
			{
				_login_rating.text = g.user.login_rating_display;
			}
			else
			{
				_login_rating.text = param1;
			}
		}

		private function on_login(param1:MouseEvent) : void
		{
			navigateToURL(new URLRequest("http://" + g.host + "/user/login.php"), "_self");
		}

		public function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.remove(_login_box, MouseEvent.CLICK, on_login);
		}
	}
}
package Lobby
{
	import Misc.*;
	import com.electrotank.electroserver4.esobject.*;
	import fl.controls.*;
	import fl.data.*;
	import flash.events.*;
	import flash.text.*;
	import flash.ui.*;

	public class Userlist extends List
	{
		public static var class_name:* = "Lobby.Userlist";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		private var users:Array;
		private var guests:Array;
		private var myContextMenu:ContextMenu;
		private var item_statistics:ContextMenuItem;
		private var item_status:ContextMenuItem;
		private var item_kick:ContextMenuItem;

		public function Userlist()
		{
			super();
			var _loc_2:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_2;
			instance_number = instance_number_counter;
			doubleClickEnabled = true;
			users = new Array();
			guests = new Array();
			setStyle("cellRenderer", UserListRenderer);
			myContextMenu = new ContextMenu();
			myContextMenu.hideBuiltInItems();
			item_statistics = new ContextMenuItem("Statistics");
			EventManager.add(item_statistics, ContextMenuEvent.MENU_ITEM_SELECT, on_context_select_item);
			myContextMenu.customItems.push(item_statistics);
			this.contextMenu = g.user.access >= 100 && g.user.access >= 100 && myContextMenu;
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
		}

		private function on_context_select_item(param1:ContextMenuEvent) : void
		{
			var _loc_3:TextField = null;
			var _loc_4:Whois = null;
			var _loc_5:Status = null;
			var _loc_6:EsObject = null;
			var _loc_2:String = param1.target.caption;
			_loc_3 = TextField(param1.mouseTarget);
			if(_loc_3.text != "Guests")
			{
				switch(_loc_2)
				{
				case "Statistics":
					_loc_4 = new Whois(_loc_3.text);
					g.scene.getScene().addChild(_loc_4);
					break;
				case "Status":
					_loc_5 = new Status(_loc_3.text);
					g.scene.getScene().addChild(_loc_5);
					break;
				case "Kick from room":
					_loc_6 = new EsObject();
					_loc_6.setString("user", _loc_3.text);
					_loc_6.setInteger("zone_id", g.server.toZoneId(g.activeZoneName));
					_loc_6.setInteger("room_id", g.server.toRoomId(g.activeZoneName, g.activeRoomName));
					_loc_6.setString("reason", "I have no reason");
					g.server.esServerPlugin(g.auxiliary, "KickRoom", _loc_6);
					break;
				default:
					break;
				}
			}
		}

		public function addUser(param1:String, param2:String, param3:Boolean = false) : void
		{
			var _loc_5:Object = null;
			if(param1 == null || param1.length <= 0)
			{
				return;
			}
			var _loc_4:Object = findUser(param1);
			if(_loc_4 != null)
			{
				_loc_4.rating = rating_to_string(Number(param2));
				_loc_4.away = param3;
				return;
			}
			if(findGuest(param1) != null)
			{
				return;
			}
			if(param1.indexOf("Guest") != 0)
			{
				_loc_5 = new Object();
				_loc_5.name = param1;
				_loc_5.rating = rating_to_string(Number(param2));
				_loc_5.away = param3;
				users.push(_loc_5);
			}
			else
			{
				guests.push(param1);
			}
			update();
		}

		public function removeUser(param1:String) : void
		{
			if(param1 == null || param1.length <= 0)
			{
				return;
			}
			var _loc_2:int = findUserIndex(param1);
			if(_loc_2 >= 0)
			{
				users.splice(_loc_2, 1);
				update();
				return;
			}
			_loc_2 = findGuestIndex(param1);
			if(_loc_2 >= 0)
			{
				guests.splice(_loc_2, 1);
				update();
			}
		}

		public function setRating(param1:String, param2:Number) : void
		{
			if(param1 == null || param1.length <= 0)
			{
				return;
			}
			var _loc_3:Object = findUser(param1);
			if(_loc_3 != null)
			{
				_loc_3.rating = rating_to_string(param2);
				update();
			}
		}

		public function setAway(param1:String, param2:Boolean) : void
		{
			if(param1 == null || param1.length <= 0)
			{
				return;
			}
			var _loc_3:Object = findUser(param1);
			if(_loc_3 != null)
			{
				_loc_3.away = param2;
				update();
			}
		}

		public function clear() : void
		{
			users = new Array();
			guests = new Array();
			update();
		}

		public function getSelectedUser() : String
		{
			return selectedItem != null ? selectedItem.name : null;
		}

		private function update() : void
		{
			var _loc_4:uint = 0;
			var _loc_1:Number = this.verticalScrollPosition;
			users.sortOn("name", Array.CASEINSENSITIVE);
			var _loc_2:String = getSelectedUser();
			var _loc_3:int = findUserIndex(_loc_2);
			if(guests.length > 0)
			{
				dataProvider = new DataProvider(users.concat([{name:"Guests", rating:guests.length}]));
			}
			else
			{
				dataProvider = new DataProvider(users);
			}
			this.verticalScrollPosition = _loc_1;
			if(_loc_2 != "")
			{
				_loc_4 = 0;
				while(_loc_4 < users.length)
				{
					if(users[_loc_4].name == _loc_2)
					{
						this.selectedIndex = _loc_4;
					}
					_loc_4 = _loc_4 + 1;
				}
			}
		}

		private function findUser(param1:String) : Object
		{
			var _loc_2:uint = 0;
			while(_loc_2 < users.length)
			{
				if(users[_loc_2].name == param1)
				{
					return users[_loc_2];
				}
				_loc_2 = _loc_2 + 1;
			}
			return null;
		}

		private function findUserIndex(param1:String) : int
		{
			var _loc_2:uint = 0;
			while(_loc_2 < users.length)
			{
				if(users[_loc_2].name == param1)
				{
					return _loc_2;
				}
				_loc_2 = _loc_2 + 1;
			}
			return -1;
		}

		private function findGuest(param1:String) : String
		{
			var _loc_2:uint = 0;
			while(_loc_2 < guests.length)
			{
				if(guests[_loc_2] == param1)
				{
					return guests[_loc_2];
				}
				_loc_2 = _loc_2 + 1;
			}
			return null;
		}

		private function findGuestIndex(param1:String) : int
		{
			var _loc_2:uint = 0;
			while(_loc_2 < guests.length)
			{
				if(guests[_loc_2] == param1)
				{
					return _loc_2;
				}
				_loc_2 = _loc_2 + 1;
			}
			return -1;
		}

		private function rating_to_string(param1:Number) : String
		{
			if(param1 <= 0)
			{
				return "None";
			}
			return String(Math.round(param1));
		}

		public function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.remove(item_statistics, ContextMenuEvent.MENU_ITEM_SELECT, on_context_select_item);
			if(item_status)
			{
				EventManager.remove(item_status, ContextMenuEvent.MENU_ITEM_SELECT, on_context_select_item);
			}
			if(item_kick)
			{
				EventManager.remove(item_kick, ContextMenuEvent.MENU_ITEM_SELECT, on_context_select_item);
			}
		}
	}
}
package Lobby
{
	import fl.controls.listClasses.*;
	import fl.core.*;
	import flash.display.*;
	import flash.events.*;
	import flash.geom.*;
	import flash.text.*;

	public class UserListRenderer extends UIComponent implements ICellRenderer
	{
		protected var _selected:Boolean;
		protected var _listData:ListData;
		protected var _data:Object;

		public function UserListRenderer() : void
		{
			super();
			focusEnabled = true;
		}

		override public function setSize(param1:Number, param2:Number) : void
		{
			super.setSize(param1, param2);
		}

		public function get listData() : ListData
		{
			return _listData;
		}

		public function set listData(param1:ListData) : void
		{
			_listData = param1;
		}

		public function get data() : Object
		{
			return _data;
		}

		public function set data(param1:Object) : void
		{
			_data = param1;
		}

		public function get selected() : Boolean
		{
			return _selected;
		}

		public function set selected(param1:Boolean) : void
		{
			_selected = param1;
			drawLayout();
		}

		protected function toggleSelected(param1:MouseEvent) : void
		{
			_selected = !_selected;
		}

		public function setMouseState(param1:String) : void
		{
		}

		protected function drawLayout() : void
		{
			var _loc_1:Array = null;
			var _loc_4:Matrix = null;
			var _loc_5:TextField = null;
			var _loc_6:TextField = null;
			var _loc_7:TextFormat = null;
			var _loc_2:Array = [1, 1, 1, 1, 1];
			var _loc_3:Array = [0, 1, 127, 224, 255];
			if(_data.name.length > 0)
			{
				graphics.clear();
				if(_selected)
				{
					_loc_1 = [0, 15663086, 13434828, 15663086, 0];
					_loc_4 = new Matrix();
					_loc_4.createGradientBox(this.width, this.height, Math.PI / 2, 0, 0);
					this.graphics.beginGradientFill(GradientType.LINEAR, _loc_1, _loc_2, _loc_3, _loc_4, SpreadMethod.PAD);
					this.graphics.drawRect(1, 0, this.width - 1, this.height);
					this.graphics.endFill();
				}
				if(numChildren <= 0)
				{
					_loc_5 = new TextField();
					_loc_6 = new TextField();
					var _loc_8:Boolean = false;
					_loc_6.selectable = _loc_8;
					_loc_5.selectable = _loc_8;
					var _loc_8:Boolean = true;
					_loc_6.mouseEnabled = _loc_8;
					_loc_5.mouseEnabled = _loc_8;
					var _loc_8:* = this.width;
					_loc_6.width = _loc_8;
					_loc_5.width = _loc_8;
					_loc_5.doubleClickEnabled = true;
					_loc_7 = new TextFormat();
					_loc_7.align = "right";
					_loc_7.font = "_sans";
					_loc_6.defaultTextFormat = _loc_7;
					_loc_7 = new TextFormat();
					_loc_7.align = "left";
					_loc_7.font = "_sans";
					_loc_5.defaultTextFormat = _loc_7;
					addChildAt(_loc_6, 0);
					addChildAt(_loc_5, 1);
				}
				else
				{
					_loc_6 = TextField(getChildAt(0));
					_loc_5 = TextField(getChildAt(1));
				}
				_loc_5.x = 2;
				_loc_5.text = _data.name;
				_loc_6.text = _data.rating;
				_loc_7 = new TextFormat();
				_loc_7.font = "_sans";
				if(_data.away)
				{
					_loc_7.color = 12303291;
				}
				_loc_5.setTextFormat(_loc_7);
				_loc_7 = new TextFormat();
				_loc_7.font = "_sans";
				if(_data.away)
				{
					_loc_7.color = 12303291;
				}
				_loc_7.align = "right";
				_loc_6.setTextFormat(_loc_7);
			}
			else
			{
				this.visible = false;
			}
		}
	}
}
package Misc
{
	import com.adobe.utils.*;
	import com.electrotank.electroserver4.esobject.*;
	import flash.system.*;
	import flash.utils.*;
	import net.theyak.chat.*;
	import net.theyak.util.*;

	public class Chat extends Chat
	{
		private var floodCount:uint = 0;
		private var languageCount:uint = 0;
		public var flood_mute:Number = 0;

		public function Chat()
		{
			super();
			registerCommand("version", "version", "Display game and Flash version information");
			registerCommand("credits", "credits", "hidden");
			registerCommand("latency", "latency", "Show round trip time of message from you to server");
			registerCommand("away", "away", "Toggle your away status. Users marked away show up in grey in the userlist");
			registerCommand("whisper", "whisper", "hidden");
			registerCommand("msg", "whisper", "hidden");
			registerCommand("w", "whisper", "hidden");
			registerCommand("logout", "logout", "hidden");
			registerCommand("stats", "whois", "<username> Display information about user - same as double click on username");
			registerCommand("whois", "whois", "hidden");
			registerCommand("uwho", "whois", "hidden");
			registerCommand("debug", "debug");
			registerCommand("lastgame", "lastGame");
			registerCommand("displayevents", "display_events", "Debugging tool. Copy output to forum message");
			registerCommand("ping", "user_ping", "<username> Calculate time it takes a message to reach a user and back");
			registerCommand("history", "history", "Display information about previous games");
			registerCommand("replay", "replay", "Replay the same type of game as you last created this session. ");
			if(g.user.access >= 255)
			{
				registerCommand("listrooms", "listRooms", "List all rooms you are in");
				registerCommand("listzones", "listZones", "List all zones on server");
				registerCommand("listroomsinzone", "listRoomsInZone", "[zonename] List all rooms in zone");
				registerCommand("kick", "kick", "Kick user - no real point in this since they can just refresh");
				registerCommand("broadcast", "broadcast", "Sends a message to all users on server in chat");
				registerCommand("system", "system", "Sends a message to all users on server with an alert window");
				registerCommand("alert", "alert", "Sends a message to the alert window");
				registerCommand("palert", "palert", "<username> <message> Send alert to user");
				registerCommand("nogames", "nogames", "Toggle ability for users to create games");
				registerCommand("serverstats", "server_stats", "Show zones, rooms, and users in rooms on server");
				registerCommand("gamestats", "game_stats", "Show game statistics");
				registerCommand("userinfo", "user_info", "Show information of remote user");
				registerCommand("emptygame", "empty_game", "Empty and destroy a game");
			}
		}

		public function display_events(param1:Object) : void
		{
			g.chat.noticeEvent(EventManager.toString());
		}

		public function version(param1:Object) : void
		{
			noticeEvent("FTW Version: " + g.version);
			noticeEvent("Flash Version: " + Capabilities.version);
			if(g.user.access >= 255)
			{
				noticeEvent("Memory usage: " + System.totalMemory + " Difference from start: " + (System.totalMemory - g.initialMemoryUsage));
			}
		}

		public function replay(param1:Object) : void
		{
			if(g.scene.activeScene != "Lobby")
			{
				noticeEvent("/" + param1.command + " only available in lobby.");
				return;
			}
			if(g.replay)
			{
				g.game = g.replay.clone();
				g.game.create();
			}
			else
			{
				noticeEvent("*** You have not created any games. You must create a game before replaying a game.");
			}
		}

		public function credits(param1:Object) : void
		{
			noticeEvent("Original Concept: levans and Richard Rusczyk");
			noticeEvent("Flash 7 Version: Art of Problem Solving (AoPS Incorporated)");
			noticeEvent("Converted to Flash 9 and ES4 by Golden Tree Academy");
		}

		public function latency(param1:Object) : void
		{
			noticeEvent("Latency: " + g.server.latency + " milliseconds");
		}

		override protected function ignore(param1:Object) : Boolean
		{
			var _loc_2:Boolean = super.ignore(param1);
			Net.callServer((g.URLPath + "PHP/Ignore.php?u=") + param1.target + "&s=" + (_loc_2 ? "1" : "0"));
			return true;
		}

		public function away(param1:Object) : void
		{
			g.away = !g.away;
			g.server.setAway(g.away);
			if(g.away)
			{
				g.server.manualAway = true;
			}
			if(g.away)
			{
				noticeEvent("You are now marked away");
			}
			else
			{
				noticeEvent("You are no longer away");
			}
		}

		public function logout(param1:Object) : void
		{
			g.server.toServerPlugin(g.auxiliary, "Logout", {});
			g.server.stopPingPong();
			g.scene.message("\n\n\n\n\n\nYou have been signed out");
		}

		override public function whisper(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0 || param1.str == null || param1.str.length == 0)
			{
				noticeEvent("Usage: /whisper <username> <message>");
				return;
			}
			g.server.toServerPlugin(g.auxiliary, "W", {name:param1.target, m:StringUtil.trim(param1.str)});
			privateMessageEvent("To: " + param1.target, StringUtil.trim(param1.str));
		}

		public function history(param1:Object) : void
		{
			var _loc_2:EsObject = new EsObject();
			if(!(param1.target == null) && param1.target.length > 0 && g.user.access >= 255)
			{
				_loc_2.setString("username", param1.target);
			}
			else
			{
				_loc_2.setString("username", g.user.name);
			}
			_loc_2.setInteger("games", 6);
			g.server.esServerPlugin(g.auxiliary, "history", _loc_2);
		}

		public function user_ping(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0)
			{
				noticeEvent("Usage: /ping <username>");
				return;
			}
			var _loc_2:EsObject = new EsObject();
			_loc_2.setString("user", param1.target);
			_loc_2.setInteger("time", getTimer());
			g.server.esServerPlugin(g.auxiliary, "user_ping", _loc_2);
		}

		public function debug(param1:Object) : void
		{
			noticeEvent(g.debug ? "Debugging disabled" : "Debugging enabled");
			g.debug = !g.debug;
		}

		public function whois(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0)
			{
				noticeEvent("Usage: /" + param1.command + " <username>");
				return;
			}
			var _loc_2:Whois = new Whois(param1.target);
			g.scene.getScene().addChild(_loc_2);
		}

		public function server_stats(param1:Object) : void
		{
			g.server.toServerPlugin(g.auxiliary, "server_users", {});
		}

		public function game_stats(param1:Object) : void
		{
			g.server.toServerPlugin(g.manager, "game_stats", {});
		}

		public function user_info(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0)
			{
				noticeEvent("Usage: /userinfo <username>");
				return;
			}
			g.server.toServerPlugin(g.auxiliary, "Userinfo", {user:param1.target});
		}

		public function empty_game(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0)
			{
				noticeEvent("Usage: /emptygame <game id>");
				return;
			}
			var _loc_2:EsObject = new EsObject();
			_loc_2.setInteger("game_id", int(param1.target));
			g.server.esServerPlugin(g.manager, "empty_game", _loc_2);
		}

		public function palert(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0 || param1.str == null || param1.str.length == 0)
			{
				noticeEvent("Usage: /palert <username> <message>");
				return;
			}
			g.server.toServerPlugin(g.auxiliary, "PAlert", {name:param1.target, m:StringUtil.trim(param1.str)});
		}

		public function listRooms(param1:Object) : void
		{
			var _loc_2:Array = g.server.getRoomList();
			var _loc_3:uint = 0;
			while(_loc_3 < _loc_2.length)
			{
				noticeEvent((_loc_2[_loc_3].zonename + ":") + _loc_2[_loc_3].roomname);
				_loc_3 = _loc_3 + 1;
			}
		}

		public function kick(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0)
			{
				noticeEvent("Usage: /kick <username>");
				return;
			}
			g.server.toServerPlugin(g.auxiliary, "Kick", {user:param1.target});
		}

		public function broadcast(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0)
			{
				noticeEvent("Usage: /broadcast <message>");
				return;
			}
			g.server.toServerPlugin(g.auxiliary, "Broadcast", {message:(param1.target + " ") + StringUtil.trim(param1.str)});
		}

		public function system(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0)
			{
				noticeEvent("Usage: /system <message>");
				return;
			}
			g.server.toServerPlugin(g.auxiliary, "System", {message:(param1.target + " ") + StringUtil.trim(param1.str)});
		}

		public function alert(param1:Object) : void
		{
			if(param1.target == null || param1.target.length == 0)
			{
				noticeEvent("Usage: /alert <message>");
				return;
			}
			g.server.toServerPlugin(g.auxiliary, "Alert", {zonename:activeZoneName, message:(param1.target + " ") + StringUtil.trim(param1.str)});
		}

		public function nogames(param1:Object) : void
		{
			var _loc_2:String = null;
			if(param1.target == null || param1.target.length == 0)
			{
				g.server.toServerPlugin(g.manager, "NoGames", {reason:""});
				noticeEvent("New games now enabled");
			}
			else
			{
				_loc_2 = (param1.target + " ") + StringUtil.trim(param1.str);
				g.server.toServerPlugin(g.manager, "NoGames", {reason:_loc_2});
				g.server.toServerPlugin(g.auxiliary, "Alert", {zonename:activeZoneName, message:"* Games can not currently be created. " + _loc_2});
			}
		}

		public function lastGame(param1:Object) : void
		{
			if(g.game.id > 0)
			{
				noticeEvent("Last game this session was number " + g.game.id);
			}
			else
			{
				noticeEvent("You have not played a game this session.");
			}
		}

		override public function send(param1:String, param2:String = null, param3:String = null) : void
		{
			var _loc_4:Date = new Date();
			if(flood_mute != 0)
			{
				if(_loc_4.time <= (flood_mute + (1000 * 60) * 10))
				{
					noticeEvent("Sorry, you are currently muted");
					return;
				}
				flood_mute = 0;
			}
			if(checkFlood(4, 6))
			{
				var _loc_6:* = this.floodCount + 1;
				this.floodCount = _loc_6;
				if(floodCount > 2)
				{
					floodCount = 0;
					flood_mute = _loc_4.time;
					noticeEvent("You have been muted");
					g.server.toServerPlugin(g.auxiliary, "FloodMute", {id:g.user.id, expires:_loc_4.time + (1000 * 60) * 10});
				}
				else
				{
					noticeEvent("Whoa! Slow down!");
				}
			}
			else
			{
				var _loc_5:checkLanguage = checkLanguage(param1);
				languageCount = _loc_5;
				if(_loc_5 > 0)
				{
					g.server.toServerPlugin(g.auxiliary, "C", {msg:"Filtered: " + param1});
					if(languageCount > 2)
					{
						g.server.toServerPlugin(g.auxiliary, "Banme", {time:(60 * 24) * 7, reason:"Inappropriate language used in chat."});
					}
					else
					{
						if(languageCount == 1)
						{
							noticeEvent("Please, you have got to be more mature than that");
						}
						else
						{
							noticeEvent("Why oh why must you insist on such immature language? Next time, that's a banning.");
						}
					}
				}
				else
				{
					if(param1.length > 1)
					{
						g.server.toServerPlugin(g.auxiliary, "C", {msg:param1});
						super.send(param1, param2, param3);
					}
					else
					{
						if(param1.length <= 1)
						{
							noticeEvent("Message too short");
						}
					}
				}
			}
		}
	}
}
package Misc
{
	import flash.events.*;

	public class EventManager extends Object
	{
		private static var listeners:Array = new Array();

		final public static function exists(param1:EventDispatcher, param2:String, param3:Function) : Boolean
		{
			var _loc_4:int = listeners.length - 1;
			while(_loc_4 >= 0)
			{
				if(param1 == listeners[_loc_4].object && param2 == listeners[_loc_4].type && param3 == listeners[_loc_4].listener)
				{
					return true;
				}
				_loc_4 = _loc_4 - 1;
			}
			return false;
		}

		final public static function add(param1:EventDispatcher, param2:String, param3:Function, param4:String = null) : void
		{
			var _loc_5:Object = null;
			if(!(EventManager.exists(param1, param2, param3)))
			{
				param1.addEventListener(param2, param3);
				_loc_5 = new Object();
				_loc_5.object = param1;
				_loc_5.type = param2;
				_loc_5.listener = param3;
				_loc_5.description = param4;
				_loc_5.time = (new Date()).toString();
				EventManager.listeners.push(_loc_5);
			}
		}

		final public static function remove(param1:EventDispatcher = null, param2:String = null, param3:Function = null) : void
		{
			var _loc_4:int = listeners.length - 1;
			while(_loc_4 >= 0)
			{
				if(param1 == listeners[_loc_4].object)
				{
					if(param2 == null || param2 == EventManager.String(listeners[_loc_4].type))
					{
						if(param3 == null || listeners[_loc_4].listener == param3)
						{
							EventManager.EventDispatcher(listeners[_loc_4].object).removeEventListener(EventManager.String(listeners[_loc_4].type), listeners[_loc_4].listener);
							listeners.splice(_loc_4, 1);
						}
					}
				}
				_loc_4 = _loc_4 - 1;
			}
		}

		final public static function toString(param1:String = null) : String
		{
			var _loc_2:String = "";
			var _loc_3:int = listeners.length - 1;
			while(_loc_3 >= 0)
			{
				if(param1 == null || (EventManager.String(listeners[_loc_3].category).substr(0, param1.length)) == param1)
				{
					_loc_2 = _loc_2 + (_loc_3 + ": ");
					_loc_2 = _loc_2 + (listeners[_loc_3].time + "\t");
					_loc_2 = _loc_2 + (listeners[_loc_3].object + "\t\t");
					_loc_2 = _loc_2 + listeners[_loc_3].type;
					if(listeners[_loc_3].description != null)
					{
						_loc_2 = _loc_2 + "\t\t" + listeners[_loc_3].description;
					}
					_loc_2 = _loc_2 + "\n";
				}
				_loc_3 = _loc_3 - 1;
			}
			return _loc_2;
		}

		public function EventManager()
		{
			super();
		}
	}
}
package Misc
{
	import Scene.*;
	import Type.*;
	import com.adobe.utils.*;
	import flash.display.*;
	import flash.system.*;
	import net.theyak.util.*;

	public class g extends Object
	{
		public static var version:String = "2018-03-28 4:00pm";
		public static var auxiliary:String = "Auxiliary";
		public static var manager:String = "Manager";
		public static var scene:Manager;
		public static var host:String = "www.artofproblemsolving.com";
		public static var remote:String = "www.artofproblemsolving.com";
		public static var root:String = "/m/ftw/";
		public static var URLPath:String = "http://" + host + root;
		public static var phpPath:String = URLPath + "PHP/";
		public static var latexPath:String = "http://www.artofproblemsolving.com/Edutainment/as3/GameImages/";
		public static var stageWidth:int;
		public static var stageHeight:int;
		public static var port:int = 9898;
		public static var ip:String = "127.0.0.1";
		public static var user:User = new User();
		public static var game:FTW = new FTW();
		public static var replay:FTW = null;
		private static var defaultZoneName:String = "FTW";
		private static var _activeZoneName:String = g.defaultZoneName;
		private static var _activeRoomName:String = "Lobby";
		public static var server:Server;
		public static var chat:Chat;
		public static var initialMemoryUsage:uint;
		public static var away:Boolean = false;
		public static var debug:Boolean = true;

		final public static function set activeZoneName(param1:String) : void
		{
			g._activeZoneName = param1;
			g.chat.activeZoneName = param1;
		}

		final public static function set activeRoomName(param1:String) : void
		{
			g._activeRoomName = param1;
			g.chat.activeRoomName = param1;
		}

		final public static function get activeZoneName() : String
		{
			return g._activeZoneName;
		}

		final public static function get activeRoomName() : String
		{
			return g._activeRoomName;
		}

		final public static function debuglog(param1:String) : void
		{
			g.chat;
			if(g.chat && g.debug)
			{
				g.chat.noticeEvent(param1);
			}
		}

		final public static function sendToLogFile(param1:String) : void
		{
			Net.callServer((g.phpPath + "log.php?log=") + param1);
		}

		final public static function clean_answer(param1:String) : String
		{
			param1 = StringUtil.trim(param1);
			param1 = param1.split("$").join("");
			param1 = g.convert_fraction(param1);
			param1 = param1.split("\\").join("");
			param1 = param1.split("{").join("");
			param1 = param1.split("}").join("");
			param1 = param1.split(",").join("");
			param1 = (param1.split(" ")).join("");
			if(param1.charAt(0) == ".")
			{
				param1 = "0" + param1;
			}
			return param1.toLowerCase();
		}

		final public static function convert_fraction(param1:String)
		{
			var _loc_2:Array = null;
			var _loc_3:RegExp = null;
			var _loc_4:String = "";
			param1 = param1.toLowerCase();
			var _loc_5:int = param1.indexOf("\\frac");
			if(_loc_5 < 0)
			{
				_loc_5 = param1.indexOf("\\dfrac");
			}
			if(_loc_5 > -1)
			{
				if(_loc_5 > 0)
				{
					_loc_4 = param1.substr(0, _loc_5);
					_loc_4 = StringUtil.trim(_loc_4);
					if(_loc_4.length > 1)
					{
						_loc_4 = _loc_4 + " ";
					}
					param1 = param1.substr(_loc_5);
					param1 = StringUtil.trim(param1);
				}
				_loc_3 = new RegExp("\\\\[d]?frac[\\s]?(\\d)(\\d)");
				_loc_2 = param1.match(_loc_3);
				if(!(_loc_2 == null) && _loc_2.length == 3)
				{
					return (_loc_4 + _loc_2[1]) + "/" + _loc_2[2];
				}
				_loc_3 = new RegExp("\\\\[d]?frac[\\s]?\\{([^\\}]*)\\}\\{([^\\}]*)\\}");
				_loc_2 = param1.match(_loc_3);
				if(!(_loc_2 == null) && _loc_2.length == 3)
				{
					return (_loc_4 + _loc_2[1]) + "/" + _loc_2[2];
				}
				_loc_3 = new RegExp("\\\\[d]?frac[\\s]?(\\d)\\{([^\\}]*)\\}");
				_loc_2 = param1.match(_loc_3);
				if(!(_loc_2 == null) && _loc_2.length == 3)
				{
					return (_loc_4 + _loc_2[1]) + "/" + _loc_2[2];
				}
				_loc_3 = new RegExp("\\\\[d]?frac[\\s]?\\{([^\\}]*)\\}(\\d)");
				_loc_2 = param1.match(_loc_3);
				if(!(_loc_2 == null) && _loc_2.length == 3)
				{
					return (_loc_4 + _loc_2[1]) + "/" + _loc_2[2];
				}
			}
			return param1;
		}

		public function g(param1:MovieClip)
		{
			super();
			server = new Server();
			initialMemoryUsage = System.totalMemory;
			g.stageWidth = param1.stage.stageWidth;
			g.stageHeight = param1.stage.stageHeight;
		}
	}
}
package Misc
{
	import Game.*;
	import Scene.*;
	import com.electrotank.electroserver4.esobject.*;
	import flash.system.*;
	import flash.utils.*;
	import net.theyak.server.*;
	import net.theyak.ui.*;
	import net.theyak.util.*;

	public class Server extends ElectroServer4
	{
		private var _pingTime:int;
		private var _latency:Number;
		private var _pingInterval:uint;
		private var _muteInterval:uint = 0;
		public var manualAway:Boolean = false;

		public function Server()
		{
			super();
			addEventListener("connectionClosed", "connectionClosed", this);
			addEventListener("pluginMessage", "pluginMessageEvent", this);
			addEventListener("UserVariableUpdated", "userVariableUpdatedEvent", this);
			addEventListener("UserVariableCreated", "userVariableCreatedEvent", this);
			addEventListener("UserVariableDeleted", "userVariableDeletedEvent", this);
		}

		public function toServerPlugin(param1:String, param2:String, param3:Object = null, param4:Boolean = true) : void
		{
			super.serverPlugin(param1, param2, param3, param4);
		}

		public function pluginMessageEvent(param1:Object) : void
		{
			var _loc_3:String = null;
			var _loc_2:EsObject = new EsObject();
			switch(param1.response.Action)
			{
			case "Pong":
				pong();
				break;
			case "System":
				system(param1.response.m);
				break;
			case "Error":
				system(param1.response.text);
				break;
			case "Mute":
				mute(param1.response.time, param1.response.reason);
				ban(param1.response.time, param1.response.reason);
				break;
			case "Ban":
				ban(param1.response.time, param1.response.reason);
				break;
			case "Unmute":
				unmute();
				break;
			case "History":
				history(param1.response.history);
				break;
			case "Userinfo":
				user_info(param1.response.user);
				break;
			case "on_ftw":
				on_ftw(param1.response.id, param1.response.tpp, param1.response.pc, param1.response.type, param1.response.zone, param1.response.room);
				break;
			case "user_ping":
				_loc_2 = new EsObject();
				_loc_2.setString("user", param1.response.user);
				_loc_2.setInteger("time", int(param1.response.time));
				g.server.esServerPlugin(g.auxiliary, "user_pong", _loc_2);
				break;
			case "user_pong":
				_loc_3 = String(getTimer() - param1.response.time);
				g.chat.noticeEvent("Ping response from " + param1.response.user + " " + _loc_3 + " milliseconds.");
				break;
			case "inc_games_today":
				var _loc_4:* = g.user;
				var _loc_5:* = _loc_4.gamesToday + 1;
				_loc_4.gamesToday = _loc_5;
				break;
			case "leave_game":
				on_leave_game();
				break;
			default:
				break;
			}
		}

		private function on_leave_game() : void
		{
			if(g.scene.activeScene == "FTW" || g.scene.activeScene == "Countdown")
			{
				FTWBase(g.scene.getScene()).on_leave_game(null);
			}
		}

		private function on_ftw(param1:uint, param2:uint, param3:uint, param4:String, param5:String, param6:String)
		{
			g.server.leaveRoom(g.activeZoneName, g.activeRoomName);
			if(param4 == "FTW")
			{
				g.game.id = param1;
				g.game.time_per_problem = param2;
				g.game.problem_count = param3;
				g.game.type = param4;
				g.game.room_name = param6;
				g.game.zone_name = param5;
				g.activeRoomName = param6;
				g.activeZoneName = param5;
				g.scene.ftw();
			}
			else
			{
				if(param4 == "Countdown")
				{
					g.game.id = param1;
					g.game.time_per_problem = param2;
					g.game.problem_count = param3;
					g.game.type = param4;
					g.game.room_name = param6;
					g.game.zone_name = param5;
					g.activeRoomName = param6;
					g.activeZoneName = param5;
					g.scene.countdown();
				}
			}
		}

		public function on_chess(param1:Object) : void
		{
		}

		public function userVariableCreatedEvent(param1:Object) : void
		{
		}

		public function userVariableUpdatedEvent(param1:Object) : void
		{
			switch(param1.variable)
			{
			case "away":
				if(g.scene.activeScene == "Lobby")
				{
					Lobby(g.scene.getScene()).setAway(param1.username, param1.value);
				}
				break;
			case "rating":
				if(param1.username == g.user.name)
				{
					g.user.current_rating = Number(param1.value);
				}
				if(g.scene.activeScene == "Lobby")
				{
					Lobby(g.scene.getScene()).setRating(param1.username, Number(param1.value));
				}
				break;
			default:
				break;
			}
		}

		public function userVariableDeletedEvent(param1:Object) : void
		{
		}

		public function connectionClosed(param1:Object) : void
		{
			stopPingPong();
			if(this._muteInterval)
			{
				clearInterval(this._muteInterval);
			}
			g.scene.message("\n\n\n\n\n\nYou have lost connection to server.\n\nRefresh this page to attempt re-connect");
		}

		public function setAway(param1:Boolean) : void
		{
			g.away = param1;
			if(param1)
			{
				lastRequest = getTimer() - 900000;
				g.server.setUserVariable("away", "true");
			}
			else
			{
				lastRequest = getTimer();
				manualAway = false;
				g.server.setUserVariable("away", "false");
			}
		}

		private function history(param1:String) : void
		{
			var _loc_4:String = null;
			var _loc_2:Array = new Array();
			var _loc_3:Array = new Array();
			_loc_3 = param1.split("\n");
			var _loc_5:int = 0;
			while(_loc_5 < _loc_3.length)
			{
				_loc_2 = String(_loc_3[_loc_5]).split("\t");
				_loc_4 = "Game ID: " + _loc_2[0];
				_loc_4 = _loc_4 + "  Time: " + _loc_2[1] + " " + _loc_2[2];
				_loc_4 = _loc_4 + "  Score: " + _loc_2[4];
				_loc_4 = _loc_4 + "  Place: " + _loc_2[5];
				g.chat.noticeEvent(_loc_4);
				_loc_5++;
			}
		}

		private function user_info(param1:String) : void
		{
			var _loc_2:Object = new Object();
			_loc_2.user = param1;
			_loc_2.ftw = g.version;
			_loc_2.flash = Capabilities.version;
			_loc_2.mem = System.totalMemory;
			_loc_2.diff = System.totalMemory - g.initialMemoryUsage;
			g.server.toServerPlugin(g.auxiliary, "Userinfo", _loc_2, false);
		}

		private function system(param1:String) : void
		{
			var _loc_2:YakAlert = new YakAlert(param1, "System Message", "OK");
			_loc_2.center(g.scene.getScene());
			g.scene.getScene().addChild(_loc_2);
		}

		public function setMuteInterval(param1:uint) : void
		{
			this._muteInterval = setInterval(unmute, param1 * 1000);
		}

		private function mute(param1:int, param2:String) : void
		{
			var _loc_3:String = null;
		}

		private function unmute() : void
		{
			if(this._muteInterval > 0)
			{
				clearInterval(_muteInterval);
				_muteInterval = 0;
			}
			g.chat.mute = false;
			system("You are no longer muted.");
			if(g.scene.getScene() is BaseChat)
			{
				BaseChat(g.scene.getScene()).onUnmute();
			}
			g.user.muted = false;
			Net.callServer(g.URLPath + "PHP/SetCookie.php?n=__utmf&m=-60&v=12");
		}

		private function ban(param1:int, param2:String) : void
		{
		}

		public function startPingPong() : void
		{
			_pingInterval = setInterval(ping, 120000);
		}

		public function stopPingPong() : void
		{
			clearInterval(_pingInterval);
		}

		private function ping() : void
		{
			if(!g.away && lastRequest < (getTimer() - 900000))
			{
				setAway(true);
			}
			else
			{
				if(lastRequest < (getTimer() - -297152))
				{
					stopPingPong();
					g.server.leaveAllRooms();
					g.scene.message("\n\n\n\n\n\nYou have been signed out due to inactivity");
					return;
				}
				g.away;
				if(!manualAway && g.away && lastRequest > (getTimer() - 900000))
				{
					setAway(false);
				}
			}
			_pingTime = getTimer();
			esServerPlugin(g.auxiliary, "Ping", new EsObject(), false);
		}

		private function pong() : void
		{
			_latency = getTimer() - _pingTime;
		}

		public function get latency() : uint
		{
			return _latency;
		}

		public function log(param1:String) : void
		{
			var _loc_2:EsObject = new EsObject();
			_loc_2.setString("message", param1);
			esServerPlugin(g.auxiliary, "Log", _loc_2, true);
		}
	}
}
package Misc
{
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;
	import flash.text.*;
	import flash.utils.*;

	public class SmallAd extends Sprite
	{
		private var interval:uint = 0;
		private var ad:int;
		private var ads:Array;
		private var _text:TextField;

		public function SmallAd()
		{
			super();
			ads = new Array();
			var _loc_1:Object = new Object();
			_loc_1.name = "Art of Problem Solving, Volume 1: The Basics";
			_loc_1.url = "http://www.artofproblemsolving.com/Books/AoPS_B_Item.php?item_id=100";
			ads.push(_loc_1);
			_loc_1 = new Object();
			_loc_1.name = "Art of Problem Solving, Volume 1: and Beyond";
			_loc_1.url = "http://www.artofproblemsolving.com/Books/AoPS_B_Item.php?item_id=102";
			ads.push(_loc_1);
			_loc_1 = new Object();
			_loc_1.name = "Introduction to Algebra by Richard Rusczyk";
			_loc_1.url = "http://www.artofproblemsolving.com/Books/AoPS_B_Item.php?item_id=200";
			ads.push(_loc_1);
			_loc_1 = new Object();
			_loc_1.name = "Introduction to Counting and Probability by David Patrick";
			_loc_1.url = "http://www.artofproblemsolving.com/Books/AoPS_B_Item.php?item_id=202";
			ads.push(_loc_1);
			_loc_1 = new Object();
			_loc_1.name = "Introduction to Geometry by Richard Rusczyk";
			_loc_1.url = "http://www.artofproblemsolving.com/Books/AoPS_B_Item.php?item_id=204";
			ads.push(_loc_1);
			_loc_1 = new Object();
			_loc_1.name = "Introduction to Number Theory by Mathew Crawford";
			_loc_1.url = "http://www.artofproblemsolving.com/Books/AoPS_B_Item.php?item_id=206";
			ads.push(_loc_1);
			_loc_1 = new Object();
			_loc_1.name = "MATHCOUNTS books";
			_loc_1.url = "http://www.artofproblemsolving.com/Books/AoPS_B_CP_MC.php";
			ads.push(_loc_1);
			_loc_1 = new Object();
			_loc_1.name = "AMC Preparation books";
			_loc_1.url = "http://www.artofproblemsolving.com/Books/AoPS_B_CP_AMC.php";
			ads.push(_loc_1);
			addEventListener(MouseEvent.CLICK, onAdClick);
			addEventListener(Event.ADDED, startTimer);
			addEventListener(Event.REMOVED, destroy);
		}

		private function updateAd() : void
		{
			ad = Math.floor(Math.random() * ads.length);
			_text.text = ads[ad].name;
		}

		private function onAdClick(param1:Event) : void
		{
			navigateToURL(new URLRequest(ads[ad].url), "_blank");
		}

		private function startTimer(param1:Event) : void
		{
			trace("Start timer");
			updateAd();
			interval = setInterval(updateAd, 60000);
		}

		private function destroy(param1:Event) : void
		{
			trace("Destroy");
			if(interval != 0)
			{
				clearInterval(interval);
			}
			removeEventListener(MouseEvent.CLICK, onAdClick);
			removeEventListener(Event.ADDED, startTimer);
			removeEventListener(Event.REMOVED, destroy);
		}
	}
}
package Misc
{
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;
	import flash.text.*;
	import net.theyak.*;
	import net.theyak.events.*;
	import net.theyak.ui.*;

	public class Whois extends Sprite
	{
		private var _alert:YakAlert;
		private var _dialog:YakDialog;
		private var _username:String;

		public function Whois(param1:String)
		{
			var username:String = param1;
			super();
			_username = username;
			var request:URLRequest = new URLRequest((g.phpPath + "Whois.php?u=") + (escape(username).replace(new RegExp("\\+", "g"), "%2B")));
			var variables:URLLoader = new URLLoader();
			variables.dataFormat = URLLoaderDataFormat.VARIABLES;
			variables.addEventListener(Event.COMPLETE, userLoaded);
			variables.addEventListener(IOErrorEvent.IO_ERROR, userLoadedError);
			variables.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityError);
			try
			{
				variables.load(request);
			}
			catch(err:SecurityError)
			{
				error("Security error");
			}
		}

		private function round(param1:String) : String
		{
			return YakMath.round_string(param1, 0);
		}

		private function userLoaded(param1:Event) : void
		{
			var _loc_3:uint = 0;
			var _loc_4:uint = 0;
			var _loc_5:uint = 0;
			var _loc_6:uint = 0;
			var _loc_7:uint = 0;
			var _loc_2:URLLoader = URLLoader(param1.target);
			if(_loc_2.data.error)
			{
				error(_loc_2.data.error);
			}
			else
			{
				_dialog = new YakDialog("Profile for " + _username, 425, 400);
				_dialog.addEventListener("DialogEvent", onDialogClosed);
				header("For The Win", 4);
				header("Countdown", 86);
				header("Ratings", 168);
				header("Badges", 230);
				field("Played", _loc_2.data.ftw_played, 20, 24, 14483456);
				field("Year", _loc_2.data.ftw_played_year, 120, 24, 14483456);
				field("Month", _loc_2.data.ftw_played_month, 220, 24, 14483456);
				field("Week", _loc_2.data.ftw_played_week, 320, 24, 14483456);
				field("Won", _loc_2.data.ftw_won, 20, 41, 12255232);
				field("Year", _loc_2.data.ftw_won_year, 120, 41, 12255232);
				field("Month", _loc_2.data.ftw_won_month, 220, 41, 12255232);
				field("Week", _loc_2.data.ftw_won_week, 320, 41, 12255232);
				field("Rating", round(_loc_2.data.ftw_rating), 20, 58, 10027008);
				field("Year", round(_loc_2.data.ftw_rating_year), 120, 58, 10027008);
				field("Month", round(_loc_2.data.ftw_rating_month), 220, 58, 10027008);
				field("Week", round(_loc_2.data.ftw_rating_week), 320, 58, 10027008);
				field("Played", _loc_2.data.cd_played, 20, 106, 14483456);
				field("Year", _loc_2.data.cd_played_year, 120, 106, 14483456);
				field("Month", _loc_2.data.cd_played_month, 220, 106, 14483456);
				field("Week", _loc_2.data.cd_played_week, 320, 106, 14483456);
				field("Won", _loc_2.data.cd_won, 20, 123, 12255232);
				field("Year", _loc_2.data.cd_won_year, 120, 123, 12255232);
				field("Month", _loc_2.data.cd_won_month, 220, 123, 12255232);
				field("Week", _loc_2.data.cd_won_week, 320, 123, 12255232);
				field("Rating", round(_loc_2.data.cd_rating), 20, 140, 10027008);
				field("Year", round(_loc_2.data.cd_rating_year), 120, 140, 10027008);
				field("Month", round(_loc_2.data.cd_rating_month), 220, 140, 10027008);
				field("Week", round(_loc_2.data.cd_rating_week), 320, 140, 10027008);
				field("Overall", round(_loc_2.data.rating), 20, 188, 14483456);
				field("Highest", round(_loc_2.data.rating_highest), 120, 188, 14483456);
				field("Lowest", round(_loc_2.data.rating_lowest), 220, 188, 14483456);
				_loc_3 = 0;
				_loc_4 = 0;
				_loc_5 = 0;
				if(uint(_loc_2.data.rating_highest) > 2250)
				{
					_loc_5 = 5;
				}
				else
				{
					if(uint(_loc_2.data.rating_highest) > 2000)
					{
						_loc_5 = 4;
					}
					else
					{
						if(uint(_loc_2.data.rating_highest) > 1750)
						{
							_loc_5 = 3;
						}
						else
						{
							if(uint(_loc_2.data.rating_highest) > 1500)
							{
								_loc_5 = 2;
							}
							else
							{
								if(uint(_loc_2.data.rating_highest) > 1325)
								{
									_loc_5 = 1;
								}
							}
						}
					}
				}
				_loc_6 = uint(_loc_2.data.cd_played) + uint(_loc_2.data.ftw_played);
				if(_loc_6 > 1500)
				{
					_loc_4 = 5;
				}
				else
				{
					if(_loc_6 > 1000)
					{
						_loc_4 = 4;
					}
					else
					{
						if(_loc_6 > 750)
						{
							_loc_4 = 3;
						}
						else
						{
							if(_loc_6 > 350)
							{
								_loc_4 = 2;
							}
							else
							{
								if(_loc_6 > 100)
								{
									_loc_4 = 1;
								}
							}
						}
					}
				}
				_loc_7 = uint(_loc_2.data.cd_won) + uint(_loc_2.data.ftw_won);
				if(_loc_7 > 1000)
				{
					_loc_3 = 5;
				}
				else
				{
					if(_loc_7 > 750)
					{
						_loc_3 = 4;
					}
					else
					{
						if(_loc_7 > 500)
						{
							_loc_3 = 3;
						}
						else
						{
							if(_loc_7 > 225)
							{
								_loc_3 = 2;
							}
							else
							{
								if(_loc_7 > 50)
								{
									_loc_3 = 1;
								}
							}
						}
					}
				}
				stars("Games Won", new StarWon(32, 32), _loc_3, 250);
				stars("Games Played", new StarGames(32, 32), _loc_4, 285);
				stars("Highest Rating", new StarRating(32, 32), _loc_5, 320);
				_dialog.center(g.scene.getScene());
				addChild(_dialog);
			}
		}

		private function stars(param1:String, param2:BitmapData, param3:uint, param4:uint)
		{
			var _loc_8:Bitmap = null;
			var _loc_5:TextField = new TextField();
			var _loc_6:TextFormat = new TextFormat();
			_loc_5.width = 130;
			_loc_5.text = param1;
			_loc_5.y = param4 + 6;
			_loc_6.align = "right";
			_loc_6.size = 14;
			_loc_6.bold = true;
			_loc_6.font = "_sans";
			_loc_5.setTextFormat(_loc_6);
			_dialog.canvas.addChild(_loc_5);
			var _loc_7:* = 135;
			while(param3 > 0)
			{
				_loc_8 = new Bitmap(param2);
				_loc_8.x = _loc_7;
				_loc_8.y = param4;
				_dialog.canvas.addChild(_loc_8);
				_loc_7 = _loc_7 + 36;
				param3 = param3 - 1;
			}
		}

		private function header(param1:String, param2:uint) : void
		{
			var _loc_3:TextField = new TextField();
			_loc_3.text = param1;
			_loc_3.y = param2;
			_loc_3.x = 4;
			_loc_3.width = 300;
			var _loc_4:TextFormat = new TextFormat();
			_loc_4.font = "_sans";
			_loc_4.size = 16;
			_loc_4.align = "left";
			_loc_4.bold = true;
			_loc_3.setTextFormat(_loc_4);
			_dialog.canvas.addChild(_loc_3);
		}

		private function field(param1:String, param2:String, param3:uint, param4:uint, param5:uint = 0)
		{
			var _loc_6:TextField = new TextField();
			var _loc_7:TextFormat = new TextFormat();
			var _loc_8:TextFormat = new TextFormat();
			_loc_6.x = param3;
			_loc_6.y = param4;
			_loc_6.width = 90;
			if(param2 != null)
			{
				_loc_6.text = " " + param1 + ": " + param2;
			}
			else
			{
				_loc_6.text = " " + param1 + ": ";
			}
			_loc_7.font = "_sans";
			_loc_7.size = 12;
			_loc_7.bold = true;
			_loc_7.color = param5;
			_loc_8.font = "_sans";
			_loc_8.color = param5;
			_loc_8.bold = false;
			_loc_6.setTextFormat(_loc_8, param1.length + 2, _loc_6.text.length);
			_loc_6.setTextFormat(_loc_7, 0, param1.length + 2);
			_loc_6.selectable = false;
			_dialog.canvas.addChild(_loc_6);
		}

		private function userLoadedError(param1:Event) : void
		{
			error("Load Error");
		}

		private function securityError(param1:Event) : void
		{
			error("A security error");
		}

		private function error(param1:String) : void
		{
			_alert = new YakAlert(param1, "Error", "OK");
			_alert.center(g.scene.getScene());
			_alert.addEventListener("AlertEvent", onAlertButton);
			_alert.addEventListener("DialogEvent", onAlertClosed);
			g.scene.getScene().addChild(_alert);
		}

		private function onAlertClosed(param1:DialogEvent) : void
		{
			if(param1.action == "close")
			{
				_alert.removeEventListener("AlertEvent", onAlertButton);
				_alert.removeEventListener("DialogEvent", onAlertClosed);
				close(param1);
			}
		}

		private function onDialogClosed(param1:DialogEvent) : void
		{
			if(param1.action == "close")
			{
				_dialog.removeEventListener("DialogEvent", onDialogClosed);
				close(param1);
			}
		}

		private function onAlertButton(param1:AlertEvent) : void
		{
			_alert.removeEventListener("AlertEvent", onAlertButton);
			_alert.removeEventListener("DialogEvent", onAlertClosed);
			close(param1);
		}

		private function close(param1:Event) : void
		{
			parent.removeChild(this);
		}
	}
}
package Scene
{
	import Misc.*;
	import com.adobe.utils.*;
	import fl.controls.*;
	import fl.events.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import flash.ui.*;
	import flash.utils.*;
	import net.theyak.util.*;

	public class BaseChat extends Sprite
	{
		public static var class_name:* = "Scene.BaseChat";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		protected var _tOutput:TextArea;
		public var _tInput:TextInput;
		protected var _tAlert:TextArea;
		protected var _cbPhrases:ComboBox;
		protected var _btnPhrases:Button;
		protected var _muted:Boolean;
		protected var _lastMessage:int;

		public function BaseChat()
		{
			super();
			var _loc_3:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_3;
			instance_number = instance_number_counter;
			var _loc_1:TextFormat = new TextFormat();
			_loc_1.size = g.user.font_size;
			_loc_1.font = g.user.font;
			_loc_1.leading = g.user.leading;
			_tOutput = new TextArea();
			_tOutput.setSize(501, 129);
			_tOutput.x = 10;
			_tOutput.y = 379;
			_tOutput.editable = false;
			_tOutput.setStyle("textFormat", _loc_1);
			addChild(_tOutput);
			_tInput = new TextInput();
			_tInput.setSize(501, 22);
			_tInput.x = 10;
			_tInput.y = 507.90;
			_tInput.maxChars = 256;
			addChild(_tInput);
			_cbPhrases = new ComboBox();
			_cbPhrases.x = 10;
			_cbPhrases.y = 507.90;
			_cbPhrases.setSize(451, 22);
			_cbPhrases.restrict = "";
			_cbPhrases.addItem({label:"", data:0});
			_cbPhrases.addItem({label:"Hello", data:1});
			_cbPhrases.addItem({label:"Game anyone?", data:2});
			_cbPhrases.addItem({label:"Countdown anyone?", data:3});
			_cbPhrases.addItem({label:"Yes", data:4});
			_cbPhrases.addItem({label:"No", data:5});
			_cbPhrases.addItem({label:"I'll play", data:6});
			_cbPhrases.addItem({label:"Bye", data:7});
			_cbPhrases.addItem({label:"Good game", data:8});
			_cbPhrases.addItem({label:"Sorry, I'm muted", data:9});
			_cbPhrases.addItem({label:"/version", data:10});
			_cbPhrases.addItem({label:"/history", data:11});
			_cbPhrases.addItem({label:"/clearchat", data:12});
			addChild(_cbPhrases);
			_cbPhrases.visible = false;
			_cbPhrases.enabled = false;
			_btnPhrases = new Button();
			_btnPhrases.emphasized = true;
			_btnPhrases.label = "Send";
			_btnPhrases.visible = false;
			_btnPhrases.enabled = false;
			_btnPhrases.setSize(50, 20);
			_btnPhrases.x = 461;
			_btnPhrases.y = 508.90;
			EventManager.add(_btnPhrases, MouseEvent.CLICK, sendText, "BaseChat._btnPhrases");
			addChild(_btnPhrases);
			_tAlert = new TextArea();
			_tAlert.setSize(190, 132);
			_tAlert.x = 520;
			_tAlert.y = 398;
			_tAlert.editable = false;
			_tAlert.setStyle("textFormat", _loc_1);
			addChild(_tAlert);
		}

		public function refresh_userlist() : void
		{
		}

		protected function do_private_message(param1:String) : void
		{
		}

		private function sendText(param1:MouseEvent) : void
		{
			var _loc_2:String = null;
			if(_muted)
			{
				if(_lastMessage < (getTimer() - 20000))
				{
					_loc_2 = StringUtil.trim(_cbPhrases.text);
				}
				else
				{
					return;
				}
				_lastMessage = getTimer();
				_cbPhrases.selectedIndex = 0;
				_cbPhrases.text = "";
			}
			else
			{
				_loc_2 = StringUtil.trim(_tInput.text);
				_tInput.text = "";
			}
			if(_loc_2.length > 1)
			{
				g.chat.forceSend(_loc_2);
			}
		}

		private function on_chat_key(param1:KeyboardEvent) : void
		{
			var _loc_2:String = null;
			var _loc_3:Array = null;
			var _loc_4:uint = 0;
			if(_muted == false)
			{
				if(param1.ctrlKey)
				{
					if(param1.charCode == Keyboard.ENTER)
					{
						_loc_2 = StringEx.remove_duplicates(StringEx.toAscii(StringUtil.trim(_tInput.text)), 5);
						if(_loc_2.length > 0)
						{
							do_private_message(_loc_2);
						}
						_tInput.text = "";
					}
					else
					{
						if(param1.keyCode == Keyboard.HOME)
						{
							_tOutput.verticalScrollPosition = 0;
							_tOutput.invalidate();
						}
						else
						{
							if(param1.keyCode == Keyboard.END)
							{
								_tOutput.verticalScrollPosition = _tOutput.maxVerticalScrollPosition;
								_tOutput.invalidate();
							}
							else
							{
								if(param1.keyCode == Keyboard.UP)
								{
									_tInput.text = g.chat.getPrevious();
									_tInput.setSelection(_tInput.text.length, _tInput.text.length);
								}
								else
								{
									if(param1.keyCode == Keyboard.DOWN)
									{
										_tInput.text = g.chat.getNext();
										_tInput.setSelection(_tInput.text.length, _tInput.text.length);
									}
									else
									{
										if(param1.keyCode == Keyboard.PAGE_DOWN)
										{
											_tInput.text = "";
										}
										else
										{
											if(param1.keyCode == Keyboard.RIGHT)
											{
												_tInput.text = g.chat.completeName(_tInput.text, g.activeZoneName, g.activeRoomName);
												_tInput.setSelection(_tInput.text.length, _tInput.text.length);
											}
											else
											{
											}
										}
									}
								}
							}
						}
					}
				}
				else
				{
					if(param1.charCode == Keyboard.ENTER)
					{
						_loc_2 = param1.keyCode == Keyboard.LEFT && g.user.access >= 255 && StringEx.remove_duplicates(StringEx.toAscii(StringUtil.trim(_tInput.text)), 5);
						g.chat.send(_loc_2);
						_tInput.text = "";
					}
				}
			}
		}

		public function on_private_message_event(param1:Object) : void
		{
			g.chat.privateMessageEvent(param1.from, param1.message);
		}

		public function on_public_message_event(param1:Object) : void
		{
			g.chat.publicMessageEvent(param1.name, param1.message, param1.zonename, param1.roomname);
		}

		public function onZoneList(param1:Object) : void
		{
			g.chat.noticeEvent(param1.zones);
		}

		public function onMute(param1:Boolean = true) : void
		{
			_muted = param1;
			_tInput.enabled = !param1;
			_tInput.visible = !param1;
			_cbPhrases.visible = param1;
			_cbPhrases.enabled = param1;
			_btnPhrases.visible = param1;
			_btnPhrases.enabled = param1;
			_lastMessage = getTimer() - 60000;
		}

		public function onUnmute() : void
		{
			_muted = false;
			_tInput.visible = true;
			_tInput.enabled = true;
			_tInput.setFocus();
			_cbPhrases.visible = false;
			_cbPhrases.enabled = false;
			_btnPhrases.visible = false;
			_btnPhrases.enabled = false;
		}

		public function onRoomsInZone(param1:Object) : void
		{
			g.chat.noticeEvent("Rooms in zone " + param1.zonename);
			g.chat.noticeEvent(param1.rooms);
		}

		public function on_plugin_message(param1:Object) : void
		{
			switch(param1.response.Action)
			{
			case "pm":
				g.chat.privateMessageEvent(param1.response.n, param1.response.m);
				break;
			case "Notice":
				g.chat.noticeEvent(param1.response.message);
				break;
			case "Alert":
				if(_tAlert.text.length > 2)
				{
					_tAlert.text = _tAlert.text + "\n" + param1.response.m;
				}
				else
				{
					_tAlert.text = param1.response.m;
				}
				_tAlert.validateNow();
				_tAlert.verticalScrollPosition = _tAlert.maxVerticalScrollPosition;
				break;
			case "Broadcast":
				if(_tAlert.text.length > 2)
				{
					_tAlert.text = _tAlert.text + "\n" + param1.response.m;
				}
				else
				{
					_tAlert.text = param1.response.m;
				}
				_tAlert.validateNow();
				_tAlert.verticalScrollPosition = _tAlert.maxVerticalScrollPosition;
				break;
			case "error":
				if(g.scene.activeScene == "FTW" || g.scene.activeScene == "Countdown")
				{
					if(param1.response.number == 1)
					{
						g.chat.noticeEvent("Sorry, an error occured creating the game. Please try again in a few minutes.");
					}
					else
					{
						g.chat.noticeEvent("Sorry, an error occured");
					}
					g.scene.lobby();
				}
				break;
			default:
				break;
			}
		}

		protected function on_enter(param1:ComponentEvent) : void
		{
			g.chat.send(StringUtil.trim(_tInput.text));
			_tInput.text = "";
		}

		protected function on_added(param1:Event) : void
		{
		}

		protected function on_added_to_stage(param1:Event) : void
		{
			g.server.addEventListener("privateMessage", "on_private_message_event", this);
			g.server.addEventListener("publicMessage", "on_public_message_event", this);
			g.server.addEventListener("zoneList", "onZoneList", this);
			g.server.addEventListener("roomsInZone", "onRoomsInZone", this);
			if(g.user.access > 0)
			{
				_tInput.setFocus();
				EventManager.add(_tInput, KeyboardEvent.KEY_DOWN, on_chat_key);
			}
			g.chat.setOutput(_tOutput);
			if(g.user.muted)
			{
				onMute();
			}
		}

		protected function on_removed(param1:Event) : void
		{
		}

		protected function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(_btnPhrases, MouseEvent.CLICK, sendText);
			EventManager.remove(_tInput, KeyboardEvent.KEY_DOWN, on_chat_key);
			g.server.removeEventListener("privateMessage", "on_private_message_event", this);
			g.server.removeEventListener("publicMessage", "on_public_message_event", this);
			g.server.removeEventListener("zoneList", "onZoneList", this);
			g.server.removeEventListener("roomsInZone", "onRoomsInZone", this);
		}
	}
}
package Scene
{
	import fl.controls.*;
	import flash.display.*;

	dynamic public class DebugPanel extends Sprite
	{
		public var _text:TextArea;

		public function DebugPanel()
		{
			super();
		}
	}
}
package Scene
{
	import Misc.*;
	import com.adobe.serialization.json.*;
	import com.electrotank.electroserver4.esobject.*;
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;
	import flash.system.*;
	import flash.text.*;
	import flash.utils.*;
	import net.theyak.net.*;
	import net.theyak.util.*;

	public class LoadAndLogin extends Sprite
	{
		private var socket:Socket;
		private var real_ip:String;
		private var proxy_check:Boolean;
		private var _URLLoader:URLLoader;
		private var introMessage:String = "Welcome to <i>For the Win!</i>";
		private var ignores:Array;
		private var connectionInterval:uint = 0;
		private var loginTicker:uint = 0;
		private var loginInterval:uint = 0;
		public var _tText:TextField;
		public var _tReason:TextField;
		public var _tExpires:TextField;

		public function LoadAndLogin()
		{
			super();
			loginTicker = 0;
			loadConfiguration();
		}

		public function set text(param1:String) : void
		{
			_tText.htmlText = param1;
		}

		public function loadConfiguration() : void
		{
			text = "Loading configuration...";
			var now:Date = new Date();
			function _func_2834(param1:Event)
			{
				text = "<b>Error loading configuration. Try refresh (F5).</b>";
			}
			var xmlLoader:XMLLoader = new XMLLoader("/m/ftw/ftw-config.php?t=" + now.valueOf().toString(), loadedConfiguration, {ioError:_func_2834, securityError:securityError});
		}

		private function loadedConfiguration(param1:XML) : void
		{
			var _loc_3:RegExp = null;
			var _loc_4:Object = null;
			text = "Configuration loaded. Loading user data.";
			if(param1["server-port"] != undefined)
			{
				g.port = param1["server-port"];
			}
			if(param1["server-ip"] != undefined)
			{
				g.ip = param1["server-ip"];
			}
			if(param1["php-path"] != undefined)
			{
				g.phpPath = param1["php-path"];
			}
			if(param1["latex-path"] != undefined)
			{
				g.latexPath = param1["latex-path"];
			}
			var _loc_2:* = "";
			if(param1["host"] == undefined)
			{
				_loc_3 = new RegExp("http://(www|).*?.(com|org|net)", "i");
				_loc_4 = _loc_3.exec(this.loaderInfo.url);
				_loc_2 = _loc_4[0];
			}
			else
			{
				_loc_2 = param1["host"];
			}
			g.phpPath = _loc_2 + "/m/ftw/php/";
			g.host = _loc_2.replace("http://", "");
			g.host = g.host.replace("https://", "");
			g.remote = g.host;
			g.URLPath = _loc_2 + g.root;
			loadUserConfig();
		}

		private function loadUserConfig() : void
		{
			text = g.phpPath + "user_config.php";
			function _func_2837(param1:Event)
			{
				text = "<b>Error loading configuration. Try refresh (F5).</b>";
			}
			var loader:JSONLoader = new JSONLoader(g.phpPath + "user_config.php", loadedUserConfig, {ioError:_func_2837, securityError:securityError});
		}

		private function loadedUserConfig(param1:*) : void
		{
			if(param1["background"] != undefined)
			{
				g.scene.background = param1["background"];
			}
			loadUserInformation();
		}

		private function loadUserInformation() : void
		{
			text = "Loading user information...";
			var _loc_1:queryLoader = new queryLoader(g.phpPath + "Login.php", userLoaded, {ioError:userLoadedError, securityError:securityError});
		}

		private function userLoaded(param1:*) : void
		{
			if((String(param1).substr(0, 8)) == "%3Cbr%20")
			{
				g.scene.debug(unescape(String(param1)));
				trace(unescape(String(param1)));
				text = "Error retrieving user data from server.";
				return;
			}
			text = "User information loaded";
			g.user.id = param1.user_id;
			g.user.token = param1.token;
			g.user.name = param1.username;
			g.user.current_rating = Number(param1.rating);
			g.user.login_rating = Number(param1.rating);
			g.user.access = param1.access;
			g.user.muted = param1.muted == "1";
			g.user.gameChat = param1.gameChat == "1";
			g.user.lobbyChat = param1.lobbyChat == "1";
			g.user.showTime = param1.showTime == "1";
			g.user.gamesToday = param1.gamesToday;
			g.user.ip = param1.ip;
			g.user.gameNumber = param1.gameNumber;
			g.user.font = param1.font_face;
			g.user.font_size = param1.font_size;
			g.user.leading = param1.leading;
			g.user.flood_mute = param1.flood_mute;
			g.user.s3 = param1.s3 == "1";
			g.game.id = param1.gameNumber;
			g.debug = param1.debug == "1";
			proxy_check = param1.proxy_check == "1";
			ignores = new Array();
			var _loc_2:uint = 0;
			while(param1["ignore" + String(_loc_2)])
			{
				ignores.push(param1["ignore" + String(_loc_2)]);
				_loc_2 = _loc_2 + 1;
			}
			if(param1.intro != null)
			{
				introMessage = param1.intro;
			}
			if(param1.banned == "1")
			{
				text = "<b>You have been banned</b>";
				if(param1.reason != null)
				{
					_tReason.text = param1.reason;
				}
				if(param1.expires != null)
				{
					_tExpires.text = param1.expires;
				}
			}
			else
			{
				if(param1.muted == "1")
				{
					introMessage = introMessage + " You are currently muted";
					if(!(param1.reason == null) && param1.reason.length > 0)
					{
						introMessage = introMessage + " (" + param1.reason + ")";
					}
					introMessage = introMessage + ".";
					param1.expires;
					if(param1.expires && param1.expires.length > 0)
					{
						introMessage = introMessage + " Mute will expire on " + param1.expires + ".";
					}
					param1.expiresSeconds;
					if(param1.expiresSeconds && param1.expiresSeconds.length > 0)
					{
						g.server.setMuteInterval(param1.expiresSeconds);
					}
				}
				if(proxy_check)
				{
					proxycheck();
				}
				else
				{
					connectToServer();
				}
			}
		}

		private function userLoadedError(param1:IOErrorEvent) : void
		{
			text = "<b>Unable to load user information. Try refresh (F5).</b>";
		}

		private function proxycheck() : void
		{
			Security.loadPolicyFile("xmlsocket://76.12.70.148:5555");
			socket = new Socket("76.12.70.148", 5555);
			socket.addEventListener(Event.CLOSE, proxy_close_handler);
			socket.addEventListener(Event.CONNECT, proxy_connect_handler);
			socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, proxy_security_error_handler);
			socket.addEventListener(ProgressEvent.SOCKET_DATA, proxy_data_handler);
			socket.addEventListener(IOErrorEvent.IO_ERROR, proxy_io_error_handler);
		}

		private function proxy_remove_events() : void
		{
			socket.removeEventListener(Event.CLOSE, proxy_close_handler);
			socket.removeEventListener(Event.CONNECT, proxy_connect_handler);
			socket.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, proxy_security_error_handler);
			socket.removeEventListener(ProgressEvent.SOCKET_DATA, proxy_data_handler);
			socket.removeEventListener(IOErrorEvent.IO_ERROR, proxy_io_error_handler);
		}

		private function proxy_close_handler(param1:Event) : void
		{
			proxy_remove_events();
			socket.close();
			connectToServer();
		}

		private function proxy_connect_handler(param1:Event) : void
		{
			socket.writeUTFBytes("{\"__c\":\"ip\"}\n");
			socket.flush();
		}

		private function proxy_security_error_handler(param1:Event) : void
		{
			proxy_close_handler(param1);
		}

		private function proxy_io_error_handler(param1:Event) : void
		{
			proxy_close_handler(param1);
		}

		private function proxy_data_handler(param1:Event) : void
		{
			var _loc_3:Object = null;
			var _loc_4:String = null;
			var _loc_2:String = socket.readUTFBytes(socket.bytesAvailable);
			if(_loc_2.indexOf("\"ip\"") > 0)
			{
				_loc_3 = JSON.decode(_loc_2);
				if(_loc_3.ip != g.user.ip)
				{
					_loc_4 = (g.user.name + " (") + g.user.id + ") ";
					_loc_4 = _loc_4 + "IP addresses do not match. PHP: " + g.user.ip;
					_loc_4 = _loc_4 + " Flash: " + _loc_3.ip;
					Net.callServer((g.URLPath + "PHP/log.php?msg=") + _loc_4);
				}
			}
			proxy_close_handler(param1);
		}

		private function connectToServer() : void
		{
			if(g.user.access >= 255)
			{
				text = "Connecting to server..." + g.ip + ":" + g.port;
			}
			else
			{
				text = "Connecting to server...";
			}
			connectionInterval = setInterval(failed_connect, 6000);
			g.server.addEventListener("connection", "on_connection_event", this);
			g.server.connect(g.ip, g.port);
		}

		public function on_connection_event(param1:Object) : void
		{
			if(connectionInterval)
			{
				clearInterval(connectionInterval);
			}
			if(param1.connected)
			{
				g.server.removeEventListener("connection", "onConnectionEvent", this);
				text = "Connected to server";
				g.server.addEventListener("login", "onLoginResponse", this);
				g.server.login(g.user.name, g.user.token);
			}
			else
			{
				text = "<b>Unable to connect to server. Please try again later.</b>";
			}
		}

		private function failed_connect() : void
		{
			on_connection_event({connected:false});
		}

		private function socket_close_handler(param1:Event) : void
		{
			text = "socket close";
		}

		private function socket_connect_handler(param1:Event) : void
		{
			text = "socket connect";
		}

		private function security_error_handler(param1:Event) : void
		{
			text = param1.toString();
			socket.removeEventListener(Event.CLOSE, socket_close_handler);
			socket.removeEventListener(Event.CONNECT, socket_connect_handler);
			socket.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, security_error_handler);
			socket.removeEventListener(ProgressEvent.SOCKET_DATA, socket_data_handler);
			g.scene.debug(param1.toString());
		}

		private function socket_data_handler(param1:Event) : void
		{
			text = "data " + param1.toString();
			real_ip = socket.readUTFBytes(socket.bytesAvailable);
		}

		public function onLoginResponse(param1:Object) : void
		{
			if(param1.success)
			{
				g.server.addEventListener("pluginMessage", "onPluginMessageEvent", this);
				g.server.removeEventListener("login", "onLoginResponse", this);
				text = "Loading user information";
				g.server.toServerPlugin(g.manager, "getUser", {token:g.user.token, userId:g.user.id, username:g.user.name});
			}
			else
			{
				text = "Username in use. The user has been kicked off.\nPlease click refresh (F5) to re-try login.";
				g.server.disconnectAndReset();
				if(loginTicker >= 10)
				{
					text = "Login failed. Please try again later.</b>";
					loginTicker = 0;
				}
				else
				{
					loginInterval = setInterval(retryLogin, 1000);
				}
			}
		}

		public function onPluginMessageEvent(param1:Object) : void
		{
			var _loc_2:EsObject = new EsObject();
			switch(param1.response.Action)
			{
			case "UserValidated":
				onUserValidated(param1.response);
				break;
			case "UserNotValidated":
				onNotValidated();
				break;
			default:
				break;
			}
		}

		public function onNotValidated() : void
		{
			g.server.removeEventListener("pluginMessage", "onPluginMessageEvent", this);
			text = "Sorry, we were unable to validate your account.";
			_tReason.text = "We are unable to log you in to For the Win!";
		}

		public function onUserValidated(param1:Object) : void
		{
			g.server.removeEventListener("pluginMessage", "onPluginMessageEvent", this);
			text = "Logged in as " + g.user.name;
			g.user.access = parseInt(param1.access, 10);
			g.user.login_rating = param1.rating;
			g.server.setUserVariable("rating", param1.rating);
			g.server.setUserVariable("away", "false");
			g.chat = new Chat();
			g.chat.buffer = introMessage;
			g.chat.mute = g.user.muted;
			g.chat.displayTime = g.user.showTime;
			g.chat.ignores = ignores;
			g.chat.flood_mute = g.user.flood_mute;
			g.server.startPingPong();
			dispatchEvent(new Event("connected"));
		}

		public function retryLogin() : void
		{
			var _loc_2:* = this.loginTicker + 1;
			this.loginTicker = _loc_2;
			if(loginTicker == 5 || loginTicker == 10)
			{
				text = "Attempting login";
				clearInterval(loginInterval);
				connectToServer();
			}
			else
			{
				text = "Username in use. Retry in " + (6 - (loginTicker % 5)) + " seconds...";
			}
		}

		private function securityError(param1:SecurityErrorEvent)
		{
			text = "<b>Security Error. Probably a domain name messed up in config.</b>";
		}
	}
}
package Scene
{
	import Game.*;
	import Misc.*;
	import flash.display.*;
	import flash.events.*;
	import flash.filters.*;
	import flash.geom.*;
	import flash.text.*;
	import net.theyak.ui.*;

	public class Lobby extends BaseChat
	{
		public static var class_name:* = "Scene.Lobby";
		public static var instance_number_counter:int = 0;
		private var instance_number:int = 0;
		public var userlist:Userlist;
		public var _tUsers:TextField;
		public var username:TextField;
		public var _userInfo:UserInformation;
		public var _gameGrid:GameGrid;
		public var _gameGridBackground:Sprite;
		public var _mcCover:Sprite;
		public var _separator:Sprite;
		public var _bNewGame:RedButton;
		public var _bCountdown:RedButton;
		public var _bReview:RedButton;
		private var new_game_box:NewGame;
		private var new_countdown_box:NewCountdown;
		private var review_box:Review;

		public function Lobby()
		{
			super();
			var _loc_5:* = this.instance_number_counter + 1;
			this.instance_number_counter = _loc_5;
			instance_number = instance_number_counter;
			_mcCover.visible = false;
			g.chat.displayChat = g.user.lobbyChat;
			EventManager.add(this, Event.ADDED, on_added);
			EventManager.add(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.add(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.add(_separator, MouseEvent.MOUSE_DOWN, moveSeparator, "Move separator");
			EventManager.add(this, MouseEvent.MOUSE_UP, stopSeparator, "Stop Separator");
			EventManager.add(userlist, MouseEvent.DOUBLE_CLICK, whois, "Whois user");
			_bNewGame.tText.text = "New Game";
			_bReview.tText.text = "Review";
			_bCountdown.tText.text = "Countdown";
			var _loc_1:Array = [8388608, 13369344];
			if(g.user.name == "ilovepink")
			{
				_loc_1 = [16738047, 16764159];
			}
			var _loc_2:Array = [1, 1];
			var _loc_3:Array = [0, 255];
			tab(10, 35, 501, 18, 6, _loc_1, _loc_2, _loc_3);
			tab(520, 380, 190, 18, 6, _loc_1, _loc_2, _loc_3);
			tab(520, 128, 190, 18, 6, _loc_1, _loc_2, _loc_3);
			tab(520, 35, 190, 18, 6, _loc_1, _loc_2, _loc_3);
		}

		private function tab(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Array, param7:Array, param8:Array)
		{
			var _loc_9:Graphics = this.graphics;
			var _loc_10:Matrix = new Matrix();
			_loc_10.createGradientBox(param3, param4, Math.PI / 2, 0, param2);
			_loc_9.beginGradientFill(GradientType.LINEAR, param6, param7, param8, _loc_10, SpreadMethod.PAD);
			_loc_9.moveTo(param1 + param5, param2);
			_loc_9.lineTo((param1 + param3) - param5, param2);
			_loc_9.curveTo(param1 + param3, param2, param1 + param3, param2 + param5);
			_loc_9.lineTo(param1 + param3, param2 + param4);
			_loc_9.lineTo(param1, param2 + param4);
			_loc_9.lineTo(param1, param2 + param5);
			_loc_9.curveTo(param1, param2, param1 + param5, param2);
			_loc_9.endFill();
		}

		private function whois(param1:MouseEvent) : void
		{
			var _loc_3:Whois = null;
			var _loc_2:String = userlist.getSelectedUser();
			if(_loc_2 != null)
			{
				_loc_3 = new Whois(_loc_2);
				g.scene.getScene().addChild(_loc_3);
			}
		}

		public function display_grid_info() : void
		{
			g.chat.noticeEvent(_gameGrid.toString());
		}

		private function moveSeparator(param1:MouseEvent) : void
		{
			EventManager.add(_separator, Event.ENTER_FRAME, separator_move, "_sperator:moveIt");
			Sprite(_separator).startDrag(false, new Rectangle(10, 175, 540, 198));
		}

		private function separator_move(param1:Event) : void
		{
			_tOutput.y = _separator.y + 8;
			_tOutput.setSize(_tOutput.width, 510 - _tOutput.y);
			_gameGrid._spGames.setSize(GameGrid(_gameGrid).width, _tOutput.y - 63);
			_gameGridBackground.height = _gameGrid._spGames.height;
			_separator.x = 10;
		}

		private function stopSeparator(param1:MouseEvent) : void
		{
			EventManager.remove(_separator, Event.ENTER_FRAME, separator_move);
			Sprite(_separator).stopDrag();
		}

		public function on_join_room(param1:Object) : void
		{
			var _loc_2:Array = null;
			var _loc_3:uint = 0;
			if(param1.zonename == "FTW")
			{
				enable_buttons();
				_loc_2 = param1.users;
				userlist.clear();
				_loc_3 = 0;
				while(_loc_3 < _loc_2.length)
				{
					if(!_loc_2[_loc_3].getVariable("hidden") || _loc_2[_loc_3].getVariable("hidden") == "false")
					{
						userlist.addUser(_loc_2[_loc_3].name, _loc_2[_loc_3].getVariable("rating"), _loc_2[_loc_3].getVariable("away") == "true");
					}
					_loc_3 = _loc_3 + 1;
				}
				g.activeZoneName = param1.zonename;
				g.activeRoomName = param1.roomname;
				_tUsers.text = "Users in " + param1.roomname;
			}
		}

		public function onLeaveRoomEvent(param1:Object) : void
		{
			userlist.clear();
			var _loc_2:Array = g.server.getRoomList();
			if(_loc_2.length > 0)
			{
				g.activeZoneName = _loc_2[0].zonename;
				g.activeRoomName = _loc_2[0].roomname;
				refresh_userlist();
				g.chat.noticeEvent("Now chatting in room " + g.activeZoneName + ":" + g.activeRoomName);
			}
		}

		public function onUserListUpdate(param1:Object) : void
		{
			if(param1.roomname == g.activeRoomName && param1.zonename == g.activeZoneName)
			{
				if(param1.action == "add")
				{
					userlist.addUser(param1.user.name, param1.user.getVariable("rating"), false);
				}
				else
				{
					if(param1.action == "remove")
					{
						userlist.removeUser(param1.user.name);
					}
				}
			}
		}

		override protected function do_private_message(param1:String) : void
		{
			var _loc_2:String = userlist.getSelectedUser();
			if(!(_loc_2 == null) && param1.length > 0)
			{
				g.chat.whisper({command:"whisper", target:_loc_2, str:param1});
			}
		}

		override public function refresh_userlist() : void
		{
			userlist.clear();
			var _loc_1:Array = g.server.getUsersInRoom(g.activeZoneName, g.activeRoomName);
			var _loc_2:uint = 0;
			while(_loc_2 < _loc_1.length)
			{
				userlist.addUser(_loc_1[_loc_2].name, _loc_1[_loc_2].getVariable("rating"), _loc_1[_loc_2].getVariable("away") == "true");
				_loc_2 = _loc_2 + 1;
			}
			_tUsers.text = "Users in " + g.activeRoomName;
		}

		public function setAway(param1:String, param2:String) : void
		{
			userlist.setAway(param1, param2 == "true");
		}

		public function setRating(param1:String, param2:Number) : void
		{
			if(param1 == g.user.name)
			{
				_userInfo.current_rating = String(param2);
			}
			userlist.setRating(param1, param2);
		}

		override public function on_plugin_message(param1:Object) : void
		{
			switch(param1.response.Action)
			{
			case "update":
				_gameGrid.update(uint(param1.response.id), uint(param1.response.s), uint(param1.response.p), uint(param1.response.of), uint(param1.response.pl));
				break;
			case "remove":
				_gameGrid.remove_game(int(param1.response.id));
				break;
			case "game_list":
				_gameGrid.game_list(param1.response.games);
				break;
			case "new_game":
				_gameGrid.new_game(param1.response.id, param1.response.name, param1.response.type, uint(param1.response.scoring), uint(param1.response.problems));
				break;
			default:
				super.on_plugin_message(param1);
				break;
			}
		}

		private function enable_buttons() : void
		{
			if(g.game.last_problem_number_displayed > 0 && g.game.problems.length > 0)
			{
				EventManager.add(_bReview, MouseEvent.CLICK, on_review, "Scene.Lobby._bReview");
				_bReview.alpha = 1;
			}
			else
			{
				_bReview.alpha = 0.20;
			}
			if(g.user.id > 0)
			{
				EventManager.add(_bNewGame, MouseEvent.CLICK, on_ftw, "Scene.Lobby._bNewGame");
				EventManager.add(_bCountdown, MouseEvent.CLICK, on_countdown, "Scene.Lobby._bCountdown");
				_bNewGame.alpha = 1;
				_bCountdown.alpha = 1;
			}
			else
			{
				_bNewGame.visible = false;
				_bCountdown.visible = false;
				_bReview.x = _bNewGame.x;
			}
		}

		private function disable_buttons() : void
		{
			EventManager.remove(_bReview, MouseEvent.CLICK, on_review);
			EventManager.remove(_bNewGame, MouseEvent.CLICK, on_ftw);
			EventManager.remove(_bCountdown, MouseEvent.CLICK, on_countdown);
			_bNewGame.alpha = 0.20;
			_bCountdown.alpha = 0.20;
			_bReview.alpha = 0.20;
		}

		private function on_ftw_removed(param1:Event) : void
		{
			EventManager.remove(new_game_box, Event.REMOVED_FROM_STAGE, on_ftw_removed);
			enable_buttons();
		}

		private function on_ftw(param1:MouseEvent) : void
		{
			disable_buttons();
			new_game_box = new NewGame();
			EventManager.add(new_game_box, Event.REMOVED_FROM_STAGE, on_ftw_removed);
			addChild(new_game_box);
		}

		private function on_countdown_removed(param1:Event) : void
		{
			EventManager.remove(new_countdown_box, Event.REMOVED_FROM_STAGE, on_countdown_removed);
			enable_buttons();
		}

		public function on_countdown(param1:MouseEvent) : void
		{
			disable_buttons();
			if(param1.shiftKey)
			{
				EventManager.remove(_bCountdown, MouseEvent.CLICK, on_countdown);
				new_countdown_box = new NewCountdown();
				EventManager.add(new_countdown_box, Event.REMOVED_FROM_STAGE, on_countdown_removed);
				addChild(new_countdown_box);
			}
			else
			{
				g.game.reset();
				g.game.type = "Countdown";
				g.game.max_players = 2;
				g.game.problem_count = 20;
				g.game.time_per_problem = 45;
				g.game.rated = true;
				g.game.sprint = true;
				g.game.target = false;
				g.game.team = true;
				g.game.countdown = true;
				g.game.school = true;
				g.game.chapter = true;
				g.game.state = true;
				g.game.national = true;
				g.game.amc8 = true;
				g.game.scoring_method = ScoringType.COUNTDOWN;
				g.game.password = "";
				g.replay = g.game.clone();
				g.game.create();
			}
		}

		private function on_review_removed(param1:Event) : void
		{
			enable_buttons();
			EventManager.remove(review_box, Event.REMOVED_FROM_STAGE, on_review_removed);
			_bReview.alpha = 1;
		}

		public function on_review(param1:Object) : void
		{
			var _loc_2:Boolean = false;
			var _loc_3:uint = 0;
			var _loc_4:YakAlert = null;
			g.game.problems;
			if(g.game.problems && !_gameGrid.is_game(g.game.id) && g.game.last_problem_number_displayed > 0)
			{
				_loc_2 = false;
				_loc_3 = 0;
				while(_loc_3 <= g.game.last_problem_number_displayed)
				{
					if(g.game.problems[_loc_3])
					{
						_loc_2 = true;
						break;
					}
					_loc_3 = _loc_3 + 1;
				}
				_loc_4 = new YakAlert("There are no problems to review.", "Review Game", "OK");
				_loc_4.center(g.scene.getScene());
				g.scene.getScene().addChild(_loc_4);
			}
			else
			{
				if(!g.game.problems || g.game.last_problem_number_displayed <= 0)
				{
					_loc_4 = new YakAlert("There are no problems to view.", "Review Game", "OK");
					_loc_4.center(g.scene.getScene());
					g.scene.getScene().addChild(_loc_4);
				}
				else
				{
					_loc_4 = new YakAlert("Please wait for game to finish before reviewing. If you start or join another game before the game finishes, you will no longer be able to review the game.", "Review Game", "OK");
					_loc_4.center(g.scene.getScene());
					g.scene.getScene().addChild(_loc_4);
				}
			}
		}

		override protected function on_added(param1:Event) : void
		{
			if(param1.eventPhase == EventPhase.AT_TARGET)
			{
				super.on_added(param1);
				EventManager.remove(this, Event.ADDED, on_added);
			}
		}

		override protected function on_added_to_stage(param1:Event) : void
		{
			disable_buttons();
			username.text = g.user.name;
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			super.on_added_to_stage(param1);
			g.server.addEventListener("userListUpdate", "onUserListUpdate", this);
			g.server.addEventListener("joinRoom", "on_join_room", this);
			g.server.addEventListener("leaveRoom", "onLeaveRoomEvent", this);
			g.server.addEventListener("pluginMessage", "on_plugin_message", this);
			g.server.toServerPlugin(g.manager, "get_games", {zone:g.activeZoneName});
			g.activeZoneName = "FTW";
			g.activeRoomName = "Lobby";
			g.server.joinRoom(g.activeZoneName, g.activeRoomName);
			var _loc_2:GlowFilter = new GlowFilter(0, 0.10, 16, 16, 0, 3, false, false);
			_bNewGame.filters = new Array(_loc_2);
			_bCountdown.filters = new Array(_loc_2);
			_bReview.filters = new Array(_loc_2);
		}

		override protected function on_removed_from_stage(param1:Event) : void
		{
			EventManager.remove(this, Event.ADDED, on_added);
			EventManager.remove(this, Event.ADDED_TO_STAGE, on_added_to_stage);
			EventManager.remove(this, Event.REMOVED_FROM_STAGE, on_removed_from_stage);
			EventManager.remove(this, MouseEvent.MOUSE_UP, stopSeparator);
			EventManager.remove(_separator, MouseEvent.MOUSE_DOWN, moveSeparator);
			EventManager.remove(_separator, Event.ENTER_FRAME, separator_move);
			EventManager.remove(userlist, MouseEvent.DOUBLE_CLICK, whois);
			EventManager.remove(new_game_box, Event.REMOVED_FROM_STAGE, on_ftw_removed);
			EventManager.remove(new_countdown_box, Event.REMOVED_FROM_STAGE, on_countdown_removed);
			EventManager.remove(review_box, Event.REMOVED_FROM_STAGE, on_review_removed);
			disable_buttons();
			g.server.removeEventListener("userListUpdate", "onUserListUpdate", this);
			g.server.removeEventListener("joinRoom", "on_join_room", this);
			g.server.removeEventListener("leaveRoom", "onLeaveRoomEvent", this);
			g.server.removeEventListener("pluginMessage", "on_plugin_message", this);
			super.on_removed_from_stage(param1);
		}
	}
}
package Scene
{
	import Game.*;
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;

	public class Manager extends Object
	{
		private var stage:Sprite;
		private var ldr:Loader;
		private var debugPanel:DebugPanel;
		public var activeScene:String = "";
		public var isReceivingPluginMessages:Boolean = false;

		public function Manager(param1:Sprite)
		{
			super();
			this.stage = param1;
			while(param1.numChildren > 0)
			{
				param1.removeChildAt(0);
			}
			param1.addChild(new Background());
			param1.addChild(new Background());
			debugPanel = new DebugPanel();
			debugPanel.y = 540;
			debugPanel.visible = false;
			param1.addChild(debugPanel);
		}

		public function loader()
		{
			activeScene = "Loader";
			remove();
			var _loc_1:DisplayObject = stage.addChildAt(new LoadAndLogin(), 1);
			_loc_1.visible = true;
		}

		public function message(param1:String) : void
		{
			activeScene = "Message";
			remove();
			stage.addChildAt(new Message(param1), 1);
		}

		public function lobby()
		{
			activeScene = "Lobby";
			remove();
			stage.addChildAt(new Lobby(), 1);
		}

		public function ftw()
		{
			activeScene = "FTW";
			remove();
			stage.addChildAt(new FTW(), 1);
		}

		public function countdown()
		{
			activeScene = "Countdown";
			remove();
			stage.addChildAt(new Countdown(), 1);
		}

		public function race()
		{
			activeScene = "Race";
			remove();
		}

		public function reconnect()
		{
			activeScene = "Reconnect";
			remove();
			stage.addChildAt(new Reconnect(), 1);
		}

		public function reconnect2() : void
		{
			activeScene = "Reconnect";
			remove();
			stage.addChildAt(new Reconnect2(), 1);
		}

		public function set background(param1:String) : void
		{
			ldr = new Loader();
			ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, backgroundDisplay);
			ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, backgroundError);
			var _loc_2:URLRequest = new URLRequest(param1);
			ldr.load(_loc_2);
		}

		private function backgroundDisplay(param1:Event) : void
		{
			ldr.contentLoaderInfo.removeEventListener(Event.COMPLETE, backgroundDisplay);
			ldr.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, backgroundError);
			ldr.width = this.stage.width;
			ldr.height = this.stage.height;
			this.stage.removeChildAt(0);
			this.stage.addChildAt(ldr, 0);
		}

		private function backgroundError(param1:Event) : void
		{
			ldr.contentLoaderInfo.removeEventListener(Event.COMPLETE, backgroundDisplay);
			ldr.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, backgroundError);
			debug("Unable to load background");
		}

		private function remove() : void
		{
			if(stage.numChildren > 1)
			{
				stage.removeChildAt(1);
			}
		}

		public function getScene() : Sprite
		{
			return Sprite(stage.getChildAt(1));
		}

		public function debug(param1:String, param2:String = null) : void
		{
			var _loc_3:Date = null;
			var _loc_4:String = null;
			if(debugPanel != null)
			{
				_loc_3 = new Date();
				_loc_4 = "[" + _loc_3.toString() + "] ";
				if(param2 == null)
				{
					debugPanel._text.htmlText = debugPanel._text.htmlText + (_loc_4 + param1) + "\n";
				}
				else
				{
					debugPanel._text.htmlText = debugPanel._text.htmlText + (_loc_4 + "<font color=\"") + param2 + "\">" + param1 + "</font>\n";
				}
				debugPanel._text.verticalScrollPosition = debugPanel._text.maxVerticalScrollPosition;
				debugPanel._text.invalidate();
			}
			else
			{
				trace("Debug panel is null: " + param1);
			}
		}
	}
}
package Scene
{
	import flash.display.*;
	import flash.text.*;

	public class Message extends Sprite
	{
		public var _tText:TextField;

		public function Message(param1:String = null)
		{
			super();
			if(param1 != null)
			{
				this.message = param1;
			}
		}

		public function set message(param1:String) : void
		{
			_tText.text = param1;
		}
	}
}
package Scene
{
	import Misc.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;

	public class Reconnect extends Sprite
	{
		public var _bReconnect:Button;

		public function Reconnect()
		{
			super();
			_bReconnect.addEventListener(MouseEvent.CLICK, attemptConnection);
			__setProp__bReconnect_Reconnect_Layer1_0();
		}

		private function attemptConnection(param1:MouseEvent) : void
		{
			_bReconnect.removeEventListener(MouseEvent.CLICK, attemptConnection);
			g.server.reset();
			g.server.connect();
		}

		public function __setProp__bReconnect_Reconnect_Layer1_0()
		{
			try
			{
				_bReconnect["componentInspectorSetting"] = true;
			}
			catch(e:Error)
			{
			}
			_bReconnect.emphasized = false;
			_bReconnect.enabled = true;
			_bReconnect.label = "Try to Reconnect";
			_bReconnect.labelPlacement = "right";
			_bReconnect.selected = false;
			_bReconnect.toggle = false;
			_bReconnect.visible = true;
			try
			{
				_bReconnect["componentInspectorSetting"] = false;
			}
			catch(e:Error)
			{
			}
		}
	}
}
package Scene
{
	import Misc.*;
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import flash.utils.*;

	public class Reconnect2 extends Sprite
	{
		public var _bReconnect:Button;
		public var _tText:TextField;
		private var _interval:uint;

		public function Reconnect2()
		{
			super();
			_tText.text = "Lost connection to server - trying to reconnect";
			_interval = setInterval(failedConnect, 5000);
			g.server.reset();
			g.server.addEventListener("connection", "reconnection", this);
			g.server.addEventListener("reconnection", "reconnection", this);
			g.server.connect();
			_bReconnect.visible = false;
			_bReconnect.label = "Try to Reconnect";
		}

		public function reconnection(param1:Object) : void
		{
			g.scene.debug("reconnection");
			if(_interval)
			{
				clearInterval(_interval);
				_interval = 0;
			}
			g.server.removeEventListener("reconnection", "reconnection", this);
			g.server.removeEventListener("connection", "reconnection", this);
			if(param1.connected)
			{
				g.server.addEventListener("login", "loginResponse", this);
				_tText.text = "Connected. Logging in...";
				g.server.login(g.user.name, g.user.token);
			}
			else
			{
				_tText.text = "The server has gone down.";
				_bReconnect.visible = true;
				_bReconnect.addEventListener(MouseEvent.CLICK, attemptConnection);
			}
		}

		public function failedConnect() : void
		{
			g.scene.debug("failedConnect");
			reconnection({connected:false});
		}

		public function loginResponse(param1:Object)
		{
			g.scene.debug("login response");
			g.server.removeEventListener("login", "loginResponse", this);
			g.server.setUserVariable("rating", String(g.user.current_rating));
			g.server.setUserVariable("away", "false");
			g.scene.lobby();
		}

		private function attemptConnection(param1:MouseEvent) : void
		{
			g.scene.debug("attemptConnection");
			_bReconnect.removeEventListener(MouseEvent.CLICK, attemptConnection);
			g.server.addEventListener("reconnection", "reconnection", this);
			g.server.addEventListener("connection", "reconnection", this);
			g.server.reset();
			g.server.connect();
		}
	}
}
package Type
{
	import Game.*;
	import Misc.*;
	import com.electrotank.electroserver4.esobject.*;
	import flash.net.*;
	import flash.utils.*;
	import net.theyak.util.*;

	public class FTW extends Object
	{
		public static var PLAYER:uint = 0;
		public static var GAMEMASTER:uint = 1;
		public static var SPECTATOR:uint = 9;
		public var id:uint;
		public var time_per_problem:uint;
		public var problem_count:uint;
		public var max_players:int = -1;
		public var rated:Boolean = true;
		public var scoring_method:uint;
		public var password:String = "";
		public var spectators:Boolean = true;
		public var sprint:Boolean = true;
		public var target:Boolean = true;
		public var team:Boolean = true;
		public var countdown:Boolean = true;
		public var school:Boolean = true;
		public var chapter:Boolean = true;
		public var state:Boolean = true;
		public var national:Boolean = true;
		public var amc8:Boolean = true;
		public var ended:Boolean = false;
		public var last_problem_number_displayed:uint = 0;
		public var problemNumber:uint;
		public var playerType:int;
		public var type:String;
		public var room_name:String;
		public var zone_name:String;
		public var problems:Array;
		public var can_start_game:Boolean = false;

		public function FTW()
		{
			scoring_method = ScoringMethod.RANK;
			super();
			reset();
		}

		public function reset()
		{
			can_start_game = false;
			id = 0;
			time_per_problem = 0;
			problem_count = 0;
			problemNumber = 0;
			max_players = -1;
			scoring_method = ScoringMethod.RANK;
			rated = true;
			spectators = true;
			playerType = -1;
			type = "FTW";
			zone_name = "";
			room_name = "";
			password = "";
			ended = false;
			problems = new Array();
			sprint = true;
			target = true;
			team = true;
			countdown = true;
			school = true;
			chapter = true;
			state = true;
			national = true;
			amc8 = true;
			spectators = true;
			last_problem_number_displayed = 0;
		}

		public function create() : void
		{
			can_start_game = true;
			player_type = FTW.GAMEMASTER;
			if(!(type == "Countdown" && this.scoring_method == ScoringType.COUNTDOWN))
			{
				this.scoring_method = ScoringType.COUNTDOWN;
				Net.callServer((g.URLPath + "PHP/log.php?msg=") + (escape("Bad scoring type for countdown, blah")));
			}
			var _loc_1:EsObject = new EsObject();
			_loc_1.setString("zone", g.activeZoneName);
			_loc_1.setString("lobby", g.activeRoomName);
			_loc_1.setString("type", type);
			_loc_1.setInteger("players", max_players);
			_loc_1.setInteger("problems", problem_count);
			_loc_1.setInteger("time", this.time_per_problem);
			_loc_1.setBoolean("rated", rated);
			_loc_1.setBoolean("spectators", spectators);
			_loc_1.setBoolean("sprint", sprint);
			_loc_1.setBoolean("target", target);
			_loc_1.setBoolean("team", team);
			_loc_1.setBoolean("countdown", countdown);
			_loc_1.setBoolean("school", school);
			_loc_1.setBoolean("chapter", chapter);
			_loc_1.setBoolean("state", state);
			_loc_1.setBoolean("national", national);
			_loc_1.setBoolean("amc8", amc8);
			_loc_1.setInteger("scoring", scoring_method);
			_loc_1.setString("password", password);
			_loc_1.setInteger("user_id", g.user.id);
			g.server.esServerPlugin(g.manager, "new_game", _loc_1);
		}

		public function get player_type() : uint
		{
			return this.playerType;
		}

		public function set player_type(param1:uint) : void
		{
			if(param1 == FTW.PLAYER || param1 == FTW.SPECTATOR || param1 == FTW.GAMEMASTER)
			{
				this.playerType = param1;
			}
		}

		public function clone() : FTW
		{
			var _loc_1:String = getQualifiedClassName(this).replace("::", ".");
			var _loc_2:ByteArray = new ByteArray();
			registerClassAlias(_loc_1, getDefinitionByName(_loc_1));
			_loc_2.writeObject(this);
			_loc_2.position = 0;
			return _loc_2.readObject();
		}
	}
}
package Type
{
	public class GameStatus extends Object
	{
		public static var CREATED:uint = 1;
		public static var STARTING:uint = 2;
		public static var STARTED:uint = 3;
		public static var ENDING:uint = 4;
		public static var ENDED:uint = 5;
		public static var LABELS:Array = ["", "Created", "Starting", "Started", "Ending", "Ended"];

		public function GameStatus()
		{
			super();
		}
	}
}
package Type
{
	public class ScoringMethod extends Object
	{
		public static var RANK:uint = 1;
		public static var TIME:uint = 2;
		public static var CORRECT:uint = 3;
		public static var COMPOSITE:uint = 4;
		public static var COUNTDOWN:uint = 5;
		public static var LABELS:Array = ["", "Ranking", "Time", "Responses", "Composite", "Countdown"];

		public function ScoringMethod()
		{
			super();
		}
	}
}
package Type
{
	public class User extends Object
	{
		private var _id:int;
		private var _token:String;
		private var _login_rating:Number;
		private var _current_rating:Number;
		private var _ip:String;
		private var _name:String;
		private var _access:uint;
		private var _gamesToday:uint;
		private var _muted:Boolean;
		private var _showTime:Boolean;
		private var _lobbyChat:Boolean;
		private var _gameChat:Boolean;
		private var _gameNumber:uint;
		private var _font_size:uint = 11;
		private var _font:String = "_sans";
		private var _leading:uint = 2;
		private var _s3:Boolean = true;
		public var flood_mute:Number;

		public function User()
		{
			super();
		}

		public function set id(param1:int) : void
		{
			this._id = param1;
		}

		public function get id() : int
		{
			return this._id;
		}

		public function set token(param1:String) : void
		{
			this._token = param1;
		}

		public function get token() : String
		{
			return this._token;
		}

		public function set rating(param1:Number) : void
		{
			if(param1 > 0)
			{
				this._current_rating = param1;
			}
			else
			{
				this._current_rating = 0;
			}
		}

		public function get rating() : Number
		{
			return this._current_rating;
		}

		public function set current_rating(param1:Number) : void
		{
			if(param1 > 0)
			{
				this._current_rating = param1;
			}
			else
			{
				this._current_rating = 0;
			}
		}

		public function get current_rating() : Number
		{
			return this._current_rating;
		}

		public function set login_rating(param1:Number) : void
		{
			if(param1 > 0)
			{
				this._login_rating = param1;
			}
			else
			{
				this._login_rating = 0;
			}
		}

		public function get login_rating() : Number
		{
			return this._current_rating;
		}

		public function get login_rating_display() : String
		{
			if(this._login_rating <= 0)
			{
				return "None";
			}
			return String(Math.round(this._login_rating));
		}

		public function get current_rating_display() : String
		{
			if(this._current_rating <= 0)
			{
				return "None";
			}
			return String(Math.round(this._current_rating));
		}

		public function get rating_display() : String
		{
			return this.current_rating_display;
		}

		public function set ip(param1:String) : void
		{
			this._ip = param1;
		}

		public function get ip() : String
		{
			return this._ip;
		}

		public function set name(param1:String) : void
		{
			this._name = param1;
		}

		public function get name() : String
		{
			return this._name;
		}

		public function set access(param1:uint) : void
		{
			this._access = param1;
		}

		public function get access() : uint
		{
			return this._access;
		}

		public function set gamesToday(param1:uint) : void
		{
			if(param1 > 0)
			{
				this._gamesToday = param1;
			}
			else
			{
				this._gamesToday = 0;
			}
		}

		public function get gamesToday() : uint
		{
			return this._gamesToday;
		}

		public function set muted(param1:Boolean) : void
		{
			this._muted = param1;
		}

		public function get muted() : Boolean
		{
			return this._muted;
		}

		public function set showTime(param1:Boolean) : void
		{
			this._showTime = param1;
		}

		public function get showTime() : Boolean
		{
			return this._showTime;
		}

		public function set lobbyChat(param1:Boolean) : void
		{
			this._lobbyChat = param1;
		}

		public function get lobbyChat() : Boolean
		{
			return this._lobbyChat;
		}

		public function set gameChat(param1:Boolean) : void
		{
			this._gameChat = param1;
		}

		public function get gameChat() : Boolean
		{
			return this._gameChat;
		}

		public function set gameNumber(param1:uint) : void
		{
			this._gameNumber = param1;
		}

		public function get gameNumber() : uint
		{
			return _gameNumber;
		}

		public function set font_size(param1:uint) : void
		{
			if(param1 < 10)
			{
				param1 = 10;
			}
			if(param1 > 16)
			{
				param1 = 16;
			}
			_font_size = param1;
		}

		public function get font_size() : uint
		{
			return _font_size;
		}

		public function set font(param1:String) : void
		{
			param1 = param1.toLowerCase();
			if(param1 == "mono" || param1 == "monospace" || param1 == "courier" || param1 == "consolas")
			{
				param1 = "_typewriter";
			}
			if(param1 == "times" || param1 == "times new roman" || param1 == "serif")
			{
				param1 = "_serif";
			}
			if(param1 == "arial" || param1 == "helvetica" || param1 == "tahoma" || param1 == "sans")
			{
				param1 = "_sans";
			}
			if(!(param1 == "_sans") && param1 == "_typewriter" && param1 == "_serif")
			{
				param1 = "_sans";
			}
			_font = param1;
		}

		public function get font() : String
		{
			return _font;
		}

		public function set leading(param1:uint) : void
		{
			if(param1 > 6)
			{
				param1 = 6;
			}
			if(param1 < 0)
			{
				param1 = 0;
			}
			_leading = param1;
		}

		public function get leading() : uint
		{
			return _leading;
		}

		public function set s3(param1:Boolean) : void
		{
			_s3 = param1;
		}

		public function get s3() : Boolean
		{
			return _s3;
		}
	}
}
package com.adobe.serialization.json
{
	public class JSON extends Object
	{
		final public static function encode(param1:Object) : String
		{
			var _loc_2:JSONEncoder = new JSONEncoder(param1);
			return _loc_2.getString();
		}

		final public static function decode(param1:String)
		{
			var _loc_2:JSONDecoder = new JSONDecoder(param1);
			return _loc_2.getValue();
		}

		public function JSON()
		{
			super();
		}
	}
}
package com.adobe.serialization.json
{
	public class JSONDecoder extends Object
	{
		private var value:*;
		private var tokenizer:JSONTokenizer;
		private var token:JSONToken;

		public function JSONDecoder(param1:String)
		{
			super();
			tokenizer = new JSONTokenizer(param1);
			nextToken();
			value = parseValue();
		}

		public function getValue()
		{
			return value;
		}

		private function nextToken() : JSONToken
		{
			var _loc_1:getNextToken = tokenizer.getNextToken();
			token = _loc_1;
			return _loc_1;
		}

		private function parseArray() : Array
		{
			var _loc_1:Array = new Array();
			nextToken();
			if(token.type == JSONTokenType.RIGHT_BRACKET)
			{
				return _loc_1;
			}
			while(true)
			{
				_loc_1.push(parseValue());
				nextToken();
				if(token.type == JSONTokenType.RIGHT_BRACKET)
				{
					return _loc_1;
				}
				if(token.type == JSONTokenType.COMMA)
				{
					nextToken();
					break;
				}
				tokenizer.parseError("Expecting ] or , but found " + token.value);
			}
			return null;
		}

		private function parseObject() : Object
		{
			var _loc_2:String = null;
			var _loc_1:Object = new Object();
			nextToken();
			if(token.type == JSONTokenType.RIGHT_BRACE)
			{
				return _loc_1;
			}
			while(true)
			{
				if(token.type == JSONTokenType.STRING)
				{
					_loc_2 = String(token.value);
					nextToken();
					if(token.type == JSONTokenType.COLON)
					{
						nextToken();
						_loc_1[_loc_2] = parseValue();
						nextToken();
						if(token.type == JSONTokenType.RIGHT_BRACE)
						{
							return _loc_1;
						}
						if(token.type == JSONTokenType.COMMA)
						{
							nextToken();
						}
						else
						{
							tokenizer.parseError("Expecting } or , but found " + token.value);
						}
					}
					else
					{
						tokenizer.parseError("Expecting : but found " + token.value);
					}
					break;
				}
				tokenizer.parseError("Expecting string but found " + token.value);
			}
			return null;
		}

		private function parseValue() : Object
		{
			switch(token.type)
			{
			case JSONTokenType.LEFT_BRACE:
				return parseObject();
			case JSONTokenType.LEFT_BRACKET:
				return parseArray();
			case JSONTokenType.STRING:
				return token.value;
			case JSONTokenType.NUMBER:
				return token.value;
			case JSONTokenType.TRUE:
				return token.value;
			case JSONTokenType.FALSE:
				return token.value;
			case JSONTokenType.NULL:
				return token.value;
			default:
				tokenizer.parseError("Unexpected " + token.value);
				break;
			}
			return null;
		}
	}
}
package com.adobe.serialization.json
{
	import flash.utils.*;

	public class JSONEncoder extends Object
	{
		private var jsonString:String;

		public function JSONEncoder(param1:*)
		{
			super();
			jsonString = convertToString(param1);
		}

		public function getString() : String
		{
			return jsonString;
		}

		private function convertToString(param1:*) : String
		{
			if(param1 is String)
			{
				return escapeString(param1);
			}
			if(param1 is Number)
			{
				return isFinite(param1) ? param1.toString() : "null";
			}
			else
			{
				if(param1 is Boolean)
				{
					return param1 ? "true" : "false";
				}
				else
				{
					if(param1 is Array)
					{
						return arrayToString(param1);
					}
					if(!(param1 is Object && param1 == null))
					{
						return objectToString(param1);
					}
				}
			}
			return "null";
		}

		private function escapeString(param1:String) : String
		{
			var _loc_3:String = null;
			var _loc_6:String = null;
			var _loc_7:String = null;
			var _loc_2:String = "";
			var _loc_4:Number = param1.length;
			var _loc_5:int = 0;
			while(_loc_5 < _loc_4)
			{
				_loc_3 = param1.charAt(_loc_5);
				switch(_loc_3)
				{
				case "\"":
					_loc_2 = _loc_2 + "\\\"";
					break;
				case "\\":
					_loc_2 = _loc_2 + "\\\\";
					break;
				case "\b":
					_loc_2 = _loc_2 + "\\b";
					break;
				case "\f":
					_loc_2 = _loc_2 + "\\f";
					break;
				case "\n":
					_loc_2 = _loc_2 + "\\n";
					break;
				case "\r":
					_loc_2 = _loc_2 + "\\r";
					break;
				case "\t":
					_loc_2 = _loc_2 + "\\t";
					break;
				default:
					if(_loc_3 < " ")
					{
						_loc_6 = _loc_3.charCodeAt(0).toString(16);
						_loc_7 = _loc_6.length == 2 ? "00" : "000";
						_loc_2 = _loc_2 + "\\u" + _loc_7 + _loc_6;
					}
					else
					{
						_loc_2 = _loc_2 + _loc_3;
					}
					break;
				}
				_loc_5++;
			}
			return "\"" + _loc_2 + "\"";
		}

		private function arrayToString(param1:Array) : String
		{
			var _loc_2:String = "";
			var _loc_3:int = 0;
			while(_loc_3 < param1.length)
			{
				if(_loc_2.length > 0)
				{
					_loc_2 = _loc_2 + ",";
				}
				_loc_2 = _loc_2 + convertToString(param1[_loc_3]);
				_loc_3++;
			}
			return "[" + _loc_2 + "]";
		}

		private function objectToString(param1:Object) : String
		{
			var value:Object = null;
			var key:String = null;
			var v:XML = null;
			var o:Object = param1;
			var s:String = "";
			var classInfo:XML = describeType(o);
			if(classInfo.@name.toString() == "Object")
			{
				var _loc_3:int = 0;
				var _loc_4:* = o;
				for each(key in _loc_4)
				{
					value = o[key];
					if(value is Function)
					{
						continue;
					}
					if(s.length > 0)
					{
						s = s + ",";
					}
					s = s + (escapeString(key) + ":") + convertToString(value);
				}
			}
			else
			{
				var _loc_3:int = 0;
				var _loc_6:int = 0;
				var _loc_7:* = classInfo.descendants();
				var _loc_5:Boolean = new XMLList("");
				for each(_loc_8 in _loc_7)
				{
					var _loc_9:Object = _loc_8;
					with(_loc_9)
					{
						if(name() == "variable" || name() == "accessor")
						{
							_loc_5[_loc_6] = _loc_9;
						}
					}
				}
				var _loc_4:* = _loc_5;
				for each(v in _loc_4)
				{
					if(s.length > 0)
					{
						s = s + ",";
					}
					s = s + (escapeString(v.@name.toString()) + ":") + convertToString(o[v.@name]);
				}
			}
			return "{" + s + "}";
		}
	}
}
package com.adobe.serialization.json
{
	public class JSONParseError extends Error
	{
		private var _location:int;
		private var _text:String;

		public function JSONParseError(param1:String = "", param2:int = 0, param3:String = "")
		{
			super(param1);
			_location = param2;
			_text = param3;
		}

		public function get location() : int
		{
			return _location;
		}

		public function get text() : String
		{
			return _text;
		}
	}
}
package com.adobe.serialization.json
{
	public class JSONToken extends Object
	{
		private var _type:int;
		private var _value:Object;

		public function JSONToken(param1:int = -1, param2:Object = null)
		{
			super();
			_type = param1;
			_value = param2;
		}

		public function get type() : int
		{
			return _type;
		}

		public function set type(param1:int) : void
		{
			_type = param1;
		}

		public function get value() : Object
		{
			return _value;
		}

		public function set value(param1:Object) : void
		{
			_value = param1;
		}
	}
}
package com.adobe.serialization.json
{
	public class JSONTokenizer extends Object
	{
		private var obj:Object;
		private var jsonString:String;
		private var loc:int;
		private var ch:String;

		public function JSONTokenizer(param1:String)
		{
			super();
			jsonString = param1;
			loc = 0;
			nextChar();
		}

		public function getNextToken() : JSONToken
		{
			var _loc_2:String = null;
			var _loc_3:String = null;
			var _loc_4:String = null;
			var _loc_1:JSONToken = new JSONToken();
			skipIgnored();
			switch(ch)
			{
			case "{":
				_loc_1.type = JSONTokenType.LEFT_BRACE;
				_loc_1.value = "{";
				nextChar();
				break;
			case "}":
				_loc_1.type = JSONTokenType.RIGHT_BRACE;
				_loc_1.value = "}";
				nextChar();
				break;
			case "[":
				_loc_1.type = JSONTokenType.LEFT_BRACKET;
				_loc_1.value = "[";
				nextChar();
				break;
			case "]":
				_loc_1.type = JSONTokenType.RIGHT_BRACKET;
				_loc_1.value = "]";
				nextChar();
				break;
			case ",":
				_loc_1.type = JSONTokenType.COMMA;
				_loc_1.value = ",";
				nextChar();
				break;
			case ":":
				_loc_1.type = JSONTokenType.COLON;
				_loc_1.value = ":";
				nextChar();
				break;
			case "t":
				_loc_2 = "t" + nextChar() + nextChar() + nextChar();
				if(_loc_2 == "true")
				{
					_loc_1.type = JSONTokenType.TRUE;
					_loc_1.value = true;
					nextChar();
				}
				else
				{
					parseError("Expecting 'true' but found " + _loc_2);
				}
				break;
			case "f":
				_loc_3 = "f" + nextChar() + nextChar() + nextChar() + nextChar();
				if(_loc_3 == "false")
				{
					_loc_1.type = JSONTokenType.FALSE;
					_loc_1.value = false;
					nextChar();
				}
				else
				{
					parseError("Expecting 'false' but found " + _loc_3);
				}
				break;
			case "n":
				_loc_4 = "n" + nextChar() + nextChar() + nextChar();
				if(_loc_4 == "null")
				{
					_loc_1.type = JSONTokenType.NULL;
					_loc_1.value = null;
					nextChar();
				}
				else
				{
					parseError("Expecting 'null' but found " + _loc_4);
				}
				break;
			case "\"":
				_loc_1 = readString();
				break;
			default:
				if(isDigit(ch) || ch == "-")
				{
					_loc_1 = readNumber();
				}
				else
				{
					if(ch == "")
					{
						return null;
					}
					parseError("Unexpected " + ch + " encountered");
				}
				break;
			}
			return _loc_1;
		}

		private function readString() : JSONToken
		{
			var _loc_3:String = null;
			var _loc_4:int = 0;
			var _loc_1:JSONToken = new JSONToken();
			_loc_1.type = JSONTokenType.STRING;
			var _loc_2:String = "";
			nextChar();
			while((ch == "\"") && ch == "")
			{
				if(ch == "\\")
				{
					nextChar();
					switch(ch)
					{
					case "\"":
						_loc_2 = _loc_2 + "\"";
						break;
					case "/":
						_loc_2 = _loc_2 + "/";
						break;
					case "\\":
						_loc_2 = _loc_2 + "\\";
						break;
					case "b":
						_loc_2 = _loc_2 + "\b";
						break;
					case "f":
						_loc_2 = _loc_2 + "\f";
						break;
					case "n":
						_loc_2 = _loc_2 + "\n";
						break;
					case "r":
						_loc_2 = _loc_2 + "\r";
						break;
					case "t":
						_loc_2 = _loc_2 + "\t";
						break;
					case "u":
						_loc_3 = "";
						_loc_4 = 0;
						while(_loc_4 < 4)
						{
							if(!isHexDigit(nextChar()))
							{
								parseError(" Excepted a hex digit, but found: " + ch);
							}
							_loc_3 = _loc_3 + ch;
							_loc_4++;
						}
						_loc_2 = _loc_2 + (String.fromCharCode(parseInt(_loc_3, 16)));
						break;
					default:
						_loc_2 = _loc_2 + "\\" + ch;
						break;
					}
				}
				else
				{
					_loc_2 = _loc_2 + ch;
				}
				nextChar();
			}
			if(ch == "")
			{
				parseError("Unterminated string literal");
			}
			nextChar();
			_loc_1.value = _loc_2;
			return _loc_1;
		}

		private function readNumber() : JSONToken
		{
			var _loc_1:JSONToken = new JSONToken();
			_loc_1.type = JSONTokenType.NUMBER;
			var _loc_2:String = "";
			if(ch == "-")
			{
				_loc_2 = _loc_2 + "-";
				nextChar();
			}
			if(!isDigit(ch))
			{
				parseError("Expecting a digit");
			}
			if(ch == "0")
			{
				_loc_2 = _loc_2 + ch;
				nextChar();
				if(isDigit(ch))
				{
					parseError("A digit cannot immediately follow 0");
				}
			}
			else
			{
				while(isDigit(ch))
				{
					_loc_2 = _loc_2 + ch;
					nextChar();
				}
			}
			if(ch == ".")
			{
				_loc_2 = _loc_2 + ".";
				nextChar();
				if(!isDigit(ch))
				{
					parseError("Expecting a digit");
				}
				while(isDigit(ch))
				{
					_loc_2 = _loc_2 + ch;
					nextChar();
				}
			}
			if(ch == "e" || ch == "E")
			{
				_loc_2 = _loc_2 + "e";
				nextChar();
				if(ch == "+" || ch == "-")
				{
					_loc_2 = _loc_2 + ch;
					nextChar();
				}
				if(!isDigit(ch))
				{
					parseError("Scientific notation number needs exponent value");
				}
				while(isDigit(ch))
				{
					_loc_2 = _loc_2 + ch;
					nextChar();
				}
			}
			var _loc_3:Number = Number(_loc_2);
			if(isFinite(_loc_3) && !isNaN(_loc_3))
			{
				_loc_1.value = _loc_3;
				return _loc_1;
			}
			parseError("Number " + _loc_3 + " is not valid!");
			return null;
		}

		private function nextChar() : String
		{
			var _loc_2:* = this.loc + 1;
			this.loc = _loc_2;
			var _loc_1:charAt = jsonString.charAt(this.loc);
			ch = _loc_1;
			return _loc_1;
		}

		private function skipIgnored() : void
		{
			skipWhite();
			skipComments();
			skipWhite();
		}

		private function skipComments() : void
		{
			if(ch == "/")
			{
				nextChar();
				switch(ch)
				{
				case "/":
					do
					{
						nextChar();
					}
					while(!(ch == "\n") && ch == "");
					nextChar();
					break;
				case "*":
					nextChar();
					while(true)
					{
						if(ch == "*")
						{
							nextChar();
							if(ch == "/")
							{
								nextChar();
								break;
							}
						}
						else
						{
							nextChar();
						}
						if(ch == "")
						{
							parseError("Multi-line comment not closed");
						}
					}
					break;
				default:
					parseError("Unexpected " + ch + " encountered (expecting '/' or '*' )");
					break;
				}
			}
		}

		private function skipWhite() : void
		{
			while(isWhiteSpace(ch))
			{
				nextChar();
			}
		}

		private function isWhiteSpace(param1:String) : Boolean
		{
			return param1 == " " || param1 == "\t" || param1 == "\n";
		}

		private function isDigit(param1:String) : Boolean
		{
			return param1 >= "0" && param1 <= "9";
		}

		private function isHexDigit(param1:String) : Boolean
		{
			var _loc_2:String = param1.toUpperCase();
			return isDigit(param1) || _loc_2 >= "A" && _loc_2 <= "F";
		}

		public function parseError(param1:String) : void
		{
			throw new JSONParseError(param1, loc, jsonString);
		}
	}
}
package com.adobe.serialization.json
{
	public class JSONTokenType extends Object
	{
		public static const UNKNOWN:int = -1;
		public static const COMMA:int = 0;
		public static const LEFT_BRACE:int = 1;
		public static const RIGHT_BRACE:int = 2;
		public static const LEFT_BRACKET:int = 3;
		public static const RIGHT_BRACKET:int = 4;
		public static const COLON:int = 6;
		public static const TRUE:int = 7;
		public static const FALSE:int = 8;
		public static const NULL:int = 9;
		public static const STRING:int = 10;
		public static const NUMBER:int = 11;

		public function JSONTokenType()
		{
			super();
		}
	}
}
package com.adobe.utils
{
	public class StringUtil extends Object
	{
		final public static function stringsAreEqual(param1:String, param2:String, param3:Boolean) : Boolean
		{
			if(param3)
			{
				return param1 == param2;
			}
			return param1.toUpperCase() == param2.toUpperCase();
		}

		final public static function trim(param1:String) : String
		{
			return StringUtil.ltrim(StringUtil.rtrim(param1));
		}

		final public static function ltrim(param1:String) : String
		{
			var _loc_2:Number = param1.length;
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2)
			{
				if(param1.charCodeAt(_loc_3) > 32)
				{
					return param1.substring(_loc_3);
				}
				_loc_3 = _loc_3 + 1;
			}
			return "";
		}

		final public static function rtrim(param1:String) : String
		{
			var _loc_2:Number = param1.length;
			var _loc_3:Number = _loc_2;
			while(_loc_3 > 0)
			{
				if((param1.charCodeAt(_loc_3 - 1)) > 32)
				{
					return param1.substring(0, _loc_3);
				}
				_loc_3 = _loc_3 - 1;
			}
			return "";
		}

		final public static function beginsWith(param1:String, param2:String) : Boolean
		{
			return param2 == (param1.substring(0, param2.length));
		}

		final public static function endsWith(param1:String, param2:String) : Boolean
		{
			return param2 == (param1.substring(param1.length - param2.length));
		}

		final public static function remove(param1:String, param2:String) : String
		{
			return StringUtil.replace(param1, param2, "");
		}

		final public static function replace(param1:String, param2:String, param3:String) : String
		{
			var _loc_9:int = NaN;
			var _loc_4:String = new String();
			var _loc_5:Boolean = false;
			var _loc_6:Number = param1.length;
			var _loc_7:Number = param2.length;
			var _loc_8:Number = 0;
			while(_loc_8 < _loc_6)
			{
				if(param1.charAt(_loc_8) == param2.charAt(0))
				{
					_loc_5 = true;
					_loc_9 = 0;
					while(_loc_9 < _loc_7)
					{
						if((param1.charAt(_loc_8 + _loc_9)) != param2.charAt(_loc_9))
						{
							_loc_5 = false;
							break;
						}
						_loc_9 = _loc_9 + 1;
					}
				}
				_loc_4 = _loc_4 + param1.charAt(_loc_8);
				_loc_8 = _loc_8 + 1;
			}
			return _loc_4;
		}

		public function StringUtil()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4
{
	import com.electrotank.electroserver4.connection.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;
	import com.electrotank.electroserver4.protocol.binary.*;
	import com.electrotank.electroserver4.protocol.text.*;
	import com.electrotank.electroserver4.rtmpconnection.*;
	import com.electrotank.electroserver4.transaction.*;
	import com.electrotank.electroserver4.user.*;
	import com.electrotank.electroserver4.utils.*;
	import com.electrotank.electroserver4.zone.*;
	import flash.events.*;
	import flash.utils.*;

	public class ElectroServer extends Observable
	{
		private var protocol:String;
		private var connections:Array;
		private var as2ProtocolHandler:As2ProtocolHandler;
		private var transactionHandler:TransactionHandler;
		private var zoneManager:ZoneManager;
		private var userManager:UserManager;
		private var debug:Boolean;
		private var buddyList:Object;
		private var messageQueue:Array;
		private var history:Array;
		private var additionalLoginPassword:String;
		private var isConnected:Boolean;
		private var expectedInboundId:Number;
		private var isLoggedIn:Boolean;
		private var rtmpConnection:RtmpConnection;
		private var isSimulatingLatency:Boolean;
		private var simulatedLatency:Number;
		private var inboundLatencyQueue:Array;
		private var outboundLatencyQueue:Array;
		private var timerId:Number;
		private var latencyTimer:Timer;

		public function ElectroServer()
		{
			super();
			initialize();
		}

		public function addBuddy(param1:String, param2:EsObject) : void
		{
			var _loc_3:AddBuddyRequest = new AddBuddyRequest();
			_loc_3.setBuddyName(param1);
			_loc_3.setEsObject(param2);
			getBuddyList()[param1] = param2;
			send(_loc_3);
		}

		public function additionalLogin(param1:LoginRequest) : void
		{
			additionalLoginPassword = param1.getSharedSecret();
			send(param1);
		}

		public function close() : void
		{
			var _loc_2:AbstractConnection = null;
			if(getRtmpConnection() != null)
			{
				if(getRtmpConnection().getIsConnected())
				{
					getRtmpConnection().close();
				}
			}
			var _loc_1:Number = 0;
			while(_loc_1 < getConnections().length)
			{
				_loc_2 = getConnections()[_loc_1];
				_loc_2.close();
				_loc_1 = _loc_1 + 1;
			}
		}

		public function closeRtmpConnection() : void
		{
			rtmpConnection.close();
		}

		public function createConnection(param1:String, param2:Number) : Connection
		{
			var _loc_3:Connection = new Connection(param1, param2, getProtocol());
			_loc_3.setId(getConnections().length);
			_loc_3.addListener(this);
			_loc_3.connect();
			addConnection(_loc_3);
			return _loc_3;
		}

		public function createHttpConnection(param1:String, param2:Number) : HttpConnection
		{
			if(getProtocol() != Protocol.BINARY)
			{
				throw new Error("ElectroServer#getProtocol() must be Protocol.BINARY");
			}
			var _loc_3:HttpConnection = new HttpConnection(param1, param2, this);
			_loc_3.setId(getConnections().length);
			_loc_3.addListener(this);
			_loc_3.connect();
			addConnection(_loc_3);
			return _loc_3;
		}

		public function createRtmpConnection(param1:String, param2:Number) : RtmpConnection
		{
			rtmpConnection = new RtmpConnection(this);
			var _loc_3:String = escape(userManager.getMe().getUserName());
			additionalLoginPassword = (Math.round(1000000 * Math.random())).toString();
			var _loc_4:String = "rtmp://" + param1 + ":" + param2 + "/" + _loc_3 + "/" + additionalLoginPassword;
			rtmpConnection.connect(_loc_4);
			return this.rtmpConnection;
		}

		public function getBuddyList() : Object
		{
			return buddyList;
		}

		public function getConnections() : Array
		{
			return connections;
		}

		public function getDebug() : Boolean
		{
			return this.debug;
		}

		public function getIsLoggedIn() : Boolean
		{
			return isLoggedIn;
		}

		public function getRtmpConnection() : RtmpConnection
		{
			return rtmpConnection;
		}

		public function getUserManager() : UserManager
		{
			return userManager;
		}

		public function getZoneManager() : ZoneManager
		{
			return zoneManager;
		}

		public function handleError(param1:GenericErrorResponse) : void
		{
			Logger.log("Error occurred", Logger.info);
			var _loc_2:MessageType = param1.getRequestMessageType();
			Logger.log(_loc_2.getMessageTypeName(), Logger.info);
			Logger.log(param1.getErrorType().getDescription(), Logger.info);
		}

		public function handleLoginResponse(param1:LoginResponse) : void
		{
			var _loc_2:User = null;
			if(!isLoggedIn && param1.getAccepted())
			{
				isLoggedIn = true;
				_loc_2 = new User();
				_loc_2.setUserId(param1.getUserId());
				_loc_2.setUserName(param1.getUserName());
				_loc_2.setIsMe(true);
				_loc_2.setUserVariables(param1.getUserVariables());
				buddyList = param1.getBuddies();
				userManager.addUser(_loc_2);
				userManager.addReference(_loc_2);
				userManager.setMe(_loc_2);
			}
		}

		public function processCompositeMessages(param1:Array) : void
		{
			var _loc_3:Message = null;
			var _loc_4:MessageType = null;
			var _loc_2:Number = 0;
			while(_loc_2 < param1.length)
			{
				_loc_3 = Message(param1[_loc_2]);
				_loc_4 = _loc_3.getMessageType();
				transactionHandler.getTransaction(_loc_4).execute(_loc_3, this);
				_loc_2 = _loc_2 + 1;
			}
		}

		public function removeBuddy(param1:String) : void
		{
			var _loc_2:RemoveBuddyRequest = new RemoveBuddyRequest();
			_loc_2.setBuddyName(param1);
			getBuddyList()[param1] = null;
			send(_loc_2);
		}

		public function send(param1:Message) : SendStatus
		{
			var _loc_2:SendStatus = new SendStatus();
			if(!isSimulatingLatency)
			{
				_loc_2 = reallySend(param1);
			}
			else
			{
				addToOutboundLatencyQueue({time:getTimer(), message:param1});
			}
			return _loc_2;
		}

		private function addToOutboundLatencyQueue(param1:Object) : void
		{
			outboundLatencyQueue.push(param1);
		}

		private function reallySend(param1:Message) : SendStatus
		{
			var _loc_7:int = NaN;
			var _loc_8:String = null;
			var _loc_2:SendStatus = new SendStatus();
			if(!isConnected)
			{
				_loc_2.setIsSent(false);
				_loc_2.setReason(SendStatus.NOT_CONNECTED);
				return _loc_2;
			}
			var _loc_3:ValidationResponse = param1.validate();
			_loc_2.setValidationResponse(_loc_3);
			if(!_loc_3.getIsValid())
			{
				_loc_2.setIsSent(false);
				_loc_2.setReason(SendStatus.VALIDATION_FAILED);
				Logger.log("Request failed validation for these reasons:", Logger.info);
				_loc_7 = 0;
				while(_loc_7 < _loc_3.getProblems().length)
				{
					_loc_8 = _loc_3.getProblems()[_loc_7];
					Logger.log(_loc_8, Logger.info);
					_loc_7 = _loc_7 + 1;
				}
				return _loc_2;
			}
			while(!param1.getIsRealServerMessage())
			{
				param1 = param1.getRealMessage();
			}
			var _loc_4:AbstractConnection = getConnections()[getConnections().length - 1];
			if(param1.getMessageType().getMessageTypeId() == "&")
			{
				_loc_4 = getConnections()[0];
			}
			var _loc_5:MessageWriter = getMessageWriter();
			_loc_5.writeCharacter(param1.getMessageType().getMessageTypeId());
			var _loc_6:Number = _loc_4.getNextOutboundId();
			_loc_5.writeInteger(_loc_6, MessageConstants.MESSAGE_ID_SIZE);
			as2ProtocolHandler.getMessageCodec(param1.getMessageType()).encode(_loc_5, param1);
			Logger.log("--> Sending :: conId: " + _loc_4.getId(), Logger.info);
			Logger.log((param1.getMessageType().getMessageTypeName() + ": ") + _loc_5.getData(), Logger.info);
			storeMessage(_loc_6, param1);
			if(getProtocol() == Protocol.TEXT)
			{
				_loc_4.send(_loc_5.getData());
			}
			else
			{
				if(getProtocol() == Protocol.BINARY)
				{
					_loc_4.sendBinary(BinaryMessageWriter(_loc_5).getBuffer());
				}
			}
			_loc_2.setIsSent(true);
			return _loc_2;
		}

		public function setDebug(param1:Boolean) : void
		{
			this.debug = param1;
		}

		public function setProtocol(param1:String) : void
		{
			this.protocol = param1;
		}

		public function getProtocol() : String
		{
			return protocol;
		}

		public function onStringData(param1:Object) : void
		{
			if(!isSimulatingLatency)
			{
				processStringData(param1);
			}
			else
			{
				param1.protocol = Protocol.TEXT;
				addToInboundLatencyQueue(param1);
			}
		}

		private function processStringData(param1:Object) : void
		{
			var _loc_5:int = NaN;
			var _loc_2:AbstractConnection = AbstractConnection(param1.target);
			var _loc_3:MessageReader = getMessageReader();
			StringMessageReader(_loc_3).setMessage(param1.data);
			var _loc_4:String = _loc_3.nextCharacter();
			if(_loc_4 != "<")
			{
				_loc_5 = _loc_3.nextInteger(MessageConstants.MESSAGE_ID_SIZE);
				processMessage(_loc_3, _loc_4, _loc_5, _loc_2);
			}
		}

		public function startSimulatingLatency(param1:Number) : void
		{
			isSimulatingLatency = true;
			simulatedLatency = param1;
			latencyTimer = new Timer(30);
			latencyTimer.start();
			latencyTimer.addEventListener(TimerEvent.TIMER, checkLatencyQueueEvent);
		}

		public function stopSimulatingLatency() : void
		{
			isSimulatingLatency = false;
			if(latencyTimer != null)
			{
				latencyTimer.stop();
				latencyTimer.removeEventListener(TimerEvent.TIMER, checkLatencyQueueEvent);
				latencyTimer = null;
			}
			purgeLatencyQueue();
		}

		private function purgeLatencyQueue() : void
		{
			purgeOutboundLatencyQueue();
			purgeInboundLatencyQueue();
		}

		private function purgeInboundLatencyQueue() : void
		{
			var _loc_2:Object = null;
			var _loc_1:Number = 0;
			while(_loc_1 < inboundLatencyQueue.length)
			{
				_loc_2 = inboundLatencyQueue[_loc_1];
				if(_loc_2.protocol == Protocol.TEXT)
				{
					processStringData(_loc_2);
				}
				else
				{
					if(_loc_2.protocol == Protocol.BINARY)
					{
						processBinaryData(_loc_2);
					}
				}
				_loc_1 = _loc_1 + 1;
			}
			inboundLatencyQueue = new Array();
		}

		private function addToInboundLatencyQueue(param1:Object) : void
		{
			param1.time = getTimer();
			inboundLatencyQueue.push(param1);
		}

		private function checkLatencyQueueEvent(param1:TimerEvent) : void
		{
			checkLatencyQueue();
		}

		private function checkLatencyQueue() : void
		{
			checkInboundLatencyQueue();
			checkOutboundLatencyQueue();
		}

		private function checkInboundLatencyQueue() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			var _loc_3:Object = null;
			if(inboundLatencyQueue.length > 0)
			{
				_loc_1 = getTimer();
				_loc_2 = 0;
				_loc_3 = inboundLatencyQueue[_loc_2];
				if(_loc_1 >= (_loc_3.time + simulatedLatency))
				{
					if(_loc_3.protocol == Protocol.TEXT)
					{
						processStringData(_loc_3);
					}
					else
					{
						if(_loc_3.protocol == Protocol.BINARY)
						{
							processBinaryData(_loc_3);
						}
					}
					inboundLatencyQueue.shift();
					checkLatencyQueue();
				}
			}
		}

		private function checkOutboundLatencyQueue() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			var _loc_3:Object = null;
			if(outboundLatencyQueue.length > 0)
			{
				_loc_1 = getTimer();
				_loc_2 = 0;
				_loc_3 = outboundLatencyQueue[_loc_2];
				if(_loc_1 >= (_loc_3.time + simulatedLatency))
				{
					reallySend(_loc_3.message);
					outboundLatencyQueue.shift();
					checkOutboundLatencyQueue();
				}
			}
		}

		private function purgeOutboundLatencyQueue() : void
		{
			var _loc_1:Number = 0;
			while(_loc_1 < outboundLatencyQueue.length)
			{
				reallySend(outboundLatencyQueue[_loc_1].message);
				_loc_1 = _loc_1 + 1;
			}
			outboundLatencyQueue = new Array();
		}

		public function onBinaryData(param1:Object) : void
		{
			if(!isSimulatingLatency)
			{
				processBinaryData(param1);
			}
			else
			{
				param1.protocol = Protocol.BINARY;
				addToInboundLatencyQueue(param1);
			}
		}

		private function processBinaryData(param1:Object) : void
		{
			var _loc_2:AbstractConnection = AbstractConnection(param1.target);
			var _loc_3:MessageReader = getMessageReader();
			BinaryMessageReader(_loc_3).setBuffer(param1.data);
			var _loc_4:String = _loc_3.nextCharacter();
			var _loc_5:Number = _loc_3.nextInteger(MessageConstants.MESSAGE_ID_SIZE);
			processMessage(_loc_3, _loc_4, _loc_5, _loc_2);
		}

		private function processMessage(param1:MessageReader, param2:String, param3:Number, param4:AbstractConnection) : void
		{
			var _loc_6:Message = null;
			var _loc_7:QueuedMessage = null;
			var _loc_8:int = NaN;
			var _loc_5:MessageType = MessageType.findTypeById(param2);
			if(expectedInboundId == param3 || param3 == 0)
			{
				Logger.log("<-- Receiving :: conId: " + param4.getId(), Logger.info);
				Logger.log(_loc_5.getMessageTypeName(), Logger.info);
				_loc_6 = as2ProtocolHandler.getMessageCodec(_loc_5).decode(param1);
				_loc_6.setMessageId(param3);
				transactionHandler.getTransaction(_loc_5).execute(_loc_6, this);
				if(param4.getId() == 0)
				{
					expectedInboundId = param3 + 1;
				}
				else
				{
					if(param3 != 0)
					{
						var _loc_10:* = this.expectedInboundId + 1;
						this.expectedInboundId = _loc_10;
					}
				}
				checkQueue();
			}
			else
			{
				if(param3 == -1)
				{
					_loc_8 = expectedInboundId;
					processMessage(param1, param2, _loc_8, param4);
					expectedInboundId = _loc_8;
					return;
				}
				Logger.log("<-- Receiving [QUEUED] :: conId: " + param4.getId(), Logger.info);
				Logger.log(_loc_5.getMessageTypeName(), Logger.info);
				_loc_7 = new QueuedMessage(param1, param2, param3, param4);
				messageQueue.push(_loc_7);
				messageQueue.sortOn("messageId", Array.NUMERIC);
			}
		}

		private function checkQueue() : void
		{
			var _loc_1:QueuedMessage = null;
			if(messageQueue.length > 0)
			{
				_loc_1 = messageQueue[0];
				if(_loc_1.messageId == expectedInboundId)
				{
					messageQueue.shift();
					processMessage(_loc_1.getMessageReader(), _loc_1.getId(), _loc_1.messageId, _loc_1.getConnection());
				}
			}
		}

		private function getMessageWriter() : MessageWriter
		{
			var _loc_1:MessageWriter = null;
			switch(getProtocol())
			{
			case Protocol.TEXT:
				_loc_1 = new StringMessageWriter();
				break;
			case Protocol.BINARY:
				_loc_1 = new BinaryMessageWriter();
				break;
			default:
				throw new Error("Protocol not supported: " + getProtocol());
				break;
			}
			return _loc_1;
		}

		private function getMessageReader() : MessageReader
		{
			var _loc_1:MessageReader = null;
			switch(getProtocol())
			{
			case Protocol.TEXT:
				_loc_1 = new StringMessageReader();
				break;
			case Protocol.BINARY:
				_loc_1 = new BinaryMessageReader();
				break;
			default:
				throw new Error("Protocol not supported: " + getProtocol());
				break;
			}
			return _loc_1;
		}

		private function storeMessage(param1:Number, param2:Message) : void
		{
			var _loc_3:Object = new Object();
			_loc_3.outId = param1;
			_loc_3.message = param2;
			history.unshift(_loc_3);
			if(history.length > 10)
			{
				history.pop();
			}
		}

		private function getOldMessage(param1:Number) : Message
		{
			var _loc_2:Message = null;
			var _loc_4:Object = null;
			var _loc_3:Number = 0;
			while(_loc_3 < history.length)
			{
				_loc_4 = history[_loc_3];
				if(_loc_4.id == param1)
				{
					_loc_2 = _loc_4.message;
					break;
				}
				_loc_3 = _loc_3 + 1;
			}
			return _loc_2;
		}

		public function onConnect(param1:Object) : void
		{
			var _loc_2:AbstractConnection = null;
			var _loc_4:ConnectionEvent = null;
			isConnected = false;
			var _loc_3:Number = 0;
			while(_loc_3 < connections.length)
			{
				_loc_2 = connections[_loc_3];
				if(_loc_2.getIsConnected())
				{
					isConnected = true;
					break;
				}
				_loc_3 = _loc_3 + 1;
			}
			if(param1.success)
			{
			}
			else
			{
				_loc_4 = new ConnectionEvent();
				_loc_4.setAccepted(false);
				_loc_4.setEsError(Errors.FailedToConnect);
				dispatchEvent(_loc_4);
			}
		}

		public function onClose(param1:Object) : void
		{
			var _loc_2:AbstractConnection = AbstractConnection(param1.target);
			Logger.log("--connection closed-- id: " + _loc_2.getId(), Logger.info);
			var _loc_3:ConnectionClosedEvent = new ConnectionClosedEvent();
			_loc_3.setConnection(_loc_2);
			dispatchEvent(_loc_3);
		}

		public function onLog(param1:Object) : void
		{
			var _loc_2:Object = param1.log;
			if(debug)
			{
				trace(_loc_2.message);
			}
		}

		private function initialize() : void
		{
			setProtocol(Protocol.TEXT);
			setDebug(false);
			expectedInboundId = 0;
			isConnected = false;
			Logger.init();
			Logger.getInstance().addEventListener(Logger.LOGGED, "onLog", this);
			history = new Array();
			connections = new Array();
			messageQueue = new Array();
			buddyList = new Object();
			as2ProtocolHandler = new As2ProtocolHandler();
			transactionHandler = new TransactionHandler();
			zoneManager = new ZoneManager();
			userManager = new UserManager();
			isSimulatingLatency = false;
			inboundLatencyQueue = new Array();
			outboundLatencyQueue = new Array();
			addEventListener(MessageType.ValidateAdditionalLoginRequest, "onValidateAdditionalLoginRequest", this);
		}

		public function onValidateAdditionalLoginRequest(param1:ValidateAdditionalLoginRequest) : void
		{
			var _loc_2:Boolean = param1.getSecret() == additionalLoginPassword;
			var _loc_3:ValidateAdditionalLoginResponse = new ValidateAdditionalLoginResponse();
			_loc_3.setApproved(_loc_2);
			_loc_3.setSecret(additionalLoginPassword);
			send(_loc_3);
		}

		private function addConnection(param1:AbstractConnection) : void
		{
			getConnections().push(param1);
		}
	}
}
package com.electrotank.electroserver4
{
	public class MessageConstants extends Object
	{
		public static var MESSAGE_HEADER_SIZE:Number = 1;
		public static var MESSAGE_ID_SIZE:Number = 4;
		public static var GATEWAY_ID_LENGTH:Number = 13;
		public static var GATEWAY_STATE_LENGTH:Number = 2;
		public static var USER_ID_LENGTH:Number = 13;
		public static var USER_NAME_PREFIX_LENGTH:Number = 2;
		public static var USER_COUNT_LENGTH:Number = 4;
		public static var FULL_USER_COUNT_LENGTH:Number = 6;
		public static var USER_VARIABLE_COUNT_LENGTH:Number = 2;
		public static var USER_VARIABLE_NAME_PREFIX_LENGTH:Number = 2;
		public static var USER_VARIABLE_VALUE_PREFIX_LENGTH:Number = 4;
		public static var PASSWORD_PREFIX_LENGTH:Number = 2;
		public static var VIDEO_STREAM_NAME_PREFIX_LENGTH:Number = 2;
		public static var VARIABLE_COUNT_LENGTH:Number = 2;
		public static var VARIABLE_NAME_PREFIX_LENGTH:Number = 2;
		public static var VARIABLE_VALUE_PREFIX_LENGTH:Number = 5;
		public static var ZONE_COUNT_LENGTH:Number = 5;
		public static var ZONE_ID_LENGTH:Number = 5;
		public static var ZONE_NAME_PREFIX_LENGTH:Number = 3;
		public static var UPDATE_ACTION_LENGTH:Number = 1;
		public static var ROOM_ID_LENGTH:Number = 5;
		public static var ROOM_NAME_PREFIX_LENGTH:Number = 3;
		public static var ROOM_COUNT_LENGTH:Number = 5;
		public static var ROOM_CAPACITY_LENGTH:Number = 3;
		public static var ROOM_PASSWORD_PREFIX_LENGTH:Number = 2;
		public static var ROOM_DESCRIPTION_PREFIX_LENGTH:Number = 3;
		public static var ROOM_EVICTION_REASON_PREFIX_LENGTH:Number = 3;
		public static var ROOM_BAN_DURATION_LENGTH:Number = 6;
		public static var ROOM_VARIABLE_COUNT_LENGTH:Number = 2;
		public static var ROOM_VARIABLE_NAME_PREFIX_LENGTH:Number = 2;
		public static var FILTER_NAME_PREFIX_LENGTH:Number = 2;
		public static var FILTER_FAILURES_BEFORE_KICK_LENGTH:Number = 2;
		public static var FILTER_KICKS_BEFORE_BAN_LENGTH:Number = 2;
		public static var FLOODING_FILTER_MAX_DUP_MESSAGES_LENGTH:Number = 2;
		public static var FLOODING_FILTER_WINDOW_DURATION_LENGTH:Number = 3;
		public static var FLOODING_FILTER_MAX_MESSAGE_IN_WINDOW_LENGTH:Number = 2;
		public static var PUBLIC_MESSAGE_PREFIX_LENGTH:Number = 4;
		public static var PRIVATE_MESSAGE_PREFIX_LENGTH:Number = 4;
		public static var MESSAGE_NUMBER_LENGTH:Number = 4;
		public static var REQUEST_ID_LENGTH:Number = 4;
		public static var ERROR_ID_LENGTH:Number = 3;
		public static var DEFAULT_LONG_LENGTH:Number = 64;
		public static var DEFAULT_DOUBLE_LENGTH:Number = 64;
		public static var PASSPHRASE_PREFIX_LENGTH:Number = 4;
		public static var ZONE_AND_ROOM_ID_LIST_LENGTH:Number = 2;
		public static var SHARED_SECRET_LENGTH:Number = 2;
		public static var PLUGIN_COUNT_LENGTH:Number = 2;
		public static var EXTENSION_NAME_PREFIX_LENGTH:Number = 2;
		public static var PLUGIN_NAME_PREFIX_LENGTH:Number = 2;
		public static var PLUGIN_HANDLE_PREFIX_LENGTH:Number = 2;
		public static var PLUGIN_PARM_COUNT_LENGTH:Number = 2;
		public static var PLUGIN_PARM_NAME_PREFIX_LENGTH:Number = 2;
		public static var PLUGIN_PARM_VALUE_PREFIX_LENGTH:Number = 4;
		public static var PROTOCOL_COUNT_LENGTH:Number = 3;
		public static var PROTOCOL_HOST_PREFIX_LENGTH:Number = 2;
		public static var PROTOCOL_PORT_LENGTH:Number = 5;
		public static var PROTOCOL_LENGTH:Number = 2;
		public static var CUSTOM_POLICY_FILE_CONTENTS_PREFIX_LENGTH:Number = 4;
		public static var COMPOSITE_ESOBJECT_ARRAY_PREFIX_LENGTH:Number = 2;
		public static var HASH_ID_LENGTH:Number = 11;

		public function MessageConstants()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4
{
	import com.electrotank.electroserver4.message.*;

	public class SendStatus extends Object
	{
		public static var NOT_CONNECTED:String = "not_connected";
		public static var VALIDATION_FAILED:String = "validation_failed";
		private var isSent:Boolean;
		private var reason:String;
		private var validationResponse:ValidationResponse;

		public function SendStatus()
		{
			super();
		}

		public function setValidationResponse(param1:ValidationResponse) : void
		{
			this.validationResponse = param1;
		}

		public function getValidationResponse() : ValidationResponse
		{
			return this.validationResponse;
		}

		public function setIsSent(param1:Boolean) : void
		{
			this.isSent = param1;
		}

		public function getIsSent() : Boolean
		{
			return isSent;
		}

		public function setReason(param1:String) : void
		{
			this.reason = param1;
		}

		public function getReason() : String
		{
			return reason;
		}
	}
}
package com.electrotank.electroserver4.connection
{
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.utils.*;
	import flash.utils.*;

	public class AbstractConnection extends Observable
	{
		private var ip:String;
		private var port:Number;
		private var id:Number;
		private var outboundId:Number = -1;
		private var expectedInboundId:Number = 0;
		private var isConnected:Boolean = false;
		private var protocol:String;
		public var onConnect:Function;
		public var onClose:Function;

		public function AbstractConnection(param1:String, param2:Number, param3:String)
		{
			super();
			this.ip = param1;
			this.port = param2;
			this.protocol = param3;
		}

		public function getIp() : String
		{
			return ip;
		}

		public function getPort() : Number
		{
			return port;
		}

		public function setId(param1:Number) : void
		{
			this.id = param1;
		}

		public function getId() : Number
		{
			return id;
		}

		public function getProtocol() : String
		{
			return protocol;
		}

		public function setExpectedInboundId(param1:Number) : void
		{
			expectedInboundId = param1;
		}

		public function getExpectedInboundId() : Number
		{
			return expectedInboundId;
		}

		public function getNextOutboundId() : Number
		{
			var _loc_2:* = this.outboundId + 1;
			this.outboundId = _loc_2;
			if(outboundId == 10000)
			{
				outboundId = 0;
			}
			return outboundId;
		}

		public function getIsConnected() : Boolean
		{
			return isConnected;
		}

		public function send(param1:String) : void
		{
			if(getProtocol() == Protocol.TEXT)
			{
				throw new Error("Must implement for text protocol");
			}
			throw new Error("Use sendBinary for binary connections");
		}

		public function sendBinary(param1:ByteArray) : void
		{
			if(getProtocol() == Protocol.BINARY)
			{
				throw new Error("Must implement for binary protocol");
			}
			throw new Error("Use send for text connections");
		}

		final public function close() : void
		{
			doClose();
			onPreClose();
		}

		protected function doClose() : void
		{
			throw new Error("Must implement close");
		}

		public function onPreConnect(param1:Boolean) : void
		{
			isConnected = param1;
			notifyListeners("onConnect", {target:this, success:param1});
		}

		public function connect() : void
		{
			throw new Error("Must implement connect");
		}

		public function onPreClose() : void
		{
			isConnected = false;
			notifyListeners("onClose", {target:this});
		}
	}
}
package com.electrotank.electroserver4.connection
{
	import com.electrotank.electroserver4.entities.*;
	import flash.events.*;
	import flash.net.*;
	import flash.system.*;
	import flash.utils.*;

	public class Connection extends AbstractConnection
	{
		private var socket:XMLSocket;
		private var binarySocket:Socket;
		private var handledPolicyFile:Boolean;
		private var waitingForHeader:Boolean;
		private var bytesNeeded:int;
		public var onData:Function;

		public function Connection(param1:String, param2:Number, param3:String)
		{
			super(param1, param2, param3);
			trace("Connection:init()");
			if(param3 == Protocol.BINARY)
			{
				waitingForHeader = true;
				handledPolicyFile = false;
				binarySocket = new Socket();
				binarySocket.addEventListener(Event.CONNECT, onBinaryConnect);
				binarySocket.addEventListener(Event.CLOSE, onBinaryClose);
				binarySocket.addEventListener(ProgressEvent.SOCKET_DATA, onBinarySocketData);
				binarySocket.addEventListener(IOErrorEvent.IO_ERROR, onBinaryIOErrorEvent);
			}
			Security.loadPolicyFile("xmlsocket://" + getIp() + ":" + getPort());
			socket = new XMLSocket();
			configureListeners(socket);
		}

		private function onBinaryIOErrorEvent(param1:IOErrorEvent) : void
		{
			onPreConnect(false);
		}

		private function onBinaryClose(param1:Event) : void
		{
			onPreClose();
		}

		private function onBinaryConnect(param1:Event) : void
		{
			onPreConnect(true);
		}

		private function onBinarySocketData(param1:ProgressEvent) : void
		{
			if(!handledPolicyFile)
			{
				if(binarySocket.readUTFBytes(1) == "<")
				{
					do
					{
					}
					while(binarySocket.readByte() != 0);
					handledPolicyFile = true;
				}
			}
			processBinarySocketData();
		}

		private function processBinarySocketData() : void
		{
			var _loc_1:ByteArray = null;
			if(!binarySocket.connected)
			{
				return;
			}
			if(waitingForHeader)
			{
				if(binarySocket.bytesAvailable >= 4)
				{
					bytesNeeded = binarySocket.readInt();
					waitingForHeader = false;
				}
			}
			if(!waitingForHeader)
			{
				if(binarySocket.bytesAvailable >= bytesNeeded)
				{
					_loc_1 = new ByteArray();
					binarySocket.readBytes(_loc_1, 0, bytesNeeded);
					notifyListeners("onBinaryData", {target:this, data:_loc_1});
					waitingForHeader = true;
					processBinarySocketData();
				}
			}
		}

		override public function sendBinary(param1:ByteArray) : void
		{
			binarySocket.writeBytes(param1);
			binarySocket.flush();
		}

		private function configureListeners(param1:IEventDispatcher) : void
		{
			param1.addEventListener(Event.CLOSE, closeHandler);
			param1.addEventListener(Event.CONNECT, connectHandler);
			param1.addEventListener(DataEvent.DATA, dataHandler);
			param1.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
			param1.addEventListener(ProgressEvent.PROGRESS, progressHandler);
			param1.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
		}

		private function closeHandler(param1:Event) : void
		{
			onPreClose();
		}

		private function connectHandler(param1:Event) : void
		{
			onPreConnect(true);
		}

		private function dataHandler(param1:DataEvent) : void
		{
			onPreData(param1.data);
		}

		private function ioErrorHandler(param1:IOErrorEvent) : void
		{
			onPreConnect(false);
		}

		private function progressHandler(param1:ProgressEvent) : void
		{
		}

		private function securityErrorHandler(param1:SecurityErrorEvent) : void
		{
			trace("securityErrorHandler: " + param1);
		}

		override public function send(param1:String) : void
		{
			socket.send(param1);
		}

		override protected function doClose() : void
		{
			if(getProtocol() == Protocol.TEXT)
			{
				socket.close();
			}
			else
			{
				if(getProtocol() == Protocol.BINARY)
				{
					binarySocket.close();
				}
			}
		}

		override public function connect() : void
		{
			if(getProtocol() == Protocol.TEXT)
			{
				socket.connect(getIp(), getPort());
			}
			else
			{
				if(getProtocol() == Protocol.BINARY)
				{
					binarySocket.connect(getIp(), getPort());
				}
			}
		}

		public function onPreData(param1:String) : void
		{
			notifyListeners("onStringData", {target:this, data:param1});
		}
	}
}
package com.electrotank.electroserver4.connection
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import flash.events.*;
	import flash.system.*;
	import flash.utils.*;

	public class HttpConnection extends AbstractConnection
	{
		private var workers:Array;
		private var sessionKey:String = null;
		private var closing:Boolean = false;
		private var _retryCount:uint = 7;
		private var _retryDelay:uint = 1000;

		final public static function log(param1:Object) : void
		{
			HttpConnection.trace((new Date()) + " " + param1);
		}

		public function HttpConnection(param1:String, param2:Number, param3:ElectroServer)
		{
			workers = new Array();
			super(param1, param2, Protocol.BINARY);
			param3.addEventListener(MessageType.ConnectionEvent, "onConnectionEvent", this, true);
			Security.loadPolicyFile("http://" + param1 + ":" + param2 + "/cross-domain");
		}

		public function get retryCount() : uint
		{
			return _retryCount;
		}

		public function set retryCount(param1:uint) : void
		{
			_retryCount = param1;
		}

		public function get retryDelay() : uint
		{
			return _retryDelay;
		}

		public function set retryDelay(param1:uint) : void
		{
			_retryDelay = param1;
		}

		override public function sendBinary(param1:ByteArray) : void
		{
			var worker:HttpWorker = null;
			var timer:Timer = null;
			var listener:Function = null;
			var message:ByteArray = param1;
			if(null == sessionKey)
			{
				throw new Error("Cannot send a message until the connection process is complete");
			}
			worker = new HttpWorker(this);
			if(retryCount > 0)
			{
				timer = null;
				function _func_1511() : void
				{
					function _func_1509() : void
					{
						if(timer.currentCount <= timer.repeatCount)
						{
							timer.start();
						}
						else
						{
							onPreConnect(false);
						}
					}
					worker.addEventListener(IOErrorEvent.IO_ERROR, _func_1509);
					worker.removeEventListener(IOErrorEvent.IO_ERROR, listener);
					timer = new Timer(retryDelay, retryCount);
					function _func_1510() : void
					{
						timer.stop();
						worker.send("/s/" + sessionKey, message);
					}
					timer.addEventListener(TimerEvent.TIMER, _func_1510);
					timer.start();
				}
				listener = _func_1511;
				worker.addEventListener(IOErrorEvent.IO_ERROR, listener);
			}
			worker.send("/s/" + sessionKey, message);
		}

		override public function connect() : void
		{
			var data:ByteArray = new ByteArray();
			data.writeByte(0);
			var worker:HttpWorker = new HttpWorker(this);
			function _func_1513() : void
			{
				onPreConnect(true);
			}
			worker.addEventListener(Event.OPEN, _func_1513);
			function _func_1514() : void
			{
				onPreConnect(false);
			}
			worker.addEventListener(IOErrorEvent.IO_ERROR, _func_1514);
			worker.send("/connect/binary", data);
		}

		override protected function doClose() : void
		{
			var _loc_1:int = 0;
			closing = true;
			while(workers.length > 0)
			{
				while(0)
				{
					HttpWorker(workers[_loc_1]).close();
				}
			}
		}

		public function onConnectionEvent(param1:ConnectionEvent) : void
		{
			sessionKey = param1.getHashId().toString();
		}

		public function addWorker(param1:HttpWorker) : void
		{
			workers.push(param1);
		}

		public function removeWorker(param1:HttpWorker) : void
		{
			var _loc_2:int = workers.indexOf(param1);
			if(_loc_2 >= 0)
			{
				workers.splice(_loc_2, 1);
			}
			if(!closing && workers.length == 0)
			{
				sendBinary(null);
			}
		}
	}
}
package com.electrotank.electroserver4.connection
{
	import flash.events.*;
	import flash.net.*;
	import flash.utils.*;

	public class HttpWorker extends Object implements IEventDispatcher
	{
		private static var counter:uint = 0;
		private var connection:HttpConnection;
		private var stream:URLStream;
		private var bytesNeeded:int = 0;
		private var _id:uint;

		public function HttpWorker(param1:HttpConnection)
		{
			var worker:HttpWorker = null;
			var connection:HttpConnection = param1;
			super();
			this.connection = connection;
			var _loc_4:Number = this.counter + 1;
			this.counter = _loc_4;
			this._id = this.counter;
			worker = this;
			this.stream = new URLStream();
			function _func_914() : void
			{
				connection.removeWorker(worker);
			}
			this.stream.addEventListener(Event.COMPLETE, _func_914);
			function _func_915() : void
			{
				connection.addWorker(worker);
			}
			this.stream.addEventListener(Event.OPEN, _func_915);
			function _func_916(param1:Event) : void
			{
				readData();
			}
			this.stream.addEventListener(ProgressEvent.PROGRESS, _func_916);
			function _func_917(param1:ErrorEvent) : void
			{
				HttpConnection.log(param1);
			}
			this.stream.addEventListener(IOErrorEvent.IO_ERROR, _func_917);
			function _func_918(param1:ErrorEvent) : void
			{
				HttpConnection.log(param1);
			}
			this.stream.addEventListener(SecurityErrorEvent.SECURITY_ERROR, _func_918);
		}

		public function send(param1:String, param2:ByteArray) : void
		{
			var _loc_3:URLRequest = new URLRequest();
			_loc_3.url = "http://" + connection.getIp() + ":" + connection.getPort() + param1 + "?_=" + _id;
			_loc_3.data = param2;
			_loc_3.method = URLRequestMethod.POST;
			stream.load(_loc_3);
		}

		public function close() : void
		{
			stream.close();
		}

		private function readData() : void
		{
			var _loc_1:ByteArray = null;
			if(!stream.connected)
			{
			}
			else
			{
				if(bytesNeeded > 0)
				{
					if(stream.bytesAvailable >= bytesNeeded)
					{
						_loc_1 = new ByteArray();
						stream.readBytes(_loc_1, 0, bytesNeeded);
						bytesNeeded = 0;
						if(0 == _loc_1[0] && 0 == _loc_1[1])
						{
						}
						else
						{
							connection.notifyListeners("onBinaryData", {target:connection, data:_loc_1});
						}
						readData();
					}
				}
				else
				{
					if(stream.bytesAvailable >= 4)
					{
						bytesNeeded = stream.readInt();
						readData();
					}
				}
			}
		}

		public function dispatchEvent(param1:Event) : Boolean
		{
			return stream.dispatchEvent(param1);
		}

		public function hasEventListener(param1:String) : Boolean
		{
			return stream.hasEventListener(param1);
		}

		public function willTrigger(param1:String) : Boolean
		{
			return stream.willTrigger(param1);
		}

		public function removeEventListener(param1:String, param2:Function, param3:Boolean = false) : void
		{
			stream.removeEventListener(param1, param2, param3);
		}

		public function addEventListener(param1:String, param2:Function, param3:Boolean = false, param4:int = 0, param5:Boolean = false) : void
		{
			stream.addEventListener(param1, param2, param3, param4, param5);
		}

		public function toString() : String
		{
			return "[HttpWorker " + _id + "]";
		}
	}
}
package com.electrotank.electroserver4.entities
{
	public class Protocol extends Object
	{
		public static var TEXT:String = "text";
		public static var BINARY:String = "binary";
		private var protocolId:Number;

		public function Protocol()
		{
			super();
		}

		public function setProtocolId(param1:Number) : void
		{
			this.protocolId = param1;
		}

		public function getProtocolId() : Number
		{
			return protocolId;
		}
	}
}
package com.electrotank.electroserver4.entities
{
	import com.electrotank.electroserver4.esobject.*;

	public class RoomVariable extends Object
	{
		private var persistent:Boolean;
		private var locked:Boolean;
		private var name:String;
		private var value:EsObject;

		public function RoomVariable(param1:String, param2:EsObject, param3:Boolean, param4:Boolean)
		{
			super();
			setName(param1);
			setValue(param2);
			setPersistent(param3);
			setLocked(param4);
		}

		public function setName(param1:String) : void
		{
			this.name = param1;
		}

		public function getName() : String
		{
			return name;
		}

		public function setValue(param1:EsObject) : void
		{
			this.value = param1;
		}

		public function getValue() : EsObject
		{
			return value;
		}

		public function setPersistent(param1:Boolean) : void
		{
			this.persistent = param1;
		}

		public function getPersistent() : Boolean
		{
			return persistent;
		}

		public function setLocked(param1:Boolean) : void
		{
			this.locked = param1;
		}

		public function getLocked() : Boolean
		{
			return locked;
		}
	}
}
package com.electrotank.electroserver4.entities
{
	import com.electrotank.electroserver4.esobject.*;

	public class SearchCriteria extends Object
	{
		private var gameType:String;
		private var locked:Boolean;
		private var gameDetails:EsObject;
		private var gameId:Number;
		private var lockedSet:Boolean;

		public function SearchCriteria()
		{
			super();
			setGameId(-1);
			lockedSet = false;
		}

		public function setGameId(param1:Number) : void
		{
			this.gameId = param1;
		}

		public function getGameId() : Number
		{
			return gameId;
		}

		public function setGameDetails(param1:EsObject) : void
		{
			this.gameDetails = param1;
		}

		public function getGameDetails() : EsObject
		{
			return gameDetails;
		}

		public function getLockedSet() : Boolean
		{
			return lockedSet;
		}

		public function setLocked(param1:Boolean) : void
		{
			lockedSet = true;
			this.locked = param1;
		}

		public function getLocked() : Boolean
		{
			return this.locked;
		}

		public function setGameType(param1:String) : void
		{
			this.gameType = param1;
		}

		public function getGameType() : String
		{
			return gameType;
		}
	}
}
package com.electrotank.electroserver4.entities
{
	import com.electrotank.electroserver4.esobject.*;

	public class ServerGame extends Object
	{
		private var passwordProtected:Boolean;
		private var gameDetails:EsObject;
		private var locked:Boolean;
		private var gameId:Number;

		public function ServerGame()
		{
			super();
		}

		public function setPasswordProtected(param1:Boolean) : void
		{
			this.passwordProtected = param1;
		}

		public function getPasswordProtected() : Boolean
		{
			return passwordProtected;
		}

		public function setGameDetails(param1:EsObject) : void
		{
			this.gameDetails = param1;
		}

		public function getGameDetails() : EsObject
		{
			return gameDetails;
		}

		public function setLocked(param1:Boolean) : void
		{
			this.locked = param1;
		}

		public function getLocked() : Boolean
		{
			return locked;
		}

		public function setGameId(param1:Number) : void
		{
			this.gameId = param1;
		}

		public function getGameId() : Number
		{
			return gameId;
		}
	}
}
package com.electrotank.electroserver4.entities
{
	import com.electrotank.electroserver4.esobject.*;

	public class UserVariable extends Object
	{
		private var name:String;
		private var value:EsObject;

		public function UserVariable(param1:String, param2:EsObject)
		{
			super();
			setName(param1);
			setValue(param2);
		}

		public function setName(param1:String) : void
		{
			this.name = param1;
		}

		public function getName() : String
		{
			return name;
		}

		public function setValue(param1:EsObject) : void
		{
			this.value = param1;
		}

		public function getValue() : EsObject
		{
			return value;
		}
	}
}
package com.electrotank.electroserver4.errors
{
	public class Errors extends Object
	{
		private static var errorsById:Array;
		public static var UserNameExists:EsError = Errors.register(new EsError(0, "UserNameExists"));
		public static var UserAlreadyLoggedIn:EsError = Errors.register(new EsError(1, "UserAlreadyLoggedIn"));
		public static var InvalidMessageNumber:EsError = Errors.register(new EsError(2, "InvalidMessageNumber"));
		public static var InboundMessageFailedValidation:EsError = Errors.register(new EsError(3, "InboundMessageFailedValidation"));
		public static var MaximumClientConnectionsReached:EsError = Errors.register(new EsError(4, "MaximumClientConnectionsReached"));
		public static var ZoneNotFound:EsError = Errors.register(new EsError(5, "ZoneNotFound"));
		public static var RoomNotFound:EsError = Errors.register(new EsError(6, "RoomNotFound"));
		public static var RoomAtCapacity:EsError = Errors.register(new EsError(7, "RoomAtCapacity"));
		public static var RoomPasswordMismatch:EsError = Errors.register(new EsError(8, "RoomPasswordMismatch"));
		public static var GatewayPaused:EsError = Errors.register(new EsError(9, "GatewayPaused"));
		public static var AccessDenied:EsError = Errors.register(new EsError(10, "AccessDenied"));
		public static var RoomVariableLocked:EsError = Errors.register(new EsError(11, "RoomVariableLocked"));
		public static var RoomVariableAlreadyExists:EsError = Errors.register(new EsError(12, "RoomVariableAlreadyExists"));
		public static var DuplicateRoomName:EsError = Errors.register(new EsError(13, "DuplicateRoomName"));
		public static var DuplicateZoneName:EsError = Errors.register(new EsError(14, "DuplicateZoneName"));
		public static var UserVariableAlreadyExists:EsError = Errors.register(new EsError(15, "UserVariableAlreadyExists"));
		public static var UserVariableDoesNotExist:EsError = Errors.register(new EsError(16, "UserVariableDoesNotExist"));
		public static var ZoneAllocationFailure:EsError = Errors.register(new EsError(17, "ZoneAllocationFailure"));
		public static var RoomAllocationFailure:EsError = Errors.register(new EsError(18, "RoomAllocationFailure"));
		public static var UserBanned:EsError = Errors.register(new EsError(19, "UserBanned"));
		public static var UserAlreadyInRoom:EsError = Errors.register(new EsError(20, "UserAlreadyInRoom"));
		public static var VulgarityCheckFailed:EsError = Errors.register(new EsError(21, "VulgarityCheckFailed"));
		public static var ActionCausedError:EsError = Errors.register(new EsError(22, "ActionCausedError"));
		public static var ActionRequiresLogin:EsError = Errors.register(new EsError(23, "ActionRequiresLogin"));
		public static var GenericError:EsError = Errors.register(new EsError(24, "GenericError"));
		public static var PluginNotFound:EsError = Errors.register(new EsError(25, "PluginNotFound"));
		public static var LoginEventHandlerFailure:EsError = Errors.register(new EsError(26, "LoginEventHandlerFailure"));
		public static var InvalidUserName:EsError = Errors.register(new EsError(27, "InvalidUserName"));
		public static var ExtensionNotFound:EsError = Errors.register(new EsError(28, "ExtensionNotFound"));
		public static var PluginInitializationFailed:EsError = Errors.register(new EsError(29, "PluginInitializationFailed"));
		public static var EventNotFound:EsError = Errors.register(new EsError(30, "EventNotFound"));
		public static var FloodingFilterCheckFailed:EsError = Errors.register(new EsError(31, "FloodingFilterCheckFailed"));
		public static var UserNotJoinedToRoom:EsError = Errors.register(new EsError(32, "UserNotJoinedToRoom"));
		public static var ManagedObjectNotFound:EsError = Errors.register(new EsError(33, "ManagedObjectNotFound"));
		public static var IdleTimeReached:EsError = Errors.register(new EsError(34, "IdleTimeReached"));
		public static var ServerError:EsError = Errors.register(new EsError(35, "ServerError"));
		public static var OperationNotSupported:EsError = Errors.register(new EsError(36, "OperationNotSupported"));
		public static var InvalidLanguageFilterSettings:EsError = Errors.register(new EsError(37, "InvalidLanguageFilterSettings"));
		public static var InvalidFloodingFilterSettings:EsError = Errors.register(new EsError(38, "InvalidFloodingFilterSettings"));
		public static var ExtensionForcedReload:EsError = Errors.register(new EsError(39, "ExtensionForcedReload"));
		public static var UserLogOutRequested:EsError = Errors.register(new EsError(40, "UserLogOutRequested"));
		public static var OnlyRtmpConnectionRemains:EsError = Errors.register(new EsError(41, "OnlyRtmpConnectionRemains"));
		public static var GameDoesntExist:EsError = Errors.register(new EsError(42, "GameDoesntExist"));
		public static var FailedToJoinGameRoom:EsError = Errors.register(new EsError(43, "FailedToJoinGameRoom"));
		public static var GameIsLocked:EsError = Errors.register(new EsError(44, "GameIsLocked"));
		public static var InvalidParameters:EsError = Errors.register(new EsError(45, "InvalidParameters"));
		public static var PublicMessageRejected:EsError = Errors.register(new EsError(46, "PublicMessageRejected"));
		public static var FailedToConnect:EsError = Errors.register(new EsError(1000, "FailedToConnect"));

		final public static function getErrorById(param1:Number) : EsError
		{
			var _loc_2:EsError = errorsById[param1];
			if(_loc_2 == null)
			{
				Errors.trace("Error: tried to 'getErrorById' but error was not found with id: " + param1.toString());
			}
			return _loc_2;
		}

		final public static function register(param1:EsError) : EsError
		{
			if(errorsById == null)
			{
				errorsById = new Array();
			}
			errorsById[param1.getId()] = param1;
			return param1;
		}

		public function Errors()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4.errors
{
	public class EsError extends Object
	{
		private var id:Number;
		private var description:String;

		public function EsError(param1:Number, param2:String)
		{
			super();
			id = param1;
			description = param2;
		}

		public function getDescription() : String
		{
			return description;
		}

		public function getId() : Number
		{
			return id;
		}
	}
}
package com.electrotank.electroserver4.esobject
{
	public class DataType extends Object
	{
		public static var Integer:DataType = new DataType("0", "integer");
		public static var EsString:DataType = new DataType("1", "string");
		public static var Double:DataType = new DataType("2", "double");
		public static var Float:DataType = new DataType("3", "float");
		public static var EsBoolean:DataType = new DataType("4", "boolean");
		public static var Byte:DataType = new DataType("5", "byte");
		public static var Character:DataType = new DataType("6", "character");
		public static var Long:DataType = new DataType("7", "long");
		public static var Short:DataType = new DataType("8", "short");
		public static var EsObject:DataType = new DataType("9", "esobject");
		public static var EsObjectArray:DataType = new DataType("a", "esobject_array");
		public static var IntegerArray:DataType = new DataType("b", "integer_array");
		public static var StringArray:DataType = new DataType("c", "string_array");
		public static var DoubleArray:DataType = new DataType("d", "double_array");
		public static var FloatArray:DataType = new DataType("e", "float_array");
		public static var BooleanArray:DataType = new DataType("f", "boolean_array");
		public static var EsByteArray:DataType = new DataType("g", "byte_array");
		public static var CharacterArray:DataType = new DataType("h", "character_array");
		public static var LongArray:DataType = new DataType("i", "long_array");
		public static var ShortArray:DataType = new DataType("j", "short_array");
		public static var EsNumber:DataType = new DataType("k", "number");
		public static var NumberArray:DataType = new DataType("l", "number_array");
		private static var typesByIndicator:Object;
		private static var typesByName:Object;
		private var indicator:String;
		private var name:String;

		final public static function register(param1:DataType) : void
		{
			if(typesByIndicator == null)
			{
				typesByIndicator = new Object();
			}
			if(typesByName == null)
			{
				typesByName = new Object();
			}
			typesByIndicator[param1.getIndicator()] = param1;
			typesByName[param1.getName()] = param1;
		}

		final public static function findTypeByIndicator(param1:String) : DataType
		{
			return typesByIndicator[param1];
		}

		final public static function findTypeByName(param1:String) : DataType
		{
			return typesByName[param1];
		}

		public function DataType(param1:String, param2:String)
		{
			super();
			indicator = param1;
			name = param2;
			register(this);
		}

		public function getIndicator() : String
		{
			return indicator;
		}

		public function getName() : String
		{
			return name;
		}
	}
}
package com.electrotank.electroserver4.esobject
{
	import flash.utils.*;
	import flash.xml.*;

	public class EsObject extends Object
	{
		private var data:Object;
		private var list:Array;

		public function EsObject()
		{
			super();
			data = new Object();
			list = new Array();
		}

		public function toString(param1:String = null) : String
		{
			var _loc_4:EsObjectDataHolder = null;
			var _loc_5:String = null;
			var _loc_6:String = null;
			var _loc_7:Array = null;
			var _loc_8:Array = null;
			var _loc_9:int = NaN;
			var _loc_10:int = NaN;
			var _loc_11:EsObject = null;
			var _loc_2:String = "{EsObject:\n";
			if(param1 == null)
			{
				param1 = "";
			}
			param1 = param1 + "\t";
			var _loc_3:Number = 0;
			while(_loc_3 < getEntries().length)
			{
				_loc_4 = getEntries()[_loc_3];
				_loc_5 = _loc_4.getName();
				_loc_2 = _loc_2 + (param1 + _loc_5) + ":" + _loc_4.getDataType().getName() + " = ";
				_loc_6 = param1 + "\t";
				switch(_loc_4.getDataType())
				{
				case DataType.EsObject:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString(param1);
					break;
				case DataType.Byte:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Character:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Double:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.EsBoolean:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.EsNumber:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.EsString:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Float:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Integer:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Long:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Short:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.BooleanArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.CharacterArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.DoubleArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.EsByteArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.FloatArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.IntegerArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.LongArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.NumberArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.ShortArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.StringArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_7 = _loc_4.getRawValue();
					_loc_9 = 0;
					while(_loc_9 < _loc_7.length)
					{
						_loc_2 = _loc_2 + (_loc_6 + _loc_7[_loc_9]);
						if(_loc_9 != (_loc_7.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_9 = _loc_9 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				case DataType.EsObjectArray:
					_loc_2 = _loc_2 + "\n" + _loc_6 + "[\n";
					_loc_8 = _loc_4.getRawValue();
					_loc_10 = 0;
					while(_loc_10 < _loc_8.length)
					{
						_loc_11 = _loc_8[_loc_10];
						_loc_2 = _loc_2 + (_loc_6 + _loc_11.toString(param1));
						if(_loc_10 != (_loc_8.length - 1))
						{
							_loc_2 = _loc_2 + ",\n";
						}
						_loc_10 = _loc_10 + 1;
					}
					_loc_2 = _loc_2 + "\n" + _loc_6 + "]";
					break;
				default:
					trace("EsObject.toString() data type not supported: " + _loc_4.getDataType().getName());
					break;
				}
				if(_loc_3 != (getEntries().length - 1))
				{
					_loc_2 = _loc_2 + "\n";
				}
				_loc_3 = _loc_3 + 1;
			}
			_loc_2 = _loc_2 + "\n" + param1 + "}";
			return _loc_2;
		}

		public function toXML(param1:String = null) : String
		{
			var _loc_4:EsObjectDataHolder = null;
			var _loc_5:String = null;
			var _loc_6:String = null;
			var _loc_7:Array = null;
			var _loc_8:int = NaN;
			var _loc_9:String = null;
			var _loc_10:* = undefined;
			var _loc_11:int = NaN;
			var _loc_12:int = NaN;
			var _loc_13:EsObject = null;
			if(param1 == null)
			{
				param1 = "";
			}
			param1 = param1 + "\t";
			var _loc_2:String = "";
			if(param1 == "\t")
			{
				_loc_2 = _loc_2 + "<Variable>";
			}
			_loc_2 = _loc_2 + "\n";
			var _loc_3:Number = 0;
			while(_loc_3 < getEntries().length)
			{
				_loc_4 = getEntries()[_loc_3];
				_loc_5 = _loc_4.getName();
				_loc_2 = _loc_2 + (param1 + "<Variable name='") + _loc_5 + "' type='" + _loc_4.getDataType().getName() + "' >";
				_loc_6 = param1 + "\t";
				switch(_loc_4.getDataType())
				{
				case DataType.EsObject:
					_loc_2 = _loc_2 + _loc_4.getEsObjectValue().toXML(param1);
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.Character:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Double:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.EsBoolean:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.EsNumber:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.EsString:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Float:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Integer:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Long:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Short:
					_loc_2 = _loc_2 + _loc_4.getRawValue().toString();
					break;
				case DataType.Byte:
					_loc_8 = Number(_loc_4.getRawValue());
					_loc_9 = _loc_8.toString(16);
					if(_loc_9.length < 2)
					{
						_loc_9 = "0" + _loc_9;
					}
					_loc_2 = _loc_2 + _loc_9;
					break;
				case DataType.BooleanArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.CharacterArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.DoubleArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.EsByteArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.FloatArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.IntegerArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.LongArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.NumberArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.ShortArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.StringArray:
					_loc_7 = _loc_4.getRawValue();
					_loc_11 = 0;
					while(_loc_11 < _loc_7.length)
					{
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + _loc_7[_loc_11].toString() + "</Entry>";
						_loc_11 = _loc_11 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				case DataType.EsObjectArray:
					_loc_10 = _loc_4.getRawValue();
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_13 = _loc_10[_loc_12];
						_loc_2 = _loc_2 + "\n" + _loc_6 + "<Entry>" + (_loc_13.toXML(param1 + "\t")) + "\n" + _loc_6 + "</Entry>";
						_loc_12 = _loc_12 + 1;
					}
					_loc_2 = _loc_2 + "\n" + param1;
					break;
				default:
					trace("EsObject.toString() data type not supported: " + _loc_4.getDataType().getName());
					break;
				}
				_loc_2 = _loc_2 + "</Variable>";
				if(_loc_3 != (getEntries().length - 1))
				{
					_loc_2 = _loc_2 + "\n";
				}
				_loc_3 = _loc_3 + 1;
			}
			if(param1 == "\t")
			{
				_loc_2 = _loc_2 + "\n</Variable>";
			}
			return _loc_2;
		}

		public function fromXML(param1:XMLNode) : void
		{
			var _loc_4:XMLNode = null;
			var _loc_5:Object = null;
			var _loc_6:String = null;
			var _loc_7:DataType = null;
			var _loc_8:String = null;
			var _loc_9:Array = null;
			var _loc_10:Array = null;
			var _loc_11:XMLNode = null;
			var _loc_12:int = NaN;
			var _loc_13:EsObject = null;
			var _loc_2:Array = param1.childNodes;
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2.length)
			{
				_loc_4 = _loc_2[_loc_3];
				_loc_5 = _loc_4.attributes;
				_loc_6 = _loc_5.name;
				_loc_7 = DataType.findTypeByName(_loc_5.type);
				_loc_9 = new Array();
				switch(_loc_7)
				{
				case DataType.EsObject:
					_loc_13 = new EsObject();
					_loc_13.fromXML(_loc_4);
					setEsObject(_loc_6, _loc_13);
					break;
				case DataType.Byte:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setByte(_loc_6, int(_loc_8));
					break;
				case DataType.Character:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setChar(_loc_6, _loc_8);
					break;
				case DataType.Double:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setDouble(_loc_6, Number(_loc_8));
					break;
				case DataType.EsBoolean:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setBoolean(_loc_6, _loc_8.toLowerCase() == "true" ? true : false);
					break;
				case DataType.EsNumber:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setNumber(_loc_6, Number(_loc_8));
					break;
				case DataType.EsString:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setString(_loc_6, _loc_8);
					break;
				case DataType.Float:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setFloat(_loc_6, Number(_loc_8));
					break;
				case DataType.Integer:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setInteger(_loc_6, Number(_loc_8));
					break;
				case DataType.Long:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setLong(_loc_6, _loc_8);
					break;
				case DataType.Short:
					_loc_8 = _loc_4.firstChild.nodeValue;
					setShort(_loc_6, Number(_loc_8));
					break;
				case DataType.StringArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_9[_loc_12] = _loc_11.firstChild.nodeValue;
						_loc_12 = _loc_12 + 1;
					}
					setStringArray(_loc_6, _loc_9);
					break;
				case DataType.CharacterArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_9[_loc_12] = _loc_11.firstChild.nodeValue;
						_loc_12 = _loc_12 + 1;
					}
					setCharArray(_loc_6, _loc_9);
					break;
				case DataType.LongArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_9[_loc_12] = _loc_11.firstChild.nodeValue;
						_loc_12 = _loc_12 + 1;
					}
					setLongArray(_loc_6, _loc_9);
					break;
				case DataType.DoubleArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_9[_loc_12] = Number(_loc_11.firstChild.nodeValue);
						_loc_12 = _loc_12 + 1;
					}
					setDoubleArray(_loc_6, _loc_9);
					break;
				case DataType.FloatArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_9[_loc_12] = Number(_loc_11.firstChild.nodeValue);
						_loc_12 = _loc_12 + 1;
					}
					setFloatArray(_loc_6, _loc_9);
					break;
				case DataType.IntegerArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_9[_loc_12] = int(_loc_11.firstChild.nodeValue);
						_loc_12 = _loc_12 + 1;
					}
					setIntegerArray(_loc_6, _loc_9);
					break;
				case DataType.NumberArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_9[_loc_12] = Number(_loc_11.firstChild.nodeValue);
						_loc_12 = _loc_12 + 1;
					}
					setNumberArray(_loc_6, _loc_9);
					break;
				case DataType.ShortArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_9[_loc_12] = Number(_loc_11.firstChild.nodeValue);
						_loc_12 = _loc_12 + 1;
					}
					setShortArray(_loc_6, _loc_9);
					break;
				case DataType.BooleanArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_9[_loc_12] = _loc_11.firstChild.nodeValue.toLowerCase() == "true" ? true : false;
						_loc_12 = _loc_12 + 1;
					}
					setBooleanArray(_loc_6, _loc_9);
					break;
				case DataType.EsByteArray:
					break;
				case DataType.EsObjectArray:
					_loc_10 = _loc_4.childNodes;
					_loc_12 = 0;
					while(_loc_12 < _loc_10.length)
					{
						_loc_11 = _loc_10[_loc_12];
						_loc_13 = new EsObject();
						_loc_13.fromXML(_loc_11);
						_loc_9[_loc_12] = _loc_13;
						_loc_12 = _loc_12 + 1;
					}
					setEsObjectArray(_loc_6, _loc_9);
					break;
				default:
					trace("EsObject.toString() data type not supported: " + _loc_7.getName());
					break;
				}
				_loc_3 = _loc_3 + 1;
			}
		}

		public function doesPropertyExist(param1:String) : Boolean
		{
			return !(data[param1] == null);
		}

		public function getSize() : Number
		{
			return list.length;
		}

		public function getEntries() : Array
		{
			return list;
		}

		private function put(param1:String, param2:EsObjectDataHolder) : void
		{
			var _loc_3:EsObjectDataHolder = null;
			var _loc_4:int = NaN;
			param2.setName(param1);
			if(data[param1] != null)
			{
				_loc_3 = data[param1];
				_loc_4 = 0;
				while(_loc_4 < list.length)
				{
					if(list[_loc_4] == _loc_3)
					{
						list.splice(_loc_4, 1);
						break;
					}
					_loc_4 = _loc_4 + 1;
				}
				data[param1] = null;
			}
			data[param1] = param2;
			list.push(param2);
		}

		public function getDataType(param1:String) : DataType
		{
			return getHolderForName(param1).getDataType();
		}

		public function setInteger(param1:String, param2:Number) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.Integer);
			_loc_3.setIntValue(param2);
			put(param1, _loc_3);
		}

		public function setString(param1:String, param2:String) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.EsString);
			_loc_3.setStringValue(param2);
			put(param1, _loc_3);
		}

		public function setDouble(param1:String, param2:Number) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.Double);
			_loc_3.setDoubleValue(param2);
			put(param1, _loc_3);
		}

		public function setFloat(param1:String, param2:Number) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.Float);
			_loc_3.setFloatValue(param2);
			put(param1, _loc_3);
		}

		public function setBoolean(param1:String, param2:Boolean) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.EsBoolean);
			_loc_3.setBooleanValue(param2);
			put(param1, _loc_3);
		}

		public function setByte(param1:String, param2:int) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.Byte);
			_loc_3.setByteValue(param2);
			put(param1, _loc_3);
		}

		public function setChar(param1:String, param2:String) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.Character);
			_loc_3.setCharValue(param2);
			put(param1, _loc_3);
		}

		public function setLong(param1:String, param2:String) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.Long);
			_loc_3.setLongValue(param2);
			put(param1, _loc_3);
		}

		public function setShort(param1:String, param2:Number) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.Short);
			_loc_3.setShortValue(param2);
			put(param1, _loc_3);
		}

		public function setEsObject(param1:String, param2:EsObject) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.EsObject);
			_loc_3.setEsObjectValue(param2);
			put(param1, _loc_3);
		}

		public function setNumber(param1:String, param2:Number) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.EsNumber);
			_loc_3.setNumberValue(param2);
			put(param1, _loc_3);
		}

		public function setIntegerArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.IntegerArray);
			_loc_3.setIntArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setStringArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.StringArray);
			_loc_3.setStringArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setDoubleArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.DoubleArray);
			_loc_3.setDoubleArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setFloatArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.FloatArray);
			_loc_3.setFloatArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setBooleanArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.BooleanArray);
			_loc_3.setBooleanArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setByteArray(param1:String, param2:ByteArray) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.EsByteArray);
			_loc_3.setByteArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setCharArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.CharacterArray);
			_loc_3.setCharArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setLongArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.LongArray);
			_loc_3.setLongArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setShortArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.ShortArray);
			_loc_3.setShortArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setEsObjectArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.EsObjectArray);
			_loc_3.setEsObjectArrayValue(param2);
			put(param1, _loc_3);
		}

		public function setNumberArray(param1:String, param2:Array) : void
		{
			var _loc_3:EsObjectDataHolder = new EsObjectDataHolder();
			_loc_3.setRawValue(param2);
			_loc_3.setDataType(DataType.NumberArray);
			_loc_3.setNumberArrayValue(param2);
			put(param1, _loc_3);
		}

		private function getHolderForName(param1:String) : EsObjectDataHolder
		{
			var _loc_2:EsObjectDataHolder = data[param1];
			if(_loc_2 == null)
			{
				throw new Error("Unable to locate variable named '" + param1 + "' on EsObject");
			}
			return _loc_2;
		}

		public function getInteger(param1:String) : Number
		{
			return getHolderForName(param1).getIntValue();
		}

		public function getString(param1:String) : String
		{
			return getHolderForName(param1).getStringValue();
		}

		public function getDouble(param1:String) : Number
		{
			return getHolderForName(param1).getDoubleValue();
		}

		public function getFloat(param1:String) : Number
		{
			return getHolderForName(param1).getFloatValue();
		}

		public function getBoolean(param1:String) : Boolean
		{
			return getHolderForName(param1).getBooleanValue();
		}

		public function getByte(param1:String) : int
		{
			return getHolderForName(param1).getByteValue();
		}

		public function getChar(param1:String) : String
		{
			return getHolderForName(param1).getCharValue();
		}

		public function getLong(param1:String) : String
		{
			return getHolderForName(param1).getLongValue();
		}

		public function getShort(param1:String) : Number
		{
			return getHolderForName(param1).getShortValue();
		}

		public function getEsObject(param1:String) : EsObject
		{
			return getHolderForName(param1).getEsObjectValue();
		}

		public function getNumber(param1:String) : Number
		{
			return getHolderForName(param1).getNumberValue();
		}

		public function getIntegerArray(param1:String) : Array
		{
			return getHolderForName(param1).getIntArrayValue();
		}

		public function getStringArray(param1:String) : Array
		{
			return getHolderForName(param1).getStringArrayValue();
		}

		public function getDoubleArray(param1:String) : Array
		{
			return getHolderForName(param1).getDoubleArrayValue();
		}

		public function getFloatArray(param1:String) : Array
		{
			return getHolderForName(param1).getFloatArrayValue();
		}

		public function getBooleanArray(param1:String) : Array
		{
			return getHolderForName(param1).getBooleanArrayValue();
		}

		public function getByteArray(param1:String) : ByteArray
		{
			return getHolderForName(param1).getByteArrayValue();
		}

		public function getCharArray(param1:String) : Array
		{
			return getHolderForName(param1).getCharArrayValue();
		}

		public function getLongArray(param1:String) : Array
		{
			return getHolderForName(param1).getLongArrayValue();
		}

		public function getShortArray(param1:String) : Array
		{
			return getHolderForName(param1).getShortArrayValue();
		}

		public function getEsObjectArray(param1:String) : Array
		{
			return getHolderForName(param1).getEsObjectArrayValue();
		}

		public function getNumberArray(param1:String) : Array
		{
			return getHolderForName(param1).getNumberArrayValue();
		}

		public function removeVariable(param1:String) : void
		{
			var _loc_3:EsObjectDataHolder = null;
			var _loc_2:Number = 0;
			while(_loc_2 < list.length)
			{
				_loc_3 = list[_loc_2];
				if(_loc_3.getName() == param1)
				{
					list.splice(_loc_2, 1);
					break;
				}
				_loc_2 = _loc_2 + 1;
			}
		}

		public function removeAll() : void
		{
			data = new Object();
			list = new Array();
		}

		public function getRawVariable(param1:String) : Object
		{
			return getHolderForName(param1).getRawValue();
		}
	}
}
package com.electrotank.electroserver4.esobject
{
	import flash.utils.*;

	public class EsObjectDataHolder extends Object
	{
		private var name:String;
		private var dataType:DataType;
		private var rawValue:Object;
		private var intValue:Number;
		private var stringValue:String;
		private var doubleValue:Number;
		private var floatValue:Number;
		private var booleanValue:Boolean;
		private var byteValue:int;
		private var charValue:String;
		private var longValue:String;
		private var shortValue:Number;
		private var intArrayValue:Array;
		private var stringArrayValue:Array;
		private var doubleArrayValue:Array;
		private var floatArrayValue:Array;
		private var booleanArrayValue:Array;
		private var byteArrayValue:ByteArray;
		private var charArrayValue:Array;
		private var longArrayValue:Array;
		private var shortArrayValue:Array;
		private var esObjectValue:EsObject;
		private var esObjectArrayValue:Array;
		private var numberValue:Number;
		private var numberArrayValue:Array;

		public function EsObjectDataHolder()
		{
			super();
		}

		public function setName(param1:String) : void
		{
			this.name = param1;
		}

		public function getName() : String
		{
			return name;
		}

		public function setDataType(param1:DataType) : void
		{
			dataType = param1;
		}

		public function getDataType() : DataType
		{
			return dataType;
		}

		public function setRawValue(param1:Object) : void
		{
			rawValue = param1;
		}

		public function getRawValue() : Object
		{
			return rawValue;
		}

		public function setIntValue(param1:Number) : void
		{
			intValue = param1;
		}

		public function getIntValue() : Number
		{
			return intValue;
		}

		public function setStringValue(param1:String) : void
		{
			stringValue = param1;
		}

		public function getStringValue() : String
		{
			return stringValue;
		}

		public function setDoubleValue(param1:Number) : void
		{
			doubleValue = param1;
		}

		public function getDoubleValue() : Number
		{
			return doubleValue;
		}

		public function setFloatValue(param1:Number) : void
		{
			floatValue = param1;
		}

		public function getFloatValue() : Number
		{
			return floatValue;
		}

		public function setBooleanValue(param1:Boolean) : void
		{
			booleanValue = param1;
		}

		public function getBooleanValue() : Boolean
		{
			return booleanValue;
		}

		public function setByteValue(param1:int) : void
		{
			byteValue = param1;
		}

		public function getByteValue() : int
		{
			return byteValue;
		}

		public function setCharValue(param1:String) : void
		{
			charValue = param1;
		}

		public function getCharValue() : String
		{
			return charValue;
		}

		public function setLongValue(param1:String) : void
		{
			longValue = param1;
		}

		public function getLongValue() : String
		{
			return longValue;
		}

		public function setShortValue(param1:Number) : void
		{
			shortValue = param1;
		}

		public function getShortValue() : Number
		{
			return shortValue;
		}

		public function setIntArrayValue(param1:Array) : void
		{
			intArrayValue = param1;
		}

		public function getIntArrayValue() : Array
		{
			return intArrayValue;
		}

		public function setStringArrayValue(param1:Array) : void
		{
			stringArrayValue = param1;
		}

		public function getStringArrayValue() : Array
		{
			return stringArrayValue;
		}

		public function setDoubleArrayValue(param1:Array) : void
		{
			doubleArrayValue = param1;
		}

		public function getDoubleArrayValue() : Array
		{
			return doubleArrayValue;
		}

		public function setFloatArrayValue(param1:Array) : void
		{
			floatArrayValue = param1;
		}

		public function getFloatArrayValue() : Array
		{
			return floatArrayValue;
		}

		public function setBooleanArrayValue(param1:Array) : void
		{
			booleanArrayValue = param1;
		}

		public function getBooleanArrayValue() : Array
		{
			return booleanArrayValue;
		}

		public function setByteArrayValue(param1:ByteArray) : void
		{
			byteArrayValue = param1;
		}

		public function getByteArrayValue() : ByteArray
		{
			return byteArrayValue;
		}

		public function setCharArrayValue(param1:Array) : void
		{
			charArrayValue = param1;
		}

		public function getCharArrayValue() : Array
		{
			return charArrayValue;
		}

		public function setLongArrayValue(param1:Array) : void
		{
			longArrayValue = param1;
		}

		public function getLongArrayValue() : Array
		{
			return longArrayValue;
		}

		public function setShortArrayValue(param1:Array) : void
		{
			shortArrayValue = param1;
		}

		public function getShortArrayValue() : Array
		{
			return shortArrayValue;
		}

		public function setEsObjectValue(param1:EsObject) : void
		{
			esObjectValue = param1;
		}

		public function getEsObjectValue() : EsObject
		{
			return esObjectValue;
		}

		public function setEsObjectArrayValue(param1:Array) : void
		{
			esObjectArrayValue = param1;
		}

		public function getEsObjectArrayValue() : Array
		{
			return esObjectArrayValue;
		}

		public function setNumberValue(param1:Number) : void
		{
			numberValue = param1;
		}

		public function getNumberValue() : Number
		{
			return numberValue;
		}

		public function setNumberArrayValue(param1:Array) : void
		{
			numberArrayValue = param1;
		}

		public function getNumberArrayValue() : Array
		{
			return numberArrayValue;
		}
	}
}
package com.electrotank.electroserver4.esobject
{
	public class EsObjectMap extends Object
	{
		private var value:EsObject;
		private var key:String;

		public function EsObjectMap(param1:String, param2:EsObject)
		{
			super();
			key = param1;
			value = param2;
		}

		public function getValue() : EsObject
		{
			return value;
		}

		public function getName() : String
		{
			return key;
		}
	}
}
package com.electrotank.electroserver4.message
{
	public interface Message
	{
		function getMessageId() : Number;

		function setMessageId(param1:Number) : void;

		function setMessageType(param1:MessageType) : void;

		function getMessageType() : MessageType;

		function validate() : ValidationResponse;

		function getIsRealServerMessage() : Boolean;

		function getRealMessage() : Message;
	}
}
package com.electrotank.electroserver4.message
{
	public class MessageImpl extends Object implements Message
	{
		private var messageId:Number;
		private var messageType:MessageType;
		private var isRealServerMessage:Boolean = true;
		public var type:String;
		public var target:Object;

		public function MessageImpl()
		{
			super();
		}

		public function getIsRealServerMessage() : Boolean
		{
			return isRealServerMessage;
		}

		public function setIsRealServerMessage(param1:Boolean) : void
		{
			this.isRealServerMessage = param1;
		}

		public function getRealMessage() : Message
		{
			var _loc_1:Message = null;
			return _loc_1;
		}

		public function getMessageId() : Number
		{
			return messageId;
		}

		public function setMessageId(param1:Number) : void
		{
			messageId = param1;
		}

		public function setMessageType(param1:MessageType) : void
		{
			messageType = param1;
			type = messageType.getMessageTypeName();
		}

		public function getMessageType() : MessageType
		{
			return messageType;
		}

		public function validate() : ValidationResponse
		{
			return new ValidationResponse(true, new Array());
		}
	}
}
package com.electrotank.electroserver4.message
{
	public class MessageType extends Object
	{
		private static var messageTypes:Array = new Array();
		public static var LoginRequest:MessageType = new MessageType("L", "LoginRequest", true, false, false);
		public static var AdditionalLoginRequest:MessageType = new MessageType("$", "LoginRequest", true, false, false);
		public static var LogoutRequest:MessageType = new MessageType("l", "LogoutRequest", true, false, false);
		public static var GetUsersInRoomRequest:MessageType = new MessageType("k", "GetUsersInRoomRequest", true, false, false);
		public static var PluginRequest:MessageType = new MessageType("C", "PluginRequest", true, false, false);
		public static var ValidateAdditionalLoginRequest:MessageType = new MessageType("%", "ValidateAdditionalLoginRequest", true, false, false);
		public static var FindZoneAndRoomByNameRequest:MessageType = new MessageType("D", "FindZoneAndRoomByNameRequest", true, false, false);
		public static var UpdateRoomDetailsRequest:MessageType = new MessageType("h", "UpdateRoomDetailsRequest", true, false, false);
		public static var EvictUserFromRoomRequest:MessageType = new MessageType("S", "EvictUserFromRoomRequest", true, false, false);
		public static var AddRoomOperatorRequest:MessageType = new MessageType("A", "AddRoomOperatorRequest", true, false, false);
		public static var RemoveRoomOperatorRequest:MessageType = new MessageType("B", "RemoveRoomOperatorRequest", true, false, false);
		public static var AddBuddyRequest:MessageType = new MessageType("K", "AddBuddyRequest", true, false, false);
		public static var RemoveBuddyRequest:MessageType = new MessageType("M", "RemoveBuddyRequest", true, false, false);
		public static var GetUserCountRequest:MessageType = new MessageType("0", "GetUserCountRequest", true, false, false);
		public static var DeleteUserVariableRequest:MessageType = new MessageType("H", "DeleteUserVariableRequest", true, false, false);
		public static var UpdateRoomVariableRequest:MessageType = new MessageType("o", "UpdateRoomVariableRequest", true, false, false);
		public static var UpdateUserVariableRequest:MessageType = new MessageType("I", "UpdateUserVariableRequest", true, false, false);
		public static var DeleteRoomVariableRequest:MessageType = new MessageType("N", "DeleteRoomVariableRequest", true, false, false);
		public static var CreateRoomVariableRequest:MessageType = new MessageType("n", "CreateRoomVariableRequest", true, false, false);
		public static var LeaveRoomRequest:MessageType = new MessageType("v", "LeaveRoomRequest", true, false, false);
		public static var CreateRoomRequest:MessageType = new MessageType("Q", "CreateRoomRequest", true, false, false);
		public static var PublicMessageRequest:MessageType = new MessageType("P", "PublicMessageRequest", true, false, false);
		public static var PrivateMessageRequest:MessageType = new MessageType("p", "PrivateMessageRequest", true, false, false);
		public static var GetRoomsInZoneRequest:MessageType = new MessageType("t", "GetRoomsInZoneRequest", true, false, false);
		public static var JoinRoomRequest:MessageType = new MessageType("J", "JoinRoomRequest", true, false, false);
		public static var GetZonesRequest:MessageType = new MessageType("s", "GetZonesRequest", true, false, false);
		public static var CreateOrJoinGameRequest:MessageType = new MessageType("(", "CreateOrJoinGameRequest", true, false, false);
		public static var FindGamesRequest:MessageType = new MessageType("*", "FindGamesRequest", true, false, false);
		public static var GetUserVariablesRequest:MessageType = new MessageType("+", "GetUserVariablesRequest", true, false, false);
		public static var GateWayKickUserRequest:MessageType = new MessageType("^", "GateWayKickUserRequest", true, false, false);
		public static var LoginResponse:MessageType = new MessageType("m", "LoginResponse", false, true, false);
		public static var GetUsersInRoomResponse:MessageType = new MessageType("F", "GetUsersInRoomResponse", false, true, false);
		public static var GetUserCountResponse:MessageType = new MessageType("1", "GetUserCountResponse", false, true, false);
		public static var GetZonesResponse:MessageType = new MessageType("b", "GetZonesResponse", false, true, false);
		public static var GetRoomsInZoneResponse:MessageType = new MessageType("d", "GetRoomsInZoneResponse", false, true, false);
		public static var GenericErrorResponse:MessageType = new MessageType("e", "GenericErrorResponse", false, true, false);
		public static var FindZoneAndRoomByNameResponse:MessageType = new MessageType("g", "FindZoneAndRoomByNameResponse", false, true, false);
		public static var ValidateAdditionalLoginResponse:MessageType = new MessageType("&", "ValidateAdditionalLoginResponse", false, true, false);
		public static var CreateOrJoinGameResponse:MessageType = new MessageType("_", "CreateOrJoinGameResponse", false, true, false);
		public static var FindGamesResponse:MessageType = new MessageType(")", "FindGamesResponse", false, true, false);
		public static var GetUserVariablesResponse:MessageType = new MessageType("=", "GetUserVariablesResponse", false, true, false);
		public static var ConnectionEvent:MessageType = new MessageType("c", "ConnectionEvent", false, false, true);
		public static var ClientIdleEvent:MessageType = new MessageType("i", "ClientIdleEvent", false, false, true);
		public static var JoinRoomEvent:MessageType = new MessageType("R", "JoinRoomEvent", false, false, true);
		public static var JoinZoneEvent:MessageType = new MessageType("Z", "JoinZoneEvent", false, false, true);
		public static var PublicMessageEvent:MessageType = new MessageType("a", "PublicMessagEvent", false, false, true);
		public static var PrivateMessageEvent:MessageType = new MessageType("r", "PrivateMessagEvent", false, false, true);
		public static var ZoneUpdateEvent:MessageType = new MessageType("V", "ZoneUpdateEvent", false, false, true);
		public static var LeaveRoomEvent:MessageType = new MessageType("W", "LeaveRoomEvent", false, false, true);
		public static var LeaveZoneEvent:MessageType = new MessageType("X", "LeaveZoneEvent", false, false, true);
		public static var UserListUpdateEvent:MessageType = new MessageType("U", "UserListUpdateEvent", false, false, true);
		public static var RoomVariableUpdateEvent:MessageType = new MessageType("q", "RoomVariableUpdateEvent", false, false, true);
		public static var UserVariableUpdateEvent:MessageType = new MessageType("Y", "UserVariableUpdateEvent", false, false, true);
		public static var BuddyStatusUpdatedEvent:MessageType = new MessageType("O", "BuddyStatusUpdatedEvent", false, false, true);
		public static var UserEvictedFromRoomEvent:MessageType = new MessageType("T", "UserEvictedFromRoomEvent", false, false, true);
		public static var UpdateRoomDetailsEvent:MessageType = new MessageType("E", "UpdateRoomDetailsEvent", false, false, true);
		public static var PluginMessageEvent:MessageType = new MessageType("f", "PluginMessageEvent", false, false, true);
		public static var CompositePluginMessageEvent:MessageType = new MessageType("G", "CompositePluginMessageEvent", false, false, true);
		public static var ConnectionClosedEvent:MessageType = new MessageType("|ConnectionClosedEvent", "ConnectionClosedEvent", false, false, true);
		public static var RtmpConnectionEvent:MessageType = new MessageType("|RtmpConnectionEvent", "RtmpConnectionEvent", false, false, true);
		public static var RtmpConnectionClosedEvent:MessageType = new MessageType("|RtmpConnectionClosedEvent", "RtmpConnectionClosedEvent", false, false, true);
		public static var RtmpOnStatusEvent:MessageType = new MessageType("|RtmpOnStatusEvent", "RtmpOnStatusEvent", false, false, true);
		private var messageTypeId:String;
		private var messageTypeName:String;
		private var isRequest:Boolean;
		private var isResponse:Boolean;
		private var isEvent:Boolean;

		final private static function register(param1:MessageType) : void
		{
			var _loc_2:Number = param1.getMessageTypeId().charCodeAt(0);
			messageTypes[_loc_2] = param1;
			var _loc_3:String = param1.getMessageTypeId();
		}

		final public static function findTypeById(param1:String) : MessageType
		{
			var _loc_2:Number = param1.charCodeAt(0);
			var _loc_3:MessageType = messageTypes[_loc_2];
			if(_loc_3 == null)
			{
				MessageType.trace("Error: MessageType class. Message type not found with id: " + param1);
			}
			return _loc_3;
		}

		public function MessageType(param1:String, param2:String, param3:Boolean, param4:Boolean, param5:Boolean)
		{
			super();
			setIsRequest(param3);
			setIsResponse(param4);
			setIsEvent(param4);
			setMessageTypeId(param1);
			setMessageTypeName(param2);
			register(this);
		}

		public function setIsRequest(param1:Boolean) : void
		{
			isRequest = param1;
		}

		public function getIsRequest() : Boolean
		{
			return isRequest;
		}

		public function setIsResponse(param1:Boolean) : void
		{
			isResponse = param1;
		}

		public function getIsResponse() : Boolean
		{
			return isResponse;
		}

		public function setIsEvent(param1:Boolean) : void
		{
			isEvent = param1;
		}

		public function getIsEvent() : Boolean
		{
			return isEvent;
		}

		public function setMessageTypeName(param1:String) : void
		{
			messageTypeName = param1;
		}

		public function getMessageTypeName() : String
		{
			return messageTypeName;
		}

		public function getMessageTypeId() : String
		{
			return messageTypeId;
		}

		public function setMessageTypeId(param1:String) : void
		{
			messageTypeId = param1;
		}
	}
}
package com.electrotank.electroserver4.message
{
	import com.electrotank.electroserver4.connection.*;
	import com.electrotank.electroserver4.protocol.*;

	public class QueuedMessage extends Object
	{
		private var messageReader:MessageReader;
		private var _messageId:Number;
		private var id:String;
		private var connection:AbstractConnection;

		public function QueuedMessage(param1:MessageReader, param2:String, param3:Number, param4:AbstractConnection)
		{
			super();
			this.messageReader = param1;
			this.id = param2;
			this._messageId = param3;
			this.connection = param4;
		}

		public function getConnection() : AbstractConnection
		{
			return connection;
		}

		public function getMessageReader() : MessageReader
		{
			return messageReader;
		}

		public function get messageId() : Number
		{
			return _messageId;
		}

		public function getId() : String
		{
			return id;
		}
	}
}
package com.electrotank.electroserver4.message
{
	public class ValidationResponse extends Object
	{
		private var isValid:Boolean;
		private var problems:Array;

		public function ValidationResponse(param1:Boolean, param2:Array)
		{
			super();
			this.isValid = param1;
			this.problems = param2;
		}

		public function getProblems() : Array
		{
			return problems;
		}

		public function getIsValid() : Boolean
		{
			return isValid;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.user.*;

	public class BuddyStatusUpdatedEvent extends EventImpl
	{
		public static var LoggedIn:Number = 0;
		public static var LoggedOut:Number = 1;
		private var actionId:Number;
		private var userId:String;
		private var userName:String;
		private var user:User;
		private var esObject:EsObject;
		private var hasEsObject:Boolean;

		public function BuddyStatusUpdatedEvent()
		{
			super();
			setMessageType(MessageType.BuddyStatusUpdatedEvent);
		}

		public function setHasEsObject(param1:Boolean) : void
		{
			hasEsObject = param1;
		}

		public function getHasEsObject() : Boolean
		{
			return hasEsObject;
		}

		public function setEsObject(param1:EsObject) : void
		{
			esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function setUser(param1:User) : void
		{
			user = param1;
		}

		public function getUser() : User
		{
			return user;
		}

		public function setActionId(param1:Number) : void
		{
			actionId = param1;
		}

		public function getActionId() : Number
		{
			return actionId;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setUserName(param1:String) : void
		{
			userName = param1;
		}

		public function getUserName() : String
		{
			return userName;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;

	public class ClientIdleEvent extends EventImpl
	{
		public function ClientIdleEvent()
		{
			super();
			setMessageType(MessageType.ClientIdleEvent);
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;

	public class CompositePluginMessageEvent extends EventImpl
	{
		private var parameters:Array;
		private var pluginName:String;
		private var originZoneId:Number;
		private var originRoomId:Number;

		public function CompositePluginMessageEvent()
		{
			super();
			setMessageType(MessageType.CompositePluginMessageEvent);
		}

		public function setOriginZoneId(param1:Number) : void
		{
			originZoneId = param1;
		}

		public function getOriginZoneId() : Number
		{
			return originZoneId;
		}

		public function setOriginRoomId(param1:Number) : void
		{
			originRoomId = param1;
		}

		public function getOriginRoomId() : Number
		{
			return originRoomId;
		}

		public function setPluginName(param1:String) : void
		{
			pluginName = param1;
		}

		public function getPluginName() : String
		{
			return pluginName;
		}

		public function setParameters(param1:Array) : void
		{
			parameters = param1;
		}

		public function getParameters() : Array
		{
			return parameters;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.connection.*;
	import com.electrotank.electroserver4.message.*;

	public class ConnectionClosedEvent extends EventImpl
	{
		private var connection:AbstractConnection;

		public function ConnectionClosedEvent()
		{
			super();
			setMessageType(MessageType.ConnectionClosedEvent);
		}

		public function setConnection(param1:AbstractConnection) : void
		{
			connection = param1;
		}

		public function getConnection() : AbstractConnection
		{
			return connection;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.message.*;

	public class ConnectionEvent extends EventImpl
	{
		private var accepted:Boolean;
		private var esError:EsError;
		private var hashId:int;
		private var prime:String;
		private var base:String;

		public function ConnectionEvent()
		{
			super();
			setMessageType(MessageType.ConnectionEvent);
		}

		public function setHashId(param1:int) : void
		{
			this.hashId = param1;
		}

		public function getHashId() : int
		{
			return hashId;
		}

		public function setEsError(param1:EsError) : void
		{
			this.esError = param1;
		}

		public function getEsError() : EsError
		{
			return this.esError;
		}

		public function setPrime(param1:String) : void
		{
			this.prime = param1;
		}

		public function getPrime() : String
		{
			return this.prime;
		}

		public function setBase(param1:String) : void
		{
			this.base = param1;
		}

		public function getBase() : String
		{
			return this.base;
		}

		public function get success() : Boolean
		{
			return getAccepted();
		}

		public function setAccepted(param1:Boolean) : void
		{
			accepted = param1;
		}

		public function getAccepted() : Boolean
		{
			return accepted;
		}

		public function toString() : String
		{
			return "ConnectionEvent[id: " + getHashId() + ", accepted: " + accepted + "]";
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;

	public class EventImpl extends MessageImpl
	{
		public function EventImpl()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.room.*;

	public class JoinRoomEvent extends EventImpl
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var roomName:String;
		private var zoneName:String;
		private var roomDescription:String;
		private var users:Array;
		private var roomVariables:Array;
		private var capacity:Number;
		private var isHidden:Boolean;
		private var hasPassword:Boolean;
		private var _room:Room;

		public function JoinRoomEvent()
		{
			super();
			setMessageType(MessageType.JoinRoomEvent);
			roomVariables = new Array();
		}

		public function set room(param1:Room) : void
		{
			_room = param1;
		}

		public function get room() : Room
		{
			return _room;
		}

		public function setCapacity(param1:Number) : void
		{
			capacity = param1;
		}

		public function getCapacity() : Number
		{
			return capacity;
		}

		public function setIsHidden(param1:Boolean) : void
		{
			isHidden = param1;
		}

		public function getIsHidden() : Boolean
		{
			return isHidden;
		}

		public function setHasPassword(param1:Boolean) : void
		{
			hasPassword = param1;
		}

		public function getHasPassword() : Boolean
		{
			return hasPassword;
		}

		public function setRoomVariables(param1:Array) : void
		{
			roomVariables = param1;
		}

		public function getRoomVariables() : Array
		{
			return roomVariables;
		}

		public function setUsers(param1:Array) : void
		{
			users = param1;
		}

		public function getUsers() : Array
		{
			return users;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneName(param1:String) : void
		{
			zoneName = param1;
		}

		public function getZoneName() : String
		{
			return zoneName;
		}

		public function setRoomName(param1:String) : void
		{
			roomName = param1;
		}

		public function getRoomName() : String
		{
			return roomName;
		}

		public function setRoomDescription(param1:String) : void
		{
			roomDescription = param1;
		}

		public function getRoomDescription() : String
		{
			return roomDescription;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.zone.*;

	public class JoinZoneEvent extends EventImpl
	{
		private var zoneId:Number;
		private var zoneName:String;
		private var rooms:Array;
		private var _zone:Zone;

		public function JoinZoneEvent()
		{
			super();
			setMessageType(MessageType.JoinZoneEvent);
		}

		public function set zone(param1:Zone) : void
		{
			_zone = param1;
		}

		public function get zone() : Zone
		{
			return _zone;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setZoneName(param1:String) : void
		{
			zoneName = param1;
		}

		public function getZoneName() : String
		{
			return zoneName;
		}

		public function setRooms(param1:Array) : void
		{
			rooms = param1;
		}

		public function getRooms() : Array
		{
			return rooms;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.room.*;

	public class LeaveRoomEvent extends EventImpl
	{
		private var roomId:Number;
		private var zoneId:Number;
		private var _room:Room;

		public function LeaveRoomEvent()
		{
			super();
			setMessageType(MessageType.LeaveRoomEvent);
		}

		public function set room(param1:Room) : void
		{
			_room = param1;
		}

		public function get room() : Room
		{
			return _room;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.zone.*;

	public class LeaveZoneEvent extends EventImpl
	{
		private var zoneId:Number;
		private var _zone:Zone;

		public function LeaveZoneEvent()
		{
			super();
			setMessageType(MessageType.LeaveZoneEvent);
		}

		public function set zone(param1:Zone) : void
		{
			_zone = param1;
		}

		public function get zone() : Zone
		{
			return _zone;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class PluginMessageEvent extends EventImpl
	{
		private var originZoneId:Number;
		private var originRoomId:Number;
		private var destinationZoneId:Number;
		private var destinationRoomId:Number;
		private var esObject:EsObject;
		private var pluginName:String;
		private var sentToRoom:Boolean;
		private var isRoomLevelPlugin:Boolean;

		public function PluginMessageEvent()
		{
			super();
			setMessageType(MessageType.PluginMessageEvent);
			setIsRoomLevelPlugin(false);
		}

		public function setIsRoomLevelPlugin(param1:Boolean) : void
		{
			isRoomLevelPlugin = param1;
		}

		public function getIsRoomLevelPlugin() : Boolean
		{
			return isRoomLevelPlugin;
		}

		public function setPluginName(param1:String) : void
		{
			pluginName = param1;
		}

		public function getPluginName() : String
		{
			return pluginName;
		}

		public function wasSentToRoom() : Boolean
		{
			return sentToRoom;
		}

		public function setSentToRoom(param1:Boolean) : void
		{
			sentToRoom = param1;
		}

		public function setEsObject(param1:EsObject) : void
		{
			this.esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return this.esObject;
		}

		public function setOriginZoneId(param1:Number) : void
		{
			originZoneId = param1;
		}

		public function getOriginZoneId() : Number
		{
			return originZoneId;
		}

		public function setOriginRoomId(param1:Number) : void
		{
			originRoomId = param1;
		}

		public function getOriginRoomId() : Number
		{
			return originRoomId;
		}

		public function setDestinationZoneId(param1:Number) : void
		{
			destinationZoneId = param1;
		}

		public function getDestinationZoneId() : Number
		{
			return destinationZoneId;
		}

		public function setDestinationRoomId(param1:Number) : void
		{
			destinationRoomId = param1;
		}

		public function getDestinationRoomId() : Number
		{
			return destinationRoomId;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.user.*;

	public class PrivateMessageEvent extends EventImpl
	{
		private var userId:String;
		private var userName:String;
		private var message:String;
		private var esObject:EsObject;
		private var _user:User;

		public function PrivateMessageEvent()
		{
			super();
			setMessageType(MessageType.PrivateMessageEvent);
		}

		public function setEsObject(param1:EsObject) : void
		{
			esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function set user(param1:User) : void
		{
			_user = param1;
		}

		public function get user() : User
		{
			return _user;
		}

		public function setUserName(param1:String) : void
		{
			userName = param1;
		}

		public function getUserName() : String
		{
			return userName;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setMessage(param1:String) : void
		{
			message = param1;
		}

		public function getMessage() : String
		{
			return message;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.user.*;

	public class PublicMessageEvent extends EventImpl
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var userId:String;
		private var userName:String;
		private var message:String;
		private var esObject:EsObject;
		private var userNameIncluded:Boolean;
		private var _user:User;
		private var _room:Room;

		public function PublicMessageEvent()
		{
			super();
			setMessageType(MessageType.PublicMessageEvent);
		}

		public function setEsObject(param1:EsObject) : void
		{
			esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function set room(param1:Room) : void
		{
			_room = param1;
		}

		public function get room() : Room
		{
			return _room;
		}

		public function set user(param1:User) : void
		{
			_user = param1;
		}

		public function get user() : User
		{
			return _user;
		}

		public function setUserName(param1:String) : void
		{
			userName = param1;
		}

		public function getUserName() : String
		{
			return userName;
		}

		public function setUserNameIncluded(param1:Boolean) : void
		{
			userNameIncluded = param1;
		}

		public function isUserNameIncluded() : Boolean
		{
			return userNameIncluded;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setMessage(param1:String) : void
		{
			message = param1;
		}

		public function getMessage() : String
		{
			return message;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.room.*;

	public class RoomVariableUpdateEvent extends EventImpl
	{
		public static var VariableCreated:Number = 1;
		public static var VariableUpdated:Number = 2;
		public static var VariableDeleted:Number = 3;
		private var roomId:Number;
		private var zoneId:Number;
		private var name:String;
		private var value:EsObject;
		private var locked:Boolean;
		private var lockChanged:Boolean;
		private var valueChanged:Boolean;
		private var updateAction:Number;
		private var persistent:Boolean;
		private var _room:Room;
		private var _minorType:String;
		private var _variable:RoomVariable;

		public function RoomVariableUpdateEvent()
		{
			super();
			setMessageType(MessageType.RoomVariableUpdateEvent);
		}

		public function set room(param1:Room) : void
		{
			_room = param1;
		}

		public function get room() : Room
		{
			return _room;
		}

		public function set minorType(param1:String) : void
		{
			_minorType = param1;
		}

		public function get minorType() : String
		{
			return _minorType;
		}

		public function set variable(param1:RoomVariable) : void
		{
			_variable = param1;
		}

		public function get variable() : RoomVariable
		{
			return _variable;
		}

		public function setPersistent(param1:Boolean) : void
		{
			persistent = param1;
		}

		public function getPersistent() : Boolean
		{
			return persistent;
		}

		public function setUpdateAction(param1:Number) : void
		{
			updateAction = param1;
		}

		public function getUpdateAction() : Number
		{
			return updateAction;
		}

		public function setLockChanged(param1:Boolean) : void
		{
			lockChanged = param1;
		}

		public function getLockChanged() : Boolean
		{
			return lockChanged;
		}

		public function setValueChanged(param1:Boolean) : void
		{
			valueChanged = param1;
		}

		public function getValueChanged() : Boolean
		{
			return valueChanged;
		}

		public function setName(param1:String) : void
		{
			name = param1;
		}

		public function getName() : String
		{
			return name;
		}

		public function setValue(param1:EsObject) : void
		{
			value = param1;
		}

		public function getValue() : EsObject
		{
			return value;
		}

		public function getLocked() : Boolean
		{
			return locked;
		}

		public function setLocked(param1:Boolean) : void
		{
			locked = param1;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;

	public class RtmpConnectionClosedEvent extends EventImpl
	{
		private var accepted:Boolean;

		public function RtmpConnectionClosedEvent()
		{
			super();
			setMessageType(MessageType.RtmpConnectionClosedEvent);
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;

	public class RtmpConnectionEvent extends EventImpl
	{
		private var accepted:Boolean;

		public function RtmpConnectionEvent()
		{
			super();
			setMessageType(MessageType.RtmpConnectionEvent);
		}

		public function setAccepted(param1:Boolean) : void
		{
			this.accepted = param1;
		}

		public function getAccepted() : Boolean
		{
			return accepted;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;

	public class RtmpOnStatusEvent extends EventImpl
	{
		private var info:Object;

		public function RtmpOnStatusEvent()
		{
			super();
			setMessageType(MessageType.RtmpOnStatusEvent);
		}

		public function getInfo() : Object
		{
			return info;
		}

		public function setInfo(param1:Object) : void
		{
			this.info = param1;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.room.*;

	public class UpdateRoomDetailsEvent extends EventImpl
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var roomNameUpdate:Boolean;
		private var roomName:String;
		private var capacityUpdate:Boolean;
		private var capacity:Number;
		private var descriptionUpdate:Boolean;
		private var description:String;
		private var passwordUpdate:Boolean;
		private var password:String;
		private var hiddenUpdate:Boolean;
		private var hidden:Boolean;
		private var _room:Room;

		public function UpdateRoomDetailsEvent()
		{
			super();
			setMessageType(MessageType.UpdateRoomDetailsEvent);
			setHiddenUpdate(false);
			setPasswordUpdate(false);
			setDescriptionUpdate(false);
			setCapacityUpdate(false);
			setRoomNameUpdate(false);
		}

		public function set room(param1:Room) : void
		{
			_room = param1;
		}

		public function get room() : Room
		{
			return _room;
		}

		public function setHidden(param1:Boolean) : void
		{
			setHiddenUpdate(true);
			hidden = param1;
		}

		public function getHidden() : Boolean
		{
			return hidden;
		}

		public function setHiddenUpdate(param1:Boolean) : void
		{
			hiddenUpdate = param1;
		}

		public function isHiddenUpdate() : Boolean
		{
			return hiddenUpdate;
		}

		public function getPassword() : String
		{
			return password;
		}

		public function setPassword(param1:String) : void
		{
			setPasswordUpdate(true);
			password = param1;
		}

		public function isPasswordUpdate() : Boolean
		{
			return passwordUpdate;
		}

		public function setPasswordUpdate(param1:Boolean) : void
		{
			passwordUpdate = param1;
		}

		public function setDescription(param1:String) : void
		{
			setDescriptionUpdate(true);
			description = param1;
		}

		public function getDescription() : String
		{
			return description;
		}

		public function setDescriptionUpdate(param1:Boolean) : void
		{
			descriptionUpdate = param1;
		}

		public function isDescriptionUpdate() : Boolean
		{
			return descriptionUpdate;
		}

		public function setCapacity(param1:Number) : void
		{
			setCapacityUpdate(true);
			capacity = param1;
		}

		public function getCapacity() : Number
		{
			return capacity;
		}

		public function setCapacityUpdate(param1:Boolean) : void
		{
			capacityUpdate = param1;
		}

		public function isCapacityUpdate() : Boolean
		{
			return capacityUpdate;
		}

		public function setRoomName(param1:String) : void
		{
			setRoomNameUpdate(true);
			roomName = param1;
		}

		public function getRoomName() : String
		{
			return roomName;
		}

		public function setRoomNameUpdate(param1:Boolean) : void
		{
			roomNameUpdate = param1;
		}

		public function isRoomNameUpdate() : Boolean
		{
			return roomNameUpdate;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.user.*;

	public class UserEvictedFromRoomEvent extends EventImpl
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var userId:String;
		private var reason:String;
		private var ban:Boolean;
		private var duration:Number;
		private var _user:User;

		public function UserEvictedFromRoomEvent()
		{
			super();
			setMessageType(MessageType.UserEvictedFromRoomEvent);
			ban = false;
		}

		public function set user(param1:User) : void
		{
			_user = param1;
		}

		public function get user() : User
		{
			return _user;
		}

		public function isBan() : Boolean
		{
			return ban;
		}

		public function setBan(param1:Boolean) : void
		{
			ban = param1;
		}

		public function setDuration(param1:Number) : void
		{
			duration = param1;
		}

		public function getDuration() : Number
		{
			return duration;
		}

		public function setReason(param1:String) : void
		{
			reason = param1;
		}

		public function getReason() : String
		{
			return reason;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.user.*;

	public class UserListUpdateEvent extends EventImpl
	{
		public static var AddUser:Number = 0;
		public static var DeleteUser:Number = 1;
		public static var UpdateUser:Number = 2;
		public static var OperatorGranted:Number = 3;
		public static var OperatorRevoked:Number = 4;
		public static var SendingVideoStream:Number = 5;
		public static var StoppingVideoStream:Number = 6;
		private var roomId:Number;
		private var zoneId:Number;
		private var actionId:Number;
		private var userId:String;
		private var userName:String;
		private var userVariables:Array;
		private var _user:User;
		private var _room:Room;
		private var _minorType:String;
		private var isSendingVideo:Boolean;
		private var videoStreamName:String;

		public function UserListUpdateEvent()
		{
			super();
			setMessageType(MessageType.UserListUpdateEvent);
		}

		public function setIsSendingVideo(param1:Boolean) : void
		{
			this.isSendingVideo = param1;
		}

		public function setUser(param1:User) : void
		{
			user = param1;
		}

		public function getUser() : User
		{
			return user;
		}

		public function getIsSendingVideo() : Boolean
		{
			return this.isSendingVideo;
		}

		public function setVideoStreamName(param1:String) : void
		{
			this.videoStreamName = param1;
		}

		public function getVideoStreamName() : String
		{
			return this.videoStreamName;
		}

		public function set room(param1:Room) : void
		{
			_room = param1;
		}

		public function get room() : Room
		{
			return _room;
		}

		public function set minorType(param1:String) : void
		{
			_minorType = param1;
		}

		public function get minorType() : String
		{
			return _minorType;
		}

		public function set user(param1:User) : void
		{
			_user = param1;
		}

		public function get user() : User
		{
			return _user;
		}

		public function setUserVariables(param1:Array) : void
		{
			userVariables = param1;
		}

		public function getUserVariables() : Array
		{
			return userVariables;
		}

		public function setUserName(param1:String) : void
		{
			userName = param1;
		}

		public function getUserName() : String
		{
			return userName;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setActionId(param1:Number) : void
		{
			actionId = param1;
		}

		public function getActionId() : Number
		{
			return actionId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.user.*;

	public class UserVariableUpdateEvent extends EventImpl
	{
		public static var VariableCreated:Number = 1;
		public static var VariableUpdated:Number = 2;
		public static var VariableDeleted:Number = 3;
		private var userId:String;
		private var actionId:Number;
		private var variable:UserVariable;
		private var _minorType:String;
		private var _user:User;
		private var variableName:String;

		public function UserVariableUpdateEvent()
		{
			super();
			setMessageType(MessageType.UserVariableUpdateEvent);
		}

		public function setVariableName(param1:String) : void
		{
			this.variableName = param1;
		}

		public function getVariableName() : String
		{
			return this.variableName;
		}

		public function set minorType(param1:String) : void
		{
			_minorType = param1;
		}

		public function get minorType() : String
		{
			return _minorType;
		}

		public function set user(param1:User) : void
		{
			_user = param1;
		}

		public function get user() : User
		{
			return _user;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setActionId(param1:Number) : void
		{
			actionId = param1;
		}

		public function getActionId() : Number
		{
			return actionId;
		}

		public function setVariable(param1:UserVariable) : void
		{
			variable = param1;
		}

		public function getVariable() : UserVariable
		{
			return variable;
		}
	}
}
package com.electrotank.electroserver4.message.event
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.zone.*;

	public class ZoneUpdateEvent extends EventImpl
	{
		public static var AddRoom:Number = 0;
		public static var DeleteRoom:Number = 1;
		public static var UpdateRoom:Number = 2;
		private var zoneId:Number;
		private var roomId:Number;
		private var actionId:Number;
		private var roomCount:Number;
		private var __room:Room;
		private var _room:Room;
		private var _minorType:String;
		private var _zone:Zone;

		public function ZoneUpdateEvent()
		{
			super();
			setMessageType(MessageType.ZoneUpdateEvent);
		}

		public function set zone(param1:Zone) : void
		{
			_zone = param1;
		}

		public function get zone() : Zone
		{
			return _zone;
		}

		public function set room(param1:Room) : void
		{
			_room = param1;
		}

		public function get room() : Room
		{
			return _room;
		}

		public function set minorType(param1:String) : void
		{
			_minorType = param1;
		}

		public function get minorType() : String
		{
			return _minorType;
		}

		public function setRoom(param1:Room) : void
		{
			__room = param1;
		}

		public function getRoom() : Room
		{
			return __room;
		}

		public function setRoomCount(param1:Number) : void
		{
			roomCount = param1;
		}

		public function getRoomCount() : Number
		{
			return roomCount;
		}

		public function setActionId(param1:Number) : void
		{
			actionId = param1;
		}

		public function getActionId() : Number
		{
			return actionId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class AddBuddyRequest extends RequestImpl
	{
		private var buddyName:String;
		private var esObject:EsObject;

		public function AddBuddyRequest()
		{
			super();
			setMessageType(MessageType.AddBuddyRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setEsObject(param1:EsObject) : void
		{
			esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function setBuddyName(param1:String) : void
		{
			buddyName = param1;
		}

		public function getBuddyName() : String
		{
			return buddyName;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class AddRoomOperatorRequest extends RequestImpl
	{
		private var userId:String;
		private var zoneId:Number;
		private var roomId:Number;

		public function AddRoomOperatorRequest()
		{
			super();
			setMessageType(MessageType.AddRoomOperatorRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setUserId(param1:String) : void
		{
			this.userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class CreateOrJoinGameRequest extends RequestImpl
	{
		private var zoneName:String;
		private var password:String;
		private var gameDetails:EsObject;
		private var searchCriteria:SearchCriteria;
		private var gameType:String;
		private var createOnly:Boolean;
		private var isHidden:Boolean;
		private var isLocked:Boolean;

		public function CreateOrJoinGameRequest()
		{
			super();
			setMessageType(MessageType.CreateOrJoinGameRequest);
			setSearchCriteria(new SearchCriteria());
			setIsHidden(false);
			setIsLocked(false);
		}

		public function setCreateOnly(param1:Boolean) : void
		{
			this.createOnly = param1;
			if(param1)
			{
				searchCriteria = null;
			}
		}

		public function setIsLocked(param1:Boolean) : void
		{
			this.isLocked = param1;
		}

		public function getIsLocked() : Boolean
		{
			return isLocked;
		}

		public function setIsHidden(param1:Boolean) : void
		{
			this.isHidden = param1;
		}

		public function getIsHidden() : Boolean
		{
			return isHidden;
		}

		public function setGameType(param1:String) : void
		{
			this.gameType = param1;
		}

		public function getGameType() : String
		{
			return gameType;
		}

		public function setZoneName(param1:String) : void
		{
			this.zoneName = param1;
		}

		public function getZoneName() : String
		{
			return zoneName;
		}

		public function setPassword(param1:String) : void
		{
			this.password = param1;
		}

		public function getPassword() : String
		{
			return password;
		}

		public function setGameDetails(param1:EsObject) : void
		{
			this.gameDetails = param1;
		}

		public function getGameDetails() : EsObject
		{
			return this.gameDetails;
		}

		public function setSearchCriteria(param1:SearchCriteria) : void
		{
			this.searchCriteria = param1;
		}

		public function getSearchCriteria() : SearchCriteria
		{
			return searchCriteria;
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class CreateRoomRequest extends RequestImpl
	{
		private var zoneId:Number;
		private var zoneName:String;
		private var roomName:String;
		private var roomDescription:String;
		private var capacity:Number;
		private var password:String;
		private var isReceivingRoomListUpdates:Boolean;
		private var isReceivingUserListUpdates:Boolean;
		private var isReceivingRoomVariableUpdates:Boolean;
		private var isReceivingUserVariableUpdates:Boolean;
		private var isReceivingVideoEvents:Boolean;
		private var isReceivingRoomDetailUpdates:Boolean;
		private var isNonOperatorUpdateAllowed:Boolean;
		private var isNonOperatorVariableUpdateAllowed:Boolean;
		private var isPersistent:Boolean;
		private var isHidden:Boolean;
		private var isCreateOrJoinRoom:Boolean;
		private var plugins:Array;
		private var variables:Array;
		private var isUsingLanguageFilter:Boolean;
		private var languageFilterName:String;
		private var isDeliverMessageOnFailure:Boolean;
		private var failuresBeforeKick:Number;
		private var kicksBeforeBan:Number;
		private var banDuration:Number;
		private var isResetAfterKick:Boolean;
		private var isUsingFloodingFilter:Boolean;
		private var isFloodingFilterSpecified:Boolean;
		private var floodingFilterName:String;
		private var floodingFilterFailuresBeforeKick:Number;
		private var floodingFilterKicksBeforeBan:Number;
		private var floodingFilterBanDuration:Number;
		private var isFloodingFilterResetAfterKick:Boolean;
		private var isLanguageFilterSpecified:Boolean;

		public function CreateRoomRequest()
		{
			super();
			setMessageType(MessageType.CreateRoomRequest);
			setZoneId(-1);
			setCapacity(-1);
			setIsCreateOrJoinRoom(true);
			setRoomDescription("");
			setIsNonOperatorUpdateAllowed(true);
			setIsNonOperatorVariableUpdateAllowed(true);
			setIsPersistent(false);
			setIsHidden(false);
			setPlugins(new Array());
			setRoomVariables(new Array());
			setIsReceivingRoomListUpdates(true);
			setIsReceivingRoomDetailUpdates(true);
			setIsReceivingUserListUpdates(true);
			setIsReceivingRoomVariableUpdates(true);
			setIsReceivingUserVariableUpdates(true);
			setIsReceivingVideoEvents(true);
			setIsUsingFloodingFilter(false);
			setIsFloodingFilterSpecified(false);
			setIsFloodingFilterResetAfterKick(false);
			setFloodingFilterBanDuration(-1);
			setFloodingFilterKicksBeforeBan(3);
			setFloodingFilterFailuresBeforeKick(1);
			setIsUsingLanguageFilter(false);
			setIsLanguageFilterSpecified(false);
			setIsDeliverMessageOnFailure(false);
			setFailuresBeforeKick(3);
			setKicksBeforeBan(3);
			setBanDuration(-1);
			setIsResetAfterKick(false);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setIsReceivingRoomDetailUpdates(param1:Boolean) : void
		{
			this.isReceivingRoomDetailUpdates = param1;
		}

		public function getIsReceivingRoomDetailUpdates() : Boolean
		{
			return isReceivingRoomDetailUpdates;
		}

		public function getIsReceivingVideoEvents() : Boolean
		{
			return this.isReceivingVideoEvents;
		}

		public function setIsReceivingVideoEvents(param1:Boolean) : void
		{
			this.isReceivingVideoEvents = param1;
		}

		private function setIsLanguageFilterSpecified(param1:Boolean) : void
		{
			isLanguageFilterSpecified = param1;
		}

		public function getIsLanguageFilterSpecified() : Boolean
		{
			return isLanguageFilterSpecified;
		}

		public function setIsFloodingFilterResetAfterKick(param1:Boolean) : void
		{
			isFloodingFilterResetAfterKick = param1;
		}

		public function getIsFloodingFilterResetAfterKick() : Boolean
		{
			return isFloodingFilterResetAfterKick;
		}

		public function setFloodingFilterBanDuration(param1:Number) : void
		{
			floodingFilterBanDuration = param1;
		}

		public function getFloodingFilterBanDuration() : Number
		{
			return floodingFilterBanDuration;
		}

		public function setFloodingFilterKicksBeforeBan(param1:Number) : void
		{
			floodingFilterKicksBeforeBan = param1;
		}

		public function getFloodingFilterKicksBeforeBan() : Number
		{
			return floodingFilterKicksBeforeBan;
		}

		public function setFloodingFilterFailuresBeforeKick(param1:Number) : void
		{
			floodingFilterFailuresBeforeKick = param1;
		}

		public function getFloodingFilterFailuresBeforeKick() : Number
		{
			return floodingFilterFailuresBeforeKick;
		}

		public function setFloodingFilterName(param1:String) : void
		{
			setIsFloodingFilterSpecified(true);
			floodingFilterName = param1;
		}

		public function getFloodingFilterName() : String
		{
			return floodingFilterName;
		}

		public function getIsFloodingFilterSpecified() : Boolean
		{
			return isFloodingFilterSpecified;
		}

		private function setIsFloodingFilterSpecified(param1:Boolean) : void
		{
			isFloodingFilterSpecified = param1;
		}

		public function setIsUsingFloodingFilter(param1:Boolean) : void
		{
			isUsingFloodingFilter = param1;
		}

		public function getIsUsingFloodingFilter() : Boolean
		{
			return isUsingFloodingFilter;
		}

		public function setIsResetAfterKick(param1:Boolean) : void
		{
			isResetAfterKick = param1;
		}

		public function getIsResetAfterKick() : Boolean
		{
			return isResetAfterKick;
		}

		public function setLanguageFilterName(param1:String) : void
		{
			setIsLanguageFilterSpecified(true);
			languageFilterName = param1;
		}

		public function getLanguageFilterName() : String
		{
			return languageFilterName;
		}

		public function setIsDeliverMessageOnFailure(param1:Boolean) : void
		{
			isDeliverMessageOnFailure = param1;
		}

		public function getIsDeliverMessageOnFailure() : Boolean
		{
			return isDeliverMessageOnFailure;
		}

		public function setFailuresBeforeKick(param1:Number) : void
		{
			param1 = param1;
		}

		public function getFailuresBeforeKick() : Number
		{
			return failuresBeforeKick;
		}

		public function setKicksBeforeBan(param1:Number) : void
		{
			param1 = param1;
		}

		public function getKicksBeforeBan() : Number
		{
			return kicksBeforeBan;
		}

		public function setBanDuration(param1:Number) : void
		{
			banDuration = param1;
		}

		public function getBanDuration() : Number
		{
			return banDuration;
		}

		public function setIsUsingLanguageFilter(param1:Boolean) : void
		{
			isUsingLanguageFilter = param1;
		}

		public function getIsUsingLanguageFilter() : Boolean
		{
			return isUsingLanguageFilter;
		}

		public function setIsCreateOrJoinRoom(param1:Boolean) : void
		{
			isCreateOrJoinRoom = param1;
		}

		public function getIsCreateOrJoinRoom() : Boolean
		{
			return isCreateOrJoinRoom;
		}

		public function setRoomVariables(param1:Array) : void
		{
			variables = param1;
		}

		public function getRoomVariables() : Array
		{
			return variables;
		}

		public function setIsNonOperatorUpdateAllowed(param1:Boolean) : void
		{
			isNonOperatorUpdateAllowed = param1;
		}

		public function getIsNonOperatorUpdateAllowed() : Boolean
		{
			return isNonOperatorUpdateAllowed;
		}

		public function setIsNonOperatorVariableUpdateAllowed(param1:Boolean) : void
		{
			isNonOperatorVariableUpdateAllowed = param1;
		}

		public function getIsNonOperatorVariableUpdateAllowed() : Boolean
		{
			return isNonOperatorVariableUpdateAllowed;
		}

		public function setPlugins(param1:Array) : void
		{
			this.plugins = param1;
		}

		public function getPlugins() : Array
		{
			return plugins;
		}

		public function setIsPersistent(param1:Boolean) : void
		{
			isPersistent = param1;
		}

		public function getIsPersistent() : Boolean
		{
			return isPersistent;
		}

		public function setIsHidden(param1:Boolean) : void
		{
			isHidden = param1;
		}

		public function getIsHidden() : Boolean
		{
			return isHidden;
		}

		public function setIsReceivingRoomListUpdates(param1:Boolean) : void
		{
			isReceivingRoomListUpdates = param1;
		}

		public function getIsReceivingRoomListUpdates() : Boolean
		{
			return isReceivingRoomListUpdates;
		}

		public function setIsReceivingUserListUpdates(param1:Boolean) : void
		{
			isReceivingUserListUpdates = param1;
		}

		public function getIsReceivingUserListUpdates() : Boolean
		{
			return isReceivingUserListUpdates;
		}

		public function setIsReceivingRoomVariableUpdates(param1:Boolean) : void
		{
			isReceivingRoomVariableUpdates = param1;
		}

		public function getIsReceivingRoomVariableUpdates() : Boolean
		{
			return isReceivingRoomVariableUpdates;
		}

		public function setIsReceivingUserVariableUpdates(param1:Boolean) : void
		{
			isReceivingUserVariableUpdates = param1;
		}

		public function getIsReceivingUserVariableUpdates() : Boolean
		{
			return isReceivingUserVariableUpdates;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setZoneName(param1:String) : void
		{
			zoneName = param1;
		}

		public function getZoneName() : String
		{
			return zoneName;
		}

		public function setRoomName(param1:String) : void
		{
			roomName = param1;
		}

		public function getRoomName() : String
		{
			return roomName;
		}

		public function setRoomDescription(param1:String) : void
		{
			roomDescription = param1;
		}

		public function getRoomDescription() : String
		{
			return roomDescription;
		}

		public function setCapacity(param1:Number) : void
		{
			this.capacity = param1;
		}

		public function getCapacity() : Number
		{
			return capacity;
		}

		public function setPassword(param1:String) : void
		{
			this.password = param1;
		}

		public function getPassword() : String
		{
			return password;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class CreateRoomVariableRequest extends RequestImpl
	{
		private var roomId:Number;
		private var zoneId:Number;
		private var name:String;
		private var value:EsObject;
		private var locked:Boolean;
		private var persistent:Boolean;

		public function CreateRoomVariableRequest()
		{
			super();
			setMessageType(MessageType.CreateRoomVariableRequest);
			setLocked(false);
			setPersistent(false);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setName(param1:String) : void
		{
			this.name = param1;
		}

		public function getName() : String
		{
			return name;
		}

		public function setValue(param1:EsObject) : void
		{
			value = param1;
		}

		public function getValue() : EsObject
		{
			return value;
		}

		public function setLocked(param1:Boolean) : void
		{
			this.locked = param1;
		}

		public function getLocked() : Boolean
		{
			return locked;
		}

		public function setPersistent(param1:Boolean) : void
		{
			persistent = param1;
		}

		public function getPersistent() : Boolean
		{
			return persistent;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class DeleteRoomVariableRequest extends RequestImpl
	{
		private var roomId:Number;
		private var zoneId:Number;
		private var name:String;

		public function DeleteRoomVariableRequest()
		{
			super();
			setMessageType(MessageType.DeleteRoomVariableRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setName(param1:String) : void
		{
			this.name = param1;
		}

		public function getName() : String
		{
			return name;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class DeleteUserVariableRequest extends RequestImpl
	{
		private var name:String;

		public function DeleteUserVariableRequest()
		{
			super();
			setMessageType(MessageType.DeleteUserVariableRequest);
		}

		public function setName(param1:String) : void
		{
			name = param1;
		}

		public function getName() : String
		{
			return name;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class EvictUserFromRoomRequest extends RequestImpl
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var userId:String;
		private var reason:String;
		private var ban:Boolean;
		private var duration:Number;

		public function EvictUserFromRoomRequest()
		{
			super();
			setMessageType(MessageType.EvictUserFromRoomRequest);
			ban = false;
		}

		public function isBan() : Boolean
		{
			return ban;
		}

		public function setBan(param1:Boolean) : void
		{
			ban = param1;
		}

		public function setDuration(param1:Number) : void
		{
			duration = param1;
		}

		public function getDuration() : Number
		{
			return duration;
		}

		public function setReason(param1:String) : void
		{
			reason = param1;
		}

		public function getReason() : String
		{
			return reason;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.message.*;

	public class FindGamesRequest extends RequestImpl
	{
		private var searchCriteria:SearchCriteria;

		public function FindGamesRequest()
		{
			super();
			setMessageType(MessageType.FindGamesRequest);
		}

		public function setSearchCriteria(param1:SearchCriteria) : void
		{
			this.searchCriteria = param1;
		}

		public function getSearchCriteria() : SearchCriteria
		{
			return searchCriteria;
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class FindZoneAndRoomByNameRequest extends RequestImpl
	{
		private var zoneName:String;
		private var roomName:String;

		public function FindZoneAndRoomByNameRequest()
		{
			super();
			setMessageType(MessageType.FindZoneAndRoomByNameRequest);
		}

		public function setZoneName(param1:String) : void
		{
			zoneName = param1;
		}

		public function getZoneName() : String
		{
			return zoneName;
		}

		public function setRoomName(param1:String) : void
		{
			roomName = param1;
		}

		public function getRoomName() : String
		{
			return roomName;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class GateWayKickUserRequest extends RequestImpl
	{
		private var eserror:EsError;
		private var esObject:EsObject;

		public function GateWayKickUserRequest()
		{
			super();
			setMessageType(MessageType.GateWayKickUserRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setEsObject(param1:EsObject) : void
		{
			esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function setEsError(param1:EsError) : void
		{
			this.eserror = param1;
		}

		public function getEsError() : EsError
		{
			return eserror;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class GetRoomsInZoneRequest extends RequestImpl
	{
		private var zoneId:Number;
		private var zoneName:String;

		public function GetRoomsInZoneRequest()
		{
			super();
			setMessageType(MessageType.GetRoomsInZoneRequest);
			setZoneId(-1);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setZoneName(param1:String) : void
		{
			this.zoneName = param1;
		}

		public function getZoneName() : String
		{
			return zoneName;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class GetUserCountRequest extends RequestImpl
	{
		public function GetUserCountRequest()
		{
			super();
			setMessageType(MessageType.GetUserCountRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class GetUsersInRoomRequest extends RequestImpl
	{
		private var roomId:Number;
		private var zoneId:Number;

		public function GetUsersInRoomRequest()
		{
			super();
			setMessageType(MessageType.GetUsersInRoomRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class GetUserVariablesRequest extends RequestImpl
	{
		private var userName:String;
		private var userVariableNames:Array;

		public function GetUserVariablesRequest()
		{
			super();
			setMessageType(MessageType.GetUserVariablesRequest);
			userVariableNames = new Array();
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			if(getUserName() == null)
			{
				_loc_2.push("A username must be specified.");
			}
			if(_loc_2.length != 0)
			{
				_loc_1 = false;
			}
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setUserName(param1:String) : void
		{
			this.userName = param1;
		}

		public function getUserName() : String
		{
			return this.userName;
		}

		public function addUserVariableName(param1:String) : void
		{
			getUserVariableNames().push(param1);
		}

		public function getUserVariableNames() : Array
		{
			return userVariableNames;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class GetZonesRequest extends RequestImpl
	{
		public function GetZonesRequest()
		{
			super();
			setMessageType(MessageType.GetZonesRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.room.*;

	public class JoinRoomRequest extends RequestImpl
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var password:String;
		private var isReceivingRoomListUpdates:Boolean;
		private var isReceivingUserListUpdates:Boolean;
		private var isReceivingRoomVariableUpdates:Boolean;
		private var isReceivingUserVariableUpdates:Boolean;
		private var isReceivingVideoEvents:Boolean;
		private var isReceivingRoomDetailUpdates:Boolean;
		private var room:Room;

		public function JoinRoomRequest()
		{
			super();
			setMessageType(MessageType.JoinRoomRequest);
			setRoomId(-1);
			setZoneId(-1);
			setIsReceivingRoomListUpdates(true);
			setIsReceivingRoomDetailUpdates(true);
			setIsReceivingUserListUpdates(true);
			setIsReceivingRoomVariableUpdates(true);
			setIsReceivingUserVariableUpdates(true);
			setIsReceivingVideoEvents(true);
		}

		public function setIsReceivingRoomDetailUpdates(param1:Boolean) : void
		{
			this.isReceivingRoomDetailUpdates = param1;
		}

		public function getIsReceivingRoomDetailUpdates() : Boolean
		{
			return isReceivingRoomDetailUpdates;
		}

		public function getRoom() : Room
		{
			return room;
		}

		public function getIsReceivingVideoEvents() : Boolean
		{
			return this.isReceivingVideoEvents;
		}

		public function setIsReceivingVideoEvents(param1:Boolean) : void
		{
			this.isReceivingVideoEvents = param1;
		}

		public function setIsReceivingRoomListUpdates(param1:Boolean) : void
		{
			isReceivingRoomListUpdates = param1;
		}

		public function getIsReceivingRoomListUpdates() : Boolean
		{
			return isReceivingRoomListUpdates;
		}

		public function setIsReceivingUserListUpdates(param1:Boolean) : void
		{
			isReceivingUserListUpdates = param1;
		}

		public function getIsReceivingUserListUpdates() : Boolean
		{
			return isReceivingUserListUpdates;
		}

		public function setIsReceivingRoomVariableUpdates(param1:Boolean) : void
		{
			isReceivingRoomVariableUpdates = param1;
		}

		public function getIsReceivingRoomVariableUpdates() : Boolean
		{
			return isReceivingRoomVariableUpdates;
		}

		public function setIsReceivingUserVariableUpdates(param1:Boolean) : void
		{
			isReceivingUserVariableUpdates = param1;
		}

		public function getIsReceivingUserVariableUpdates() : Boolean
		{
			return isReceivingUserVariableUpdates;
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setPassword(param1:String) : void
		{
			password = param1;
		}

		public function getPassword() : String
		{
			return password;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class LeaveRoomRequest extends RequestImpl
	{
		private var roomId:Number;
		private var zoneId:Number;

		public function LeaveRoomRequest()
		{
			super();
			setMessageType(MessageType.LeaveRoomRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class LoginRequest extends RequestImpl
	{
		private var userName:String;
		private var password:String;
		private var pairs:Array;
		private var userVariables:Array;
		private var sharedSecret:String;
		private var isAutoDiscoverProtocol:Boolean;
		private var protocols:Array;
		private var esObject:EsObject;
		private var isAdditionalLoginRequest:Boolean;

		public function LoginRequest()
		{
			super();
			setMessageType(MessageType.LoginRequest);
			isAdditionalLoginRequest = false;
			pairs = new Array();
			protocols = new Array();
			userVariables = new Array();
			setIsAutoDiscoverProtocol(true);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			if((isAdditionalLoginRequest && userName == null) && userName == "")
			{
				_loc_2.push("Additional login request requires a null UserName");
			}
			if(_loc_2.length > 0)
			{
				_loc_1 = false;
			}
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setSharedSecret(param1:String) : void
		{
			this.sharedSecret = param1;
			setMessageType(MessageType.AdditionalLoginRequest);
			isAdditionalLoginRequest = true;
		}

		public function getSharedSecret() : String
		{
			return sharedSecret;
		}

		public function setEsObject(param1:EsObject) : void
		{
			this.esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function setProtocols(param1:Array) : void
		{
			this.protocols = param1;
		}

		public function getProtocols() : Array
		{
			return this.protocols;
		}

		public function setIsAutoDiscoverProtocol(param1:Boolean) : void
		{
			this.isAutoDiscoverProtocol = param1;
		}

		public function getIsAutoDiscoverProtocol() : Boolean
		{
			return isAutoDiscoverProtocol;
		}

		public function getUserVariables() : Array
		{
			return userVariables;
		}

		public function addUserVariable(param1:String, param2:EsObject) : void
		{
			var _loc_3:EsObjectMap = new EsObjectMap(param1, param2);
			getUserVariables().push(_loc_3);
		}

		public function setUserVariables(param1:Array) : void
		{
			userVariables = param1;
		}

		public function setUserName(param1:String) : void
		{
			this.userName = param1;
		}

		public function getUserName() : String
		{
			return userName;
		}

		public function setPassword(param1:String) : void
		{
			this.password = param1;
		}

		public function getPassword() : String
		{
			return password;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class LogoutRequest extends RequestImpl
	{
		private var dropAllConnections:Boolean;
		private var dropConnection:Boolean;

		public function LogoutRequest()
		{
			super();
			setMessageType(MessageType.LogoutRequest);
			setDropAllConnections(true);
			setDropConnection(false);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setDropAllConnections(param1:Boolean) : void
		{
			dropAllConnections = param1;
		}

		public function getDropAllConnections() : Boolean
		{
			return dropAllConnections;
		}

		public function setDropConnection(param1:Boolean) : void
		{
			dropConnection = param1;
		}

		public function getDropConnection() : Boolean
		{
			return dropConnection;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class PluginRequest extends RequestImpl
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var esObject:EsObject;
		private var pluginName:String;
		private var sentToRoom:Boolean;

		public function PluginRequest()
		{
			super();
			setMessageType(MessageType.PluginRequest);
			esObject = new EsObject();
			setSentToRoom(false);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function getEsObject() : EsObject
		{
			return this.esObject;
		}

		public function setEsObject(param1:EsObject) : void
		{
			this.esObject = param1;
		}

		public function setPluginName(param1:String) : void
		{
			pluginName = param1;
		}

		public function getPluginName() : String
		{
			return pluginName;
		}

		public function wasSentToRoom() : Boolean
		{
			return sentToRoom;
		}

		private function setSentToRoom(param1:Boolean) : void
		{
			sentToRoom = param1;
		}

		public function setZoneId(param1:Number) : void
		{
			setSentToRoom(true);
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class PrivateMessageRequest extends RequestImpl
	{
		private var message:String;
		private var pairs:Array;
		private var users:Array;
		private var userNames:Array;
		private var esObject:EsObject;

		public function PrivateMessageRequest()
		{
			super();
			setMessageType(MessageType.PrivateMessageRequest);
			setUsers(new Array());
			setUserNames(new Array());
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			if(getUsers().length == 0 && getUserNames().length == 0)
			{
				_loc_2.push("getUsers() is empty.");
			}
			if(getUsers() == null)
			{
				_loc_2.push("getUsers() returned null.");
			}
			if(getMessage() == null)
			{
				_loc_2.push("getMessage() returned null.");
			}
			if(_loc_2.length > 0)
			{
				_loc_1 = false;
			}
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setUserNames(param1:Array) : void
		{
			userNames = param1;
		}

		public function getUserNames() : Array
		{
			return userNames;
		}

		public function setUsers(param1:Array) : void
		{
			this.users = param1;
		}

		public function getUsers() : Array
		{
			return users;
		}

		public function setEsObject(param1:EsObject) : void
		{
			esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function setMessage(param1:String) : void
		{
			this.message = param1;
		}

		public function getMessage() : String
		{
			return message;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class PublicMessageRequest extends RequestImpl
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var message:String;
		private var esObject:EsObject;

		public function PublicMessageRequest()
		{
			super();
			setMessageType(MessageType.PublicMessageRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			if(isNaN(getZoneId()))
			{
				_loc_2.push("zoneId cannot be null");
			}
			if(isNaN(getRoomId()))
			{
				_loc_2.push("roomId cannot be null");
			}
			if(getMessage() == null)
			{
				_loc_2.push("message cannot be null");
			}
			if(_loc_2.length > 0)
			{
				_loc_1 = false;
			}
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setEsObject(param1:EsObject) : void
		{
			esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function setMessage(param1:String) : void
		{
			this.message = param1;
		}

		public function getMessage() : String
		{
			return message;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class RemoveBuddyRequest extends RequestImpl
	{
		private var buddyName:String;

		public function RemoveBuddyRequest()
		{
			super();
			setMessageType(MessageType.RemoveBuddyRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setBuddyName(param1:String) : void
		{
			buddyName = param1;
		}

		public function getBuddyName() : String
		{
			return buddyName;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class RemoveRoomOperatorRequest extends RequestImpl
	{
		private var userId:String;
		private var zoneId:Number;
		private var roomId:Number;

		public function RemoveRoomOperatorRequest()
		{
			super();
			setMessageType(MessageType.RemoveRoomOperatorRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class RequestImpl extends MessageImpl
	{
		public function RequestImpl()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class UpdateRoomDetailsRequest extends RequestImpl
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var roomNameUpdate:Boolean;
		private var roomName:String;
		private var capacityUpdate:Boolean;
		private var capacity:Number;
		private var descriptionUpdate:Boolean;
		private var description:String;
		private var passwordUpdate:Boolean;
		private var password:String;
		private var hiddenUpdate:Boolean;
		private var hidden:Boolean;

		public function UpdateRoomDetailsRequest()
		{
			super();
			setMessageType(MessageType.UpdateRoomDetailsRequest);
			setHiddenUpdate(false);
			setPasswordUpdate(false);
			setDescriptionUpdate(false);
			setCapacityUpdate(false);
			setRoomNameUpdate(false);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setHidden(param1:Boolean) : void
		{
			setHiddenUpdate(true);
			hidden = param1;
		}

		public function getHidden() : Boolean
		{
			return hidden;
		}

		private function setHiddenUpdate(param1:Boolean) : void
		{
			hiddenUpdate = param1;
		}

		public function isHiddenUpdate() : Boolean
		{
			return hiddenUpdate;
		}

		public function getPassword() : String
		{
			return password;
		}

		public function setPassword(param1:String) : void
		{
			setPasswordUpdate(true);
			this.password = param1;
		}

		public function isPasswordUpdate() : Boolean
		{
			return passwordUpdate;
		}

		private function setPasswordUpdate(param1:Boolean) : void
		{
			passwordUpdate = param1;
		}

		public function setDescription(param1:String) : void
		{
			setDescriptionUpdate(true);
			this.description = param1;
		}

		public function getDescription() : String
		{
			return description;
		}

		private function setDescriptionUpdate(param1:Boolean) : void
		{
			descriptionUpdate = param1;
		}

		public function isDescriptionUpdate() : Boolean
		{
			return descriptionUpdate;
		}

		public function setCapacity(param1:Number) : void
		{
			setCapacityUpdate(true);
			this.capacity = param1;
		}

		public function getCapacity() : Number
		{
			return capacity;
		}

		private function setCapacityUpdate(param1:Boolean) : void
		{
			capacityUpdate = param1;
		}

		public function isCapacityUpdate() : Boolean
		{
			return capacityUpdate;
		}

		public function setRoomName(param1:String) : void
		{
			setRoomNameUpdate(true);
			this.roomName = param1;
		}

		public function getRoomName() : String
		{
			return roomName;
		}

		private function setRoomNameUpdate(param1:Boolean) : void
		{
			roomNameUpdate = param1;
		}

		public function isRoomNameUpdate() : Boolean
		{
			return roomNameUpdate;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class UpdateRoomVariableRequest extends RequestImpl
	{
		private var roomId:Number;
		private var zoneId:Number;
		private var name:String;
		private var value:EsObject;
		private var locked:Boolean;
		private var lockChanged:Boolean;
		private var valueChanged:Boolean;

		public function UpdateRoomVariableRequest()
		{
			super();
			setMessageType(MessageType.UpdateRoomVariableRequest);
			lockChanged = false;
			valueChanged = false;
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function hasValueChanged() : Boolean
		{
			return valueChanged;
		}

		public function setValue(param1:EsObject) : void
		{
			valueChanged = true;
			this.value = param1;
		}

		public function hasLockStatusChanged() : Boolean
		{
			return lockChanged;
		}

		public function setName(param1:String) : void
		{
			this.name = param1;
		}

		public function getName() : String
		{
			return name;
		}

		public function getValue() : EsObject
		{
			return value;
		}

		public function getLocked() : Boolean
		{
			return locked;
		}

		public function setLocked(param1:Boolean) : void
		{
			lockChanged = true;
			this.locked = param1;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class UpdateUserVariableRequest extends RequestImpl
	{
		private var name:String;
		private var value:EsObject;

		public function UpdateUserVariableRequest()
		{
			super();
			setMessageType(MessageType.UpdateUserVariableRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			if(getValue() == null)
			{
				_loc_2.push("getValue() must not return null.");
			}
			if(getName() == null)
			{
				_loc_2.push("getName() must not return null.");
			}
			_loc_1 = _loc_2.length == 0;
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setName(param1:String) : void
		{
			this.name = param1;
		}

		public function getName() : String
		{
			return name;
		}

		public function setValue(param1:EsObject) : void
		{
			this.value = param1;
		}

		public function getValue() : EsObject
		{
			return value;
		}
	}
}
package com.electrotank.electroserver4.message.request
{
	import com.electrotank.electroserver4.message.*;

	public class ValidateAdditionalLoginRequest extends RequestImpl
	{
		private var secret:String;

		public function ValidateAdditionalLoginRequest()
		{
			super();
			setMessageType(MessageType.ValidateAdditionalLoginRequest);
		}

		override public function validate() : ValidationResponse
		{
			var _loc_1:Boolean = true;
			var _loc_2:Array = new Array();
			var _loc_3:ValidationResponse = new ValidationResponse(_loc_1, _loc_2);
			return _loc_3;
		}

		public function setSecret(param1:String) : void
		{
			secret = param1;
		}

		public function getSecret() : String
		{
			return secret;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class CreateOrJoinGameResponse extends ResponseImpl
	{
		private var successful:Boolean;
		private var zoneId:Number;
		private var roomId:Number;
		private var esError:EsError;
		private var gameDetails:EsObject;
		private var gameId:Number;

		public function CreateOrJoinGameResponse()
		{
			super();
			setMessageType(MessageType.CreateOrJoinGameResponse);
		}

		public function setGameId(param1:Number) : void
		{
			this.gameId = param1;
		}

		public function getGameId() : Number
		{
			return gameId;
		}

		public function setGameDetails(param1:EsObject) : void
		{
			this.gameDetails = param1;
		}

		public function getGameDetails() : EsObject
		{
			return gameDetails;
		}

		public function setSuccessful(param1:Boolean) : void
		{
			this.successful = param1;
		}

		public function getSuccessful() : Boolean
		{
			return successful;
		}

		public function setZoneId(param1:Number) : void
		{
			this.zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			this.roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setEsError(param1:EsError) : void
		{
			this.esError = param1;
		}

		public function getEsError() : EsError
		{
			return esError;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.message.*;

	public class FindGamesResponse extends ResponseImpl
	{
		private var games:Array;

		public function FindGamesResponse()
		{
			super();
			setMessageType(MessageType.FindGamesResponse);
		}

		public function setGames(param1:Array) : void
		{
			this.games = param1;
		}

		public function getGames() : Array
		{
			return this.games;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.message.*;

	public class FindZoneAndRoomByNameResponse extends ResponseImpl
	{
		private var roomAndZoneList:Array;

		public function FindZoneAndRoomByNameResponse()
		{
			super();
			setMessageType(MessageType.FindZoneAndRoomByNameResponse);
		}

		public function setRoomAndZoneList(param1:Array) : void
		{
			roomAndZoneList = param1;
		}

		public function getRoomAndZoneList() : Array
		{
			return roomAndZoneList;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class GenericErrorResponse extends ResponseImpl
	{
		private var requestMessageType:MessageType;
		private var errorType:EsError;
		private var esObject:EsObject;
		private var hasEsObject:Boolean;

		public function GenericErrorResponse()
		{
			super();
			setMessageType(MessageType.GenericErrorResponse);
			hasEsObject = false;
		}

		public function setEsObject(param1:EsObject) : void
		{
			this.esObject = param1;
			hasEsObject = true;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function setRequestMessageType(param1:MessageType) : void
		{
			requestMessageType = param1;
		}

		public function getRequestMessageType() : MessageType
		{
			return requestMessageType;
		}

		public function setErrorType(param1:EsError) : void
		{
			errorType = param1;
		}

		public function getErrorType() : EsError
		{
			return errorType;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.room.*;

	public class GetRoomsInZoneResponse extends ResponseImpl
	{
		private var zoneId:Number;
		private var zoneName:String;
		private var rooms:Array;

		public function GetRoomsInZoneResponse()
		{
			super();
			setMessageType(MessageType.GetRoomsInZoneResponse);
			rooms = new Array();
			setZoneId(-1);
		}

		public function setZoneName(param1:String) : void
		{
			zoneName = param1;
		}

		public function getZoneName() : String
		{
			return zoneName;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function addRoom(param1:Room) : void
		{
			getRooms().push(param1);
		}

		public function getRooms() : Array
		{
			return rooms;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.message.*;

	public class GetUserCountResponse extends ResponseImpl
	{
		private var count:Number;

		public function GetUserCountResponse()
		{
			super();
			setMessageType(MessageType.GetUserCountResponse);
		}

		public function setCount(param1:Number) : void
		{
			count = param1;
		}

		public function getCount() : Number
		{
			return count;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.message.*;

	public class GetUsersInRoomResponse extends ResponseImpl
	{
		private var users:Array;
		private var roomId:Number;
		private var zoneId:Number;

		public function GetUsersInRoomResponse()
		{
			super();
			setMessageType(MessageType.GetUsersInRoomResponse);
		}

		public function setUsers(param1:Array) : void
		{
			users = param1;
		}

		public function getUsers() : Array
		{
			return users;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class GetUserVariablesResponse extends ResponseImpl
	{
		private var userVariables:Array;
		private var userVariablesByName:Object;
		private var userName:String;

		public function GetUserVariablesResponse()
		{
			super();
			setMessageType(MessageType.GetUserVariablesResponse);
			userVariables = new Array();
			userVariablesByName = new Object();
		}

		public function setUserName(param1:String) : void
		{
			this.userName = param1;
		}

		public function getUserName() : String
		{
			return userName;
		}

		public function addVariable(param1:String, param2:EsObject) : void
		{
			var _loc_3:UserVariable = new UserVariable(param1, param2);
			userVariablesByName[param1] = _loc_3;
			userVariables.push(_loc_3);
		}

		public function getUserVariables() : Array
		{
			return userVariables;
		}

		public function getUserVariableByName(param1:String) : UserVariable
		{
			return userVariablesByName[param1];
		}

		public function doesUserVariableExist(param1:String) : Boolean
		{
			return !(userVariablesByName[param1] == null);
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.zone.*;

	public class GetZonesResponse extends ResponseImpl
	{
		private var zones:Array;

		public function GetZonesResponse()
		{
			super();
			setMessageType(MessageType.GetZonesResponse);
			zones = new Array();
		}

		public function addZone(param1:Zone) : void
		{
			getZones().push(param1);
		}

		public function getZones() : Array
		{
			return zones;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;

	public class LoginResponse extends ResponseImpl
	{
		private var accepted:Boolean;
		private var esError:EsError;
		private var esObject:EsObject;
		private var userName:String;
		private var userId:String;
		private var userVariables:Array;
		private var buddies:Object;

		public function LoginResponse()
		{
			super();
			setMessageType(MessageType.LoginResponse);
		}

		public function setUserVariables(param1:Array) : void
		{
			userVariables = param1;
		}

		public function getUserVariables() : Array
		{
			return userVariables;
		}

		public function setBuddies(param1:Object) : void
		{
			buddies = param1;
		}

		public function getBuddies() : Object
		{
			return buddies;
		}

		public function setUserId(param1:String) : void
		{
			this.userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}

		public function setUserName(param1:String) : void
		{
			this.userName = param1;
		}

		public function getUserName() : String
		{
			return userName;
		}

		public function get success() : Boolean
		{
			return getAccepted();
		}

		public function setEsObject(param1:EsObject) : void
		{
			esObject = param1;
		}

		public function getEsObject() : EsObject
		{
			return esObject;
		}

		public function setAccepted(param1:Boolean) : void
		{
			accepted = param1;
		}

		public function getAccepted() : Boolean
		{
			return accepted;
		}

		public function setEsError(param1:EsError) : void
		{
			esError = param1;
		}

		public function getEsError() : EsError
		{
			return esError;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.message.*;

	public class ResponseImpl extends MessageImpl
	{
		private var requestId:Number;

		public function ResponseImpl()
		{
			super();
		}

		public function setRequestId(param1:Number) : void
		{
			requestId = param1;
		}

		public function getRequestId() : Number
		{
			return requestId;
		}
	}
}
package com.electrotank.electroserver4.message.response
{
	import com.electrotank.electroserver4.message.*;

	public class ValidateAdditionalLoginResponse extends ResponseImpl
	{
		private var approved:Boolean;
		private var secret:String;

		public function ValidateAdditionalLoginResponse()
		{
			super();
			setMessageType(MessageType.ValidateAdditionalLoginResponse);
		}

		public function getApproved() : Boolean
		{
			return approved;
		}

		public function setApproved(param1:Boolean) : void
		{
			approved = param1;
		}

		public function setSecret(param1:String) : void
		{
			secret = param1;
		}

		public function getSecret() : String
		{
			return secret;
		}
	}
}
package com.electrotank.electroserver4.plugin
{
	import com.electrotank.electroserver4.esobject.*;

	public class Plugin extends Object
	{
		private var data:EsObject;
		private var extensionName:String;
		private var pluginName:String;
		private var pluginHandle:String;

		public function Plugin()
		{
			super();
			data = new EsObject();
		}

		public function setExtensionName(param1:String) : void
		{
			this.extensionName = param1;
		}

		public function getExtensionName() : String
		{
			return extensionName;
		}

		public function setPluginName(param1:String) : void
		{
			this.pluginName = param1;
		}

		public function getPluginName() : String
		{
			return pluginName;
		}

		public function setPluginHandle(param1:String) : void
		{
			this.pluginHandle = param1;
		}

		public function getPluginHandle() : String
		{
			return pluginHandle;
		}

		public function getData() : EsObject
		{
			return data;
		}
	}
}
package com.electrotank.electroserver4.protocol
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.protocol.codec.*;

	public class As2ProtocolHandler extends Object
	{
		private var mapper:Object;

		public function As2ProtocolHandler()
		{
			super();
			mapper = new Object();
			register(MessageType.LoginRequest, MessageCodec(new LoginRequestCodec()));
			register(MessageType.AdditionalLoginRequest, MessageCodec(new LoginRequestCodec()));
			register(MessageType.LogoutRequest, MessageCodec(new LogoutRequestCodec()));
			register(MessageType.GetUsersInRoomRequest, MessageCodec(new GetUsersInRoomRequestCodec()));
			register(MessageType.UpdateRoomDetailsRequest, MessageCodec(new UpdateRoomDetailsRequestCodec()));
			register(MessageType.PluginRequest, MessageCodec(new PluginRequestCodec()));
			register(MessageType.ValidateAdditionalLoginRequest, MessageCodec(new ValidateAdditionalLoginRequestCodec()));
			register(MessageType.FindZoneAndRoomByNameRequest, MessageCodec(new FindZoneAndRoomByNameRequestCodec()));
			register(MessageType.EvictUserFromRoomRequest, MessageCodec(new EvictUserFromRoomRequestCodec()));
			register(MessageType.AddRoomOperatorRequest, MessageCodec(new AddRoomOperatorRequestCodec()));
			register(MessageType.RemoveRoomOperatorRequest, MessageCodec(new RemoveRoomOperatorRequestCodec()));
			register(MessageType.AddBuddyRequest, MessageCodec(new AddBuddyRequestCodec()));
			register(MessageType.RemoveBuddyRequest, MessageCodec(new RemoveBuddyRequestCodec()));
			register(MessageType.GetUserCountRequest, MessageCodec(new GetUserCountRequestCodec()));
			register(MessageType.DeleteUserVariableRequest, MessageCodec(new DeleteUserVariableRequestCodec()));
			register(MessageType.UpdateRoomVariableRequest, MessageCodec(new UpdateRoomVariableRequestCodec()));
			register(MessageType.UpdateUserVariableRequest, MessageCodec(new UpdateUserVariableRequestCodec()));
			register(MessageType.DeleteRoomVariableRequest, MessageCodec(new DeleteRoomVariableRequestCodec()));
			register(MessageType.CreateRoomVariableRequest, MessageCodec(new CreateRoomVariableRequestCodec()));
			register(MessageType.LeaveRoomRequest, MessageCodec(new LeaveRoomRequestCodec()));
			register(MessageType.GetZonesRequest, MessageCodec(new GetZonesRequestCodec()));
			register(MessageType.CreateRoomRequest, MessageCodec(new CreateRoomRequestCodec()));
			register(MessageType.GetRoomsInZoneRequest, MessageCodec(new GetRoomsInZoneRequestCodec()));
			register(MessageType.GetUsersInRoomResponse, MessageCodec(new GetUsersInRoomResponseCodec()));
			register(MessageType.GetZonesResponse, MessageCodec(new GetZonesResponseCodec()));
			register(MessageType.GetRoomsInZoneResponse, MessageCodec(new GetRoomsInZoneResponseCodec()));
			register(MessageType.GetUserCountResponse, MessageCodec(new GetUserCountResponseCodec()));
			register(MessageType.GenericErrorResponse, MessageCodec(new GenericErrorResponseCodec()));
			register(MessageType.ValidateAdditionalLoginResponse, MessageCodec(new ValidateAdditionalLoginResponseCodec()));
			register(MessageType.JoinRoomRequest, MessageCodec(new JoinRoomRequestCodec()));
			register(MessageType.GateWayKickUserRequest, MessageCodec(new GateWayKickUserRequestCodec()));
			register(MessageType.ConnectionEvent, MessageCodec(new ConnectionEventCodec()));
			register(MessageType.LoginResponse, MessageCodec(new LoginResponseCodec()));
			register(MessageType.FindZoneAndRoomByNameResponse, MessageCodec(new FindZoneAndRoomByNameResponseCodec()));
			register(MessageType.JoinRoomEvent, MessageCodec(new JoinRoomEventCodec()));
			register(MessageType.JoinZoneEvent, MessageCodec(new JoinZoneEventCodec()));
			register(MessageType.PublicMessageRequest, MessageCodec(new PublicMessageRequestCodec()));
			register(MessageType.PrivateMessageRequest, MessageCodec(new PrivateMessageRequestCodec()));
			register(MessageType.PublicMessageEvent, MessageCodec(new PublicMessageEventCodec()));
			register(MessageType.PrivateMessageEvent, MessageCodec(new PrivateMessageEventCodec()));
			register(MessageType.ZoneUpdateEvent, MessageCodec(new ZoneUpdateEventCodec()));
			register(MessageType.LeaveRoomEvent, MessageCodec(new LeaveRoomEventCodec()));
			register(MessageType.LeaveZoneEvent, MessageCodec(new LeaveZoneEventCodec()));
			register(MessageType.UserListUpdateEvent, MessageCodec(new UserListUpdateEventCodec()));
			register(MessageType.RoomVariableUpdateEvent, MessageCodec(new RoomVariableUpdateEventCodec()));
			register(MessageType.UserVariableUpdateEvent, MessageCodec(new UserVariableUpdateEventCodec()));
			register(MessageType.BuddyStatusUpdatedEvent, MessageCodec(new BuddyStatusUpdatedEventCodec()));
			register(MessageType.UserEvictedFromRoomEvent, MessageCodec(new UserEvictedFromRoomEventCodec()));
			register(MessageType.PluginMessageEvent, MessageCodec(new PluginMessageEventCodec()));
			register(MessageType.CompositePluginMessageEvent, MessageCodec(new CompositePluginMessageEventCodec()));
			register(MessageType.UpdateRoomDetailsEvent, MessageCodec(new UpdateRoomDetailsEventCodec()));
			register(MessageType.CreateOrJoinGameRequest, MessageCodec(new CreateOrJoinGameRequestCodec()));
			register(MessageType.FindGamesRequest, MessageCodec(new FindGamesRequestCodec()));
			register(MessageType.CreateOrJoinGameResponse, MessageCodec(new CreateOrJoinGameResponseCodec()));
			register(MessageType.FindGamesResponse, MessageCodec(new FindGamesResponseCodec()));
			register(MessageType.GetUserVariablesRequest, MessageCodec(new GetUserVariablesRequestCodec()));
			register(MessageType.GetUserVariablesResponse, MessageCodec(new GetUserVariablesResponseCodec()));
			register(MessageType.ClientIdleEvent, MessageCodec(new ClientIdleEventCodec()));
		}

		public function getMessageCodec(param1:MessageType) : MessageCodec
		{
			var _loc_2:MessageCodec = mapper[param1.getMessageTypeName()];
			if(_loc_2 == null)
			{
				trace("Error: Tried to find a MessageCodec for " + param1.getMessageTypeName() + " and none was was registered.");
			}
			return _loc_2;
		}

		private function register(param1:MessageType, param2:MessageCodec) : void
		{
			mapper[param1.getMessageTypeName()] = param2;
		}
	}
}
package com.electrotank.electroserver4.protocol
{
	import flash.utils.*;

	public interface MessageReader
	{
		function nextPrefixedString(param1:Number) : String;

		function nextCharacter() : String;

		function nextBoolean() : Boolean;

		function nextString(...restArguments) : String;

		function nextShort(...restArguments) : Number;

		function nextInteger(...restArguments) : int;

		function nextLong(...restArguments) : String;

		function nextDouble(...restArguments) : Number;

		function nextFloat() : Number;

		function nextByte() : int;

		function nextIntegerArray(...restArguments) : Array;

		function nextStringArray() : Array;

		function nextCharacterArray() : Array;

		function nextBooleanArray() : Array;

		function nextShortArray() : Array;

		function nextLongArray() : Array;

		function nextDoubleArray() : Array;

		function nextFloatArray() : Array;

		function nextByteArray() : ByteArray;
	}
}
package com.electrotank.electroserver4.protocol
{
	import flash.utils.*;

	public interface MessageWriter
	{
		function getData() : String;

		function writePrefixedString(param1:String, param2:Number) : void;

		function writeCharacter(param1:String) : void;

		function writeBoolean(param1:Boolean) : void;

		function writeInteger(...restArguments) : void;

		function writeString(param1:String) : void;

		function writeLong(...restArguments) : void;

		function writeFloat(param1:Number) : void;

		function writeDouble(...restArguments) : void;

		function writeShort(...restArguments) : void;

		function writeByte(param1:int) : void;

		function writeIntegerArray(param1:Array) : void;

		function writeStringArray(param1:Array) : void;

		function writeLongArray(param1:Array) : void;

		function writeFloatArray(param1:Array) : void;

		function writeDoubleArray(param1:Array) : void;

		function writeShortArray(param1:Array) : void;

		function writeByteArray(param1:ByteArray) : void;

		function writeCharacterArray(param1:Array) : void;

		function writeBooleanArray(param1:Array) : void;
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class AddBuddyRequestCodec extends MessageCodecImpl
	{
		public function AddBuddyRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:AddBuddyRequest = AddBuddyRequest(param2);
			param1.writePrefixedString(_loc_3.getBuddyName(), MessageConstants.USER_NAME_PREFIX_LENGTH);
			var _loc_4:EsObject = _loc_3.getEsObject();
			if(_loc_4 == null)
			{
				param1.writeBoolean(false);
			}
			else
			{
				param1.writeBoolean(true);
				EsObjectCodec.encode(param1, _loc_4);
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class AddRoomOperatorRequestCodec extends MessageCodecImpl
	{
		public function AddRoomOperatorRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:AddRoomOperatorRequest = AddRoomOperatorRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
			param1.writeLong(_loc_3.getUserId(), MessageConstants.USER_ID_LENGTH);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class BuddyStatusUpdatedEventCodec extends MessageCodecImpl
	{
		public function BuddyStatusUpdatedEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_4:EsObject = null;
			var _loc_2:BuddyStatusUpdatedEvent = new BuddyStatusUpdatedEvent();
			var _loc_3:Number = param1.nextShort(MessageConstants.UPDATE_ACTION_LENGTH);
			_loc_2.setActionId(_loc_3);
			_loc_2.setUserId(param1.nextLong(MessageConstants.USER_ID_LENGTH));
			_loc_2.setUserName(param1.nextPrefixedString(MessageConstants.USER_NAME_PREFIX_LENGTH));
			_loc_2.setHasEsObject(param1.nextBoolean());
			if(_loc_2.getHasEsObject())
			{
				_loc_4 = EsObjectCodec.decode(param1);
				_loc_2.setEsObject(_loc_4);
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class ClientIdleEventCodec extends MessageCodecImpl
	{
		public function ClientIdleEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:ClientIdleEvent = new ClientIdleEvent();
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class CompositePluginMessageEventCodec extends MessageCodecImpl
	{
		public function CompositePluginMessageEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:CompositePluginMessageEvent = new CompositePluginMessageEvent();
			_loc_2.setPluginName(param1.nextPrefixedString(MessageConstants.PLUGIN_PARM_NAME_PREFIX_LENGTH));
			_loc_2.setOriginZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
			_loc_2.setOriginRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
			var _loc_3:Number = param1.nextInteger(MessageConstants.COMPOSITE_ESOBJECT_ARRAY_PREFIX_LENGTH);
			var _loc_4:Array = new Array();
			var _loc_5:Number = 0;
			while(_loc_5 < _loc_3)
			{
				_loc_4.push(EsObjectCodec.decode(param1));
				_loc_5 = _loc_5 + 1;
			}
			_loc_2.setParameters(_loc_4);
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class ConnectionEventCodec extends MessageCodecImpl
	{
		public function ConnectionEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_4:int = NaN;
			var _loc_2:ConnectionEvent = new ConnectionEvent();
			var _loc_3:Boolean = param1.nextBoolean();
			_loc_2.setAccepted(_loc_3);
			if(_loc_2.getAccepted())
			{
				_loc_2.setHashId(param1.nextInteger(MessageConstants.HASH_ID_LENGTH));
				_loc_2.setPrime(param1.nextString());
				_loc_2.setBase(param1.nextString());
			}
			else
			{
				_loc_4 = param1.nextInteger(MessageConstants.ERROR_ID_LENGTH);
				_loc_2.setEsError(Errors.getErrorById(_loc_4));
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class CreateOrJoinGameRequestCodec extends MessageCodecImpl
	{
		public function CreateOrJoinGameRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:CreateOrJoinGameRequest = CreateOrJoinGameRequest(param2);
			param1.writeString(_loc_3.getGameType());
			param1.writeString(_loc_3.getZoneName());
			if(_loc_3.getPassword() == null || _loc_3.getPassword().length == 0)
			{
				param1.writeBoolean(false);
			}
			else
			{
				param1.writeBoolean(true);
				param1.writeString(_loc_3.getPassword());
			}
			var _loc_4:EsObject = _loc_3.getGameDetails();
			if(_loc_4 == null)
			{
				param1.writeBoolean(false);
			}
			else
			{
				param1.writeBoolean(true);
				EsObjectCodec.encode(param1, _loc_4);
			}
			param1.writeBoolean(_loc_3.getIsLocked());
			param1.writeBoolean(_loc_3.getIsHidden());
			SearchCriteriaCodec.encode(param1, _loc_3.getSearchCriteria());
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;

	public class CreateOrJoinGameResponseCodec extends MessageCodecImpl
	{
		public function CreateOrJoinGameResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			var _loc_3:CreateOrJoinGameResponse = new CreateOrJoinGameResponse();
			_loc_3.setSuccessful(param1.nextBoolean());
			if(_loc_3.getSuccessful())
			{
				_loc_3.setGameId(param1.nextInteger());
				_loc_3.setZoneId(param1.nextInteger());
				_loc_3.setRoomId(param1.nextInteger());
				_loc_3.setGameDetails(EsObjectCodec.decode(param1));
			}
			else
			{
				_loc_3.setEsError(Errors.getErrorById(param1.nextInteger()));
			}
			return _loc_3;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.plugin.*;
	import com.electrotank.electroserver4.protocol.*;

	public class CreateRoomRequestCodec extends MessageCodecImpl
	{
		public function CreateRoomRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:CreateRoomRequest = CreateRoomRequest(param2);
			if(_loc_3.getZoneId() == -1)
			{
				param1.writeBoolean(false);
				param1.writePrefixedString(_loc_3.getZoneName(), MessageConstants.ZONE_NAME_PREFIX_LENGTH);
			}
			else
			{
				param1.writeBoolean(true);
				param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			}
			param1.writePrefixedString(_loc_3.getRoomName(), MessageConstants.ROOM_NAME_PREFIX_LENGTH);
			if((_loc_3.getRoomDescription() == null) && _loc_3.getRoomDescription().length == 0)
			{
				param1.writeBoolean(true);
				param1.writePrefixedString(_loc_3.getRoomDescription(), MessageConstants.ROOM_DESCRIPTION_PREFIX_LENGTH);
			}
			else
			{
				param1.writeBoolean(false);
			}
			if((_loc_3.getPassword() == null) && _loc_3.getPassword().length == 0)
			{
				param1.writeBoolean(true);
				param1.writePrefixedString(_loc_3.getPassword(), MessageConstants.ROOM_PASSWORD_PREFIX_LENGTH);
			}
			else
			{
				param1.writeBoolean(false);
			}
			param1.writeInteger(_loc_3.getCapacity(), MessageConstants.ROOM_CAPACITY_LENGTH);
			param1.writeBoolean(_loc_3.getIsPersistent());
			param1.writeBoolean(_loc_3.getIsHidden());
			param1.writeBoolean(_loc_3.getIsReceivingRoomListUpdates());
			param1.writeBoolean(_loc_3.getIsReceivingRoomDetailUpdates());
			param1.writeBoolean(_loc_3.getIsReceivingUserListUpdates());
			param1.writeBoolean(_loc_3.getIsReceivingRoomVariableUpdates());
			param1.writeBoolean(_loc_3.getIsReceivingUserVariableUpdates());
			param1.writeBoolean(_loc_3.getIsReceivingVideoEvents());
			param1.writeBoolean(_loc_3.getIsNonOperatorUpdateAllowed());
			param1.writeBoolean(_loc_3.getIsNonOperatorVariableUpdateAllowed());
			param1.writeBoolean(_loc_3.getIsCreateOrJoinRoom());
			RoomVariableCodec.encode(param1, _loc_3.getRoomVariables());
			encodePlugins(param1, _loc_3.getPlugins());
			param1.writeBoolean(_loc_3.getIsUsingLanguageFilter());
			if(_loc_3.getIsUsingLanguageFilter())
			{
				param1.writeBoolean(_loc_3.getIsLanguageFilterSpecified());
				if(_loc_3.getIsLanguageFilterSpecified())
				{
					param1.writePrefixedString(_loc_3.getLanguageFilterName(), MessageConstants.FILTER_NAME_PREFIX_LENGTH);
					param1.writeBoolean(_loc_3.getIsDeliverMessageOnFailure());
					param1.writeInteger(_loc_3.getFailuresBeforeKick(), MessageConstants.FILTER_FAILURES_BEFORE_KICK_LENGTH);
					param1.writeInteger(_loc_3.getKicksBeforeBan(), MessageConstants.FILTER_KICKS_BEFORE_BAN_LENGTH);
					param1.writeInteger(_loc_3.getBanDuration(), MessageConstants.ROOM_BAN_DURATION_LENGTH);
					param1.writeBoolean(_loc_3.getIsResetAfterKick());
				}
			}
			param1.writeBoolean(_loc_3.getIsUsingFloodingFilter());
			if(_loc_3.getIsUsingFloodingFilter())
			{
				param1.writeBoolean(_loc_3.getIsFloodingFilterSpecified());
				if(_loc_3.getIsFloodingFilterSpecified())
				{
					param1.writePrefixedString(_loc_3.getFloodingFilterName(), MessageConstants.FILTER_NAME_PREFIX_LENGTH);
					param1.writeInteger(_loc_3.getFloodingFilterFailuresBeforeKick(), MessageConstants.FILTER_FAILURES_BEFORE_KICK_LENGTH);
					param1.writeInteger(_loc_3.getFloodingFilterKicksBeforeBan(), MessageConstants.FILTER_KICKS_BEFORE_BAN_LENGTH);
					param1.writeInteger(_loc_3.getFloodingFilterBanDuration(), MessageConstants.ROOM_BAN_DURATION_LENGTH);
					param1.writeBoolean(_loc_3.getIsFloodingFilterResetAfterKick());
				}
			}
		}

		private function encodePlugins(param1:MessageWriter, param2:Array) : void
		{
			var _loc_4:Plugin = null;
			var _loc_5:EsObject = null;
			param1.writeInteger(param2.length, MessageConstants.PLUGIN_COUNT_LENGTH);
			var _loc_3:Number = 0;
			while(_loc_3 < param2.length)
			{
				_loc_4 = param2[_loc_3];
				param1.writePrefixedString(_loc_4.getExtensionName(), MessageConstants.EXTENSION_NAME_PREFIX_LENGTH);
				param1.writePrefixedString(_loc_4.getPluginHandle(), MessageConstants.PLUGIN_HANDLE_PREFIX_LENGTH);
				param1.writePrefixedString(_loc_4.getPluginName(), MessageConstants.PLUGIN_NAME_PREFIX_LENGTH);
				_loc_5 = _loc_4.getData();
				EsObjectCodec.encode(param1, _loc_5);
				_loc_3 = _loc_3 + 1;
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class CreateRoomVariableRequestCodec extends MessageCodecImpl
	{
		public function CreateRoomVariableRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:CreateRoomVariableRequest = CreateRoomVariableRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
			param1.writePrefixedString(_loc_3.getName(), MessageConstants.ROOM_VARIABLE_NAME_PREFIX_LENGTH);
			EsObjectCodec.encode(param1, _loc_3.getValue());
			param1.writeBoolean(_loc_3.getLocked());
			param1.writeBoolean(_loc_3.getPersistent());
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class DeleteRoomVariableRequestCodec extends MessageCodecImpl
	{
		public function DeleteRoomVariableRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:DeleteRoomVariableRequest = DeleteRoomVariableRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
			param1.writePrefixedString(_loc_3.getName(), MessageConstants.ROOM_VARIABLE_NAME_PREFIX_LENGTH);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class DeleteUserVariableRequestCodec extends MessageCodecImpl
	{
		public function DeleteUserVariableRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:DeleteUserVariableRequest = DeleteUserVariableRequest(param2);
			param1.writePrefixedString(_loc_3.getName(), MessageConstants.VARIABLE_NAME_PREFIX_LENGTH);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.protocol.*;

	public class EsObjectCodec extends MessageCodecImpl
	{
		final public static function getDefaultMessageSize() : Number
		{
			return 1024;
		}

		final public static function encode(param1:MessageWriter, param2:EsObject) : void
		{
			var _loc_6:EsObjectDataHolder = null;
			var _loc_3:Number = param2.getSize();
			param1.writeInteger(param2.getSize());
			var _loc_4:Array = param2.getEntries();
			var _loc_5:Number = 0;
			while(_loc_5 < _loc_3)
			{
				_loc_6 = _loc_4[_loc_5];
				EsObjectCodec.encodeObjectEntry(param1, _loc_6);
				_loc_5 = _loc_5 + 1;
			}
		}

		final public static function encodeMap(param1:MessageWriter, param2:Array) : void
		{
			var _loc_4:EsObjectMap = null;
			param1.writeInteger(param2.length);
			var _loc_3:Number = 0;
			while(_loc_3 < param2.length)
			{
				_loc_4 = param2[_loc_3];
				param1.writeString(_loc_4.getName());
				EsObjectCodec.encode(param1, _loc_4.getValue());
				_loc_3 = _loc_3 + 1;
			}
		}

		final private static function encodeObjectEntry(param1:MessageWriter, param2:EsObjectDataHolder) : void
		{
			var _loc_4:Array = null;
			var _loc_5:Array = null;
			var _loc_6:int = NaN;
			var _loc_7:int = NaN;
			var _loc_3:DataType = param2.getDataType();
			param1.writeCharacter(_loc_3.getIndicator());
			param1.writeString(param2.getName());
			switch(_loc_3)
			{
			case DataType.Integer:
				param1.writeInteger(param2.getIntValue());
				break;
			case DataType.EsString:
				param1.writeString(param2.getStringValue());
				break;
			case DataType.Double:
				param1.writeDouble(param2.getDoubleValue());
				break;
			case DataType.Float:
				param1.writeFloat(param2.getFloatValue());
				break;
			case DataType.EsBoolean:
				param1.writeBoolean(param2.getBooleanValue());
				break;
			case DataType.Byte:
				param1.writeByte(param2.getByteValue());
				break;
			case DataType.Character:
				param1.writeCharacter(param2.getCharValue());
				break;
			case DataType.Long:
				param1.writeLong(param2.getLongValue());
				break;
			case DataType.Short:
				param1.writeShort(param2.getShortValue());
				break;
			case DataType.EsNumber:
				param1.writeDouble(param2.getNumberValue());
				break;
			case DataType.EsObject:
				EsObjectCodec.encode(param1, param2.getEsObjectValue());
				break;
			case DataType.EsObjectArray:
				_loc_4 = param2.getEsObjectArrayValue();
				param1.writeInteger(_loc_4.length);
				_loc_6 = 0;
				while(_loc_6 < _loc_4.length)
				{
					EsObjectCodec.encode(param1, _loc_4[_loc_6]);
					_loc_6 = _loc_6 + 1;
				}
				break;
			case DataType.IntegerArray:
				param1.writeIntegerArray(param2.getIntArrayValue());
				break;
			case DataType.StringArray:
				param1.writeStringArray(param2.getStringArrayValue());
				break;
			case DataType.DoubleArray:
				param1.writeDoubleArray(param2.getDoubleArrayValue());
				break;
			case DataType.FloatArray:
				param1.writeFloatArray(param2.getFloatArrayValue());
				break;
			case DataType.BooleanArray:
				param1.writeBooleanArray(param2.getBooleanArrayValue());
				break;
			case DataType.EsByteArray:
				param1.writeByteArray(param2.getByteArrayValue());
				break;
			case DataType.CharacterArray:
				param1.writeCharacterArray(param2.getCharArrayValue());
				break;
			case DataType.LongArray:
				param1.writeLongArray(param2.getLongArrayValue());
				break;
			case DataType.ShortArray:
				param1.writeShortArray(param2.getShortArrayValue());
				break;
			case DataType.NumberArray:
				_loc_5 = param2.getNumberArrayValue();
				param1.writeInteger(_loc_5.length);
				_loc_7 = 0;
				while(_loc_7 < _loc_5.length)
				{
					param1.writeDouble(_loc_5[_loc_7]);
					_loc_7 = _loc_7 + 1;
				}
				break;
			default:
				EsObjectCodec.trace("Unable to encode data type " + _loc_3);
				break;
			}
		}

		final public static function decode(param1:MessageReader) : EsObject
		{
			var _loc_5:String = null;
			var _loc_6:DataType = null;
			var _loc_7:String = null;
			var _loc_8:int = NaN;
			var _loc_9:Array = null;
			var _loc_10:Array = null;
			var _loc_11:Array = null;
			var _loc_12:int = NaN;
			var _loc_13:int = NaN;
			var _loc_2:Number = param1.nextInteger();
			var _loc_3:EsObject = new EsObject();
			var _loc_4:Number = 0;
			while(_loc_4 < _loc_2)
			{
				_loc_5 = param1.nextCharacter();
				_loc_6 = DataType.findTypeByIndicator(_loc_5);
				_loc_7 = param1.nextString();
				switch(_loc_6)
				{
				case DataType.Integer:
					_loc_3.setInteger(_loc_7, param1.nextInteger());
					break;
				case DataType.EsString:
					_loc_3.setString(_loc_7, param1.nextString());
					break;
				case DataType.Double:
					_loc_3.setDouble(_loc_7, param1.nextDouble());
					break;
				case DataType.Float:
					_loc_3.setFloat(_loc_7, param1.nextFloat());
					break;
				case DataType.EsBoolean:
					_loc_3.setBoolean(_loc_7, param1.nextBoolean());
					break;
				case DataType.Byte:
					_loc_3.setByte(_loc_7, param1.nextByte());
					break;
				case DataType.Character:
					_loc_3.setChar(_loc_7, param1.nextCharacter());
					break;
				case DataType.Long:
					_loc_3.setLong(_loc_7, param1.nextLong());
					break;
				case DataType.Short:
					_loc_3.setShort(_loc_7, param1.nextShort());
					break;
				case DataType.EsNumber:
					_loc_3.setNumber(_loc_7, new Number(param1.nextDouble()));
					break;
				case DataType.EsObject:
					_loc_3.setEsObject(_loc_7, EsObjectCodec.decode(param1));
					break;
				case DataType.EsObjectArray:
					_loc_8 = param1.nextInteger();
					_loc_9 = new Array();
					_loc_12 = 0;
					while(_loc_12 < _loc_8)
					{
						_loc_9[_loc_12] = EsObjectCodec.decode(param1);
						_loc_12 = _loc_12 + 1;
					}
					_loc_3.setEsObjectArray(_loc_7, _loc_9);
					break;
				case DataType.IntegerArray:
					_loc_3.setIntegerArray(_loc_7, param1.nextIntegerArray());
					break;
				case DataType.StringArray:
					_loc_3.setStringArray(_loc_7, param1.nextStringArray());
					break;
				case DataType.DoubleArray:
					_loc_3.setDoubleArray(_loc_7, param1.nextDoubleArray());
					break;
				case DataType.FloatArray:
					_loc_3.setFloatArray(_loc_7, param1.nextFloatArray());
					break;
				case DataType.BooleanArray:
					_loc_3.setBooleanArray(_loc_7, param1.nextBooleanArray());
					break;
				case DataType.EsByteArray:
					_loc_3.setByteArray(_loc_7, param1.nextByteArray());
					break;
				case DataType.CharacterArray:
					_loc_3.setCharArray(_loc_7, param1.nextCharacterArray());
					break;
				case DataType.LongArray:
					_loc_3.setLongArray(_loc_7, param1.nextLongArray());
					break;
				case DataType.ShortArray:
					_loc_3.setShortArray(_loc_7, param1.nextShortArray());
					break;
				case DataType.NumberArray:
					_loc_10 = param1.nextDoubleArray();
					_loc_11 = new Array();
					_loc_13 = 0;
					while(_loc_13 < _loc_10.length)
					{
						_loc_11[_loc_13] = EsObjectCodec.Number(_loc_10[_loc_13]);
						_loc_13 = _loc_13 + 1;
					}
					_loc_3.setNumberArray(_loc_7, _loc_11);
					break;
				default:
					EsObjectCodec.trace("Unable to decode data type " + _loc_6);
					break;
				}
				_loc_4 = _loc_4 + 1;
			}
			return _loc_3;
		}

		public function EsObjectCodec()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class EvictUserFromRoomRequestCodec extends MessageCodecImpl
	{
		public function EvictUserFromRoomRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:EvictUserFromRoomRequest = EvictUserFromRoomRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
			param1.writeLong(_loc_3.getUserId(), MessageConstants.USER_ID_LENGTH);
			param1.writePrefixedString(_loc_3.getReason(), MessageConstants.ROOM_EVICTION_REASON_PREFIX_LENGTH);
			param1.writeBoolean(_loc_3.isBan());
			if(_loc_3.isBan())
			{
				param1.writeInteger(_loc_3.getDuration(), MessageConstants.ROOM_BAN_DURATION_LENGTH);
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class FindGamesRequestCodec extends MessageCodecImpl
	{
		public function FindGamesRequestCodec()
		{
			super();
		}

		public function getDefaultMessageSize() : Number
		{
			return 1024;
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:FindGamesRequest = FindGamesRequest(param2);
			var _loc_4:SearchCriteria = _loc_3.getSearchCriteria();
			SearchCriteriaCodec.encode(param1, _loc_4);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;

	public class FindGamesResponseCodec extends MessageCodecImpl
	{
		public function FindGamesResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_7:int = NaN;
			var _loc_8:Boolean = false;
			var _loc_9:Boolean = false;
			var _loc_10:EsObject = null;
			var _loc_11:ServerGame = null;
			var _loc_2:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			var _loc_3:FindGamesResponse = new FindGamesResponse();
			var _loc_4:Number = param1.nextInteger();
			var _loc_5:Array = new Array();
			_loc_3.setGames(_loc_5);
			var _loc_6:Number = 0;
			while(_loc_6 < _loc_4)
			{
				_loc_7 = param1.nextInteger();
				_loc_8 = param1.nextBoolean();
				_loc_9 = param1.nextBoolean();
				_loc_10 = null;
				if(param1.nextBoolean())
				{
					_loc_10 = EsObjectCodec.decode(param1);
				}
				_loc_11 = new ServerGame();
				_loc_11.setGameId(_loc_7);
				_loc_11.setLocked(_loc_8);
				_loc_11.setPasswordProtected(_loc_9);
				_loc_11.setGameDetails(_loc_10);
				_loc_5.push(_loc_11);
				_loc_6 = _loc_6 + 1;
			}
			return _loc_3;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class FindZoneAndRoomByNameRequestCodec extends MessageCodecImpl
	{
		public function FindZoneAndRoomByNameRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:FindZoneAndRoomByNameRequest = FindZoneAndRoomByNameRequest(param2);
			param1.writePrefixedString(_loc_3.getZoneName(), MessageConstants.ZONE_NAME_PREFIX_LENGTH);
			param1.writePrefixedString(_loc_3.getRoomName(), MessageConstants.ROOM_NAME_PREFIX_LENGTH);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;

	public class FindZoneAndRoomByNameResponseCodec extends MessageCodecImpl
	{
		public function FindZoneAndRoomByNameResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_7:Array = null;
			var _loc_2:FindZoneAndRoomByNameResponse = new FindZoneAndRoomByNameResponse();
			var _loc_3:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			var _loc_4:Number = param1.nextInteger(MessageConstants.ZONE_AND_ROOM_ID_LIST_LENGTH);
			var _loc_5:Array = new Array();
			var _loc_6:Number = 0;
			while(_loc_6 < _loc_4)
			{
				_loc_7 = new Array();
				_loc_7[0] = param1.nextInteger(MessageConstants.ZONE_ID_LENGTH);
				_loc_7[1] = param1.nextInteger(MessageConstants.ROOM_ID_LENGTH);
				_loc_5.push(_loc_7);
				_loc_6 = _loc_6 + 1;
			}
			_loc_2.setRoomAndZoneList(_loc_5);
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GateWayKickUserRequestCodec extends MessageCodecImpl
	{
		public function GateWayKickUserRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:GateWayKickUserRequest = GateWayKickUserRequest(param2);
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:GateWayKickUserRequest = new GateWayKickUserRequest();
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GenericErrorResponseCodec extends MessageCodecImpl
	{
		public function GenericErrorResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_9:EsObject = null;
			var _loc_2:GenericErrorResponse = new GenericErrorResponse();
			var _loc_3:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			var _loc_4:String = param1.nextCharacter();
			var _loc_5:Number = param1.nextInteger(MessageConstants.ERROR_ID_LENGTH);
			var _loc_6:MessageType = MessageType.findTypeById(_loc_4);
			var _loc_7:EsError = Errors.getErrorById(_loc_5);
			_loc_2.setRequestMessageType(_loc_6);
			_loc_2.setErrorType(_loc_7);
			var _loc_8:Boolean = param1.nextBoolean();
			if(_loc_8)
			{
				_loc_9 = EsObjectCodec.decode(param1);
				_loc_2.setEsObject(_loc_9);
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GetRoomsInZoneRequestCodec extends MessageCodecImpl
	{
		public function GetRoomsInZoneRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:GetRoomsInZoneRequest = GetRoomsInZoneRequest(param2);
			if(_loc_3.getZoneId() != -1)
			{
				param1.writeBoolean(true);
				param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			}
			else
			{
				param1.writeBoolean(false);
				param1.writePrefixedString(_loc_3.getZoneName(), MessageConstants.ZONE_NAME_PREFIX_LENGTH);
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;
	import com.electrotank.electroserver4.room.*;

	public class GetRoomsInZoneResponseCodec extends MessageCodecImpl
	{
		public function GetRoomsInZoneResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_6:Room = null;
			var _loc_2:GetRoomsInZoneResponse = new GetRoomsInZoneResponse();
			var _loc_3:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			if(param1.nextBoolean())
			{
				_loc_2.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
			}
			else
			{
				_loc_2.setZoneName(param1.nextPrefixedString(MessageConstants.ZONE_NAME_PREFIX_LENGTH));
			}
			var _loc_4:Number = param1.nextInteger(MessageConstants.ROOM_COUNT_LENGTH);
			var _loc_5:Number = 0;
			while(_loc_5 < _loc_4)
			{
				_loc_6 = new Room();
				_loc_6.setRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
				_loc_6.setRoomName(param1.nextPrefixedString(MessageConstants.ROOM_NAME_PREFIX_LENGTH));
				_loc_6.setUserCount(param1.nextInteger(MessageConstants.USER_COUNT_LENGTH));
				_loc_6.setDescription(param1.nextPrefixedString(MessageConstants.ROOM_DESCRIPTION_PREFIX_LENGTH));
				_loc_6.setCapacity(param1.nextInteger(MessageConstants.ROOM_CAPACITY_LENGTH));
				_loc_6.setHasPassword(param1.nextBoolean());
				_loc_2.addRoom(_loc_6);
				_loc_5 = _loc_5 + 1;
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GetUserCountRequestCodec extends MessageCodecImpl
	{
		public function GetUserCountRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:GetUserCountRequest = GetUserCountRequest(param2);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GetUserCountResponseCodec extends MessageCodecImpl
	{
		public function GetUserCountResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:GetUserCountResponse = new GetUserCountResponse();
			var _loc_3:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			_loc_2.setCount(param1.nextInteger(MessageConstants.FULL_USER_COUNT_LENGTH));
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GetUsersInRoomRequestCodec extends MessageCodecImpl
	{
		public function GetUsersInRoomRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:GetUsersInRoomRequest = GetUsersInRoomRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GetUsersInRoomResponseCodec extends MessageCodecImpl
	{
		public function GetUsersInRoomResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:GetUsersInRoomResponse = new GetUsersInRoomResponse();
			var _loc_3:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			_loc_2.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
			_loc_2.setRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
			_loc_2.setUsers(UserListCodec.decode(param1));
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GetUserVariablesRequestCodec extends MessageCodecImpl
	{
		public function GetUserVariablesRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:GetUserVariablesRequest = GetUserVariablesRequest(param2);
			param1.writeString(_loc_3.getUserName());
			var _loc_4:Array = _loc_3.getUserVariableNames();
			trace(param1);
			param1.writeInteger(_loc_4.length);
			var _loc_5:Number = 0;
			while(_loc_5 < _loc_4.length)
			{
				param1.writeString(_loc_4[_loc_5]);
				_loc_5 = _loc_5 + 1;
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GetUserVariablesResponseCodec extends MessageCodecImpl
	{
		public function GetUserVariablesResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_6:String = null;
			var _loc_7:EsObject = null;
			var _loc_2:GetUserVariablesResponse = new GetUserVariablesResponse();
			var _loc_3:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			_loc_2.setUserName(param1.nextString());
			var _loc_4:Number = param1.nextInteger();
			var _loc_5:Number = 0;
			while(_loc_5 < _loc_4)
			{
				_loc_6 = param1.nextString();
				_loc_7 = EsObjectCodec.decode(param1);
				_loc_2.addVariable(_loc_6, _loc_7);
				_loc_5 = _loc_5 + 1;
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class GetZonesRequestCodec extends MessageCodecImpl
	{
		public function GetZonesRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:GetZonesRequest = GetZonesRequest(param2);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;
	import com.electrotank.electroserver4.zone.*;

	public class GetZonesResponseCodec extends MessageCodecImpl
	{
		public function GetZonesResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_6:Zone = null;
			var _loc_2:GetZonesResponse = new GetZonesResponse();
			var _loc_3:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			var _loc_4:Number = param1.nextInteger(MessageConstants.ZONE_COUNT_LENGTH);
			var _loc_5:Number = 0;
			while(_loc_5 < _loc_4)
			{
				_loc_6 = new Zone();
				_loc_6.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
				_loc_6.setZoneName(param1.nextPrefixedString(MessageConstants.ZONE_NAME_PREFIX_LENGTH));
				_loc_2.addZone(_loc_6);
				_loc_5 = _loc_5 + 1;
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class JoinRoomEventCodec extends MessageCodecImpl
	{
		public function JoinRoomEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:JoinRoomEvent = new JoinRoomEvent();
			_loc_2.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
			_loc_2.setRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
			_loc_2.setRoomName(param1.nextPrefixedString(MessageConstants.ROOM_NAME_PREFIX_LENGTH));
			_loc_2.setRoomDescription(param1.nextPrefixedString(MessageConstants.ROOM_DESCRIPTION_PREFIX_LENGTH));
			_loc_2.setCapacity(param1.nextInteger(MessageConstants.ROOM_CAPACITY_LENGTH));
			_loc_2.setIsHidden(param1.nextBoolean());
			_loc_2.setHasPassword(param1.nextBoolean());
			_loc_2.setUsers(UserListCodec.decode(param1));
			var _loc_3:Array = new Array();
			_loc_3 = RoomVariableCodec.decode(param1);
			_loc_2.setRoomVariables(_loc_3);
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class JoinRoomRequestCodec extends MessageCodecImpl
	{
		public function JoinRoomRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:JoinRoomRequest = JoinRoomRequest(param2);
			var _loc_4:Number = _loc_3.getZoneId();
			var _loc_5:Number = _loc_3.getRoomId();
			var _loc_6:String = _loc_3.getPassword();
			var _loc_7:Boolean = _loc_3.getIsReceivingRoomListUpdates();
			var _loc_8:Boolean = _loc_3.getIsReceivingRoomDetailUpdates();
			var _loc_9:Boolean = _loc_3.getIsReceivingUserListUpdates();
			var _loc_10:Boolean = _loc_3.getIsReceivingRoomVariableUpdates();
			var _loc_11:Boolean = _loc_3.getIsReceivingUserVariableUpdates();
			var _loc_12:Boolean = _loc_3.getIsReceivingVideoEvents();
			param1.writeInteger(_loc_4, MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_5, MessageConstants.ROOM_ID_LENGTH);
			if((_loc_6 == null) && _loc_6 == "")
			{
				param1.writeBoolean(true);
				param1.writePrefixedString(_loc_6, MessageConstants.ROOM_PASSWORD_PREFIX_LENGTH);
			}
			else
			{
				param1.writeBoolean(false);
			}
			param1.writeBoolean(_loc_7);
			param1.writeBoolean(_loc_8);
			param1.writeBoolean(_loc_9);
			param1.writeBoolean(_loc_10);
			param1.writeBoolean(_loc_11);
			param1.writeBoolean(_loc_12);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;
	import com.electrotank.electroserver4.room.*;

	public class JoinZoneEventCodec extends MessageCodecImpl
	{
		public function JoinZoneEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_6:Room = null;
			var _loc_2:JoinZoneEvent = new JoinZoneEvent();
			_loc_2.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
			_loc_2.setZoneName(param1.nextPrefixedString(MessageConstants.ZONE_NAME_PREFIX_LENGTH));
			var _loc_3:Number = param1.nextInteger(MessageConstants.ROOM_COUNT_LENGTH);
			var _loc_4:Array = new Array();
			var _loc_5:Number = 0;
			while(_loc_5 < _loc_3)
			{
				_loc_6 = new Room();
				_loc_6.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
				_loc_6.setRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
				_loc_6.setRoomName(param1.nextPrefixedString(MessageConstants.ROOM_NAME_PREFIX_LENGTH));
				_loc_6.setUserCount(param1.nextInteger(MessageConstants.USER_COUNT_LENGTH));
				_loc_6.setCapacity(param1.nextInteger(MessageConstants.ROOM_CAPACITY_LENGTH));
				_loc_6.setHasPassword(param1.nextBoolean());
				_loc_6.setDescription(param1.nextPrefixedString(MessageConstants.ROOM_DESCRIPTION_PREFIX_LENGTH));
				_loc_4.push(_loc_6);
				_loc_5 = _loc_5 + 1;
			}
			_loc_2.setRooms(_loc_4);
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class LeaveRoomEventCodec extends MessageCodecImpl
	{
		public function LeaveRoomEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:LeaveRoomEvent = new LeaveRoomEvent();
			var _loc_3:Number = param1.nextInteger(MessageConstants.ZONE_ID_LENGTH);
			_loc_2.setZoneId(_loc_3);
			var _loc_4:Number = param1.nextInteger(MessageConstants.ROOM_ID_LENGTH);
			_loc_2.setRoomId(_loc_4);
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class LeaveRoomRequestCodec extends MessageCodecImpl
	{
		public function LeaveRoomRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:LeaveRoomRequest = LeaveRoomRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class LeaveZoneEventCodec extends MessageCodecImpl
	{
		public function LeaveZoneEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:LeaveZoneEvent = new LeaveZoneEvent();
			var _loc_3:Number = param1.nextInteger(MessageConstants.ZONE_ID_LENGTH);
			_loc_2.setZoneId(_loc_3);
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class LoginRequestCodec extends MessageCodecImpl
	{
		public function LoginRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_9:Array = null;
			var _loc_10:int = NaN;
			var _loc_11:Protocol = null;
			var _loc_3:LoginRequest = LoginRequest(param2);
			var _loc_4:String = _loc_3.getUserName();
			var _loc_5:String = _loc_3.getPassword();
			if((_loc_4 == null) && _loc_4.length == 0)
			{
				param1.writeBoolean(true);
				param1.writePrefixedString(_loc_4, MessageConstants.USER_NAME_PREFIX_LENGTH);
				if((_loc_5 == null) && _loc_5.length == 0)
				{
					param1.writeBoolean(true);
					param1.writePrefixedString(_loc_5, MessageConstants.PASSWORD_PREFIX_LENGTH);
				}
				else
				{
					param1.writeBoolean(false);
				}
			}
			else
			{
				param1.writeBoolean(false);
			}
			var _loc_6:EsObject = _loc_3.getEsObject();
			if(_loc_6 == null)
			{
				param1.writeBoolean(false);
			}
			else
			{
				param1.writeBoolean(true);
				EsObjectCodec.encode(param1, _loc_6);
			}
			var _loc_7:Array = _loc_3.getUserVariables();
			if(_loc_7 == null || _loc_7.length == 0)
			{
				param1.writeBoolean(false);
			}
			else
			{
				param1.writeBoolean(true);
				EsObjectCodec.encodeMap(param1, _loc_7);
			}
			var _loc_8:Boolean = !(_loc_3.getSharedSecret() == null);
			if(_loc_8)
			{
				param1.writePrefixedString(_loc_3.getSharedSecret(), MessageConstants.SHARED_SECRET_LENGTH);
			}
			else
			{
				param1.writeBoolean(_loc_3.getIsAutoDiscoverProtocol());
				if(!_loc_3.getIsAutoDiscoverProtocol())
				{
					_loc_9 = _loc_3.getProtocols();
					param1.writeInteger(_loc_9.length, MessageConstants.PROTOCOL_COUNT_LENGTH);
					_loc_10 = 0;
					while(_loc_10 < _loc_9.length)
					{
						_loc_11 = _loc_9[_loc_10];
						param1.writeInteger(_loc_11.getProtocolId(), MessageConstants.PROTOCOL_LENGTH);
						_loc_10 = _loc_10 + 1;
					}
				}
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.errors.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;

	public class LoginResponseCodec extends MessageCodecImpl
	{
		public function LoginResponseCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_10:int = NaN;
			var _loc_11:String = null;
			var _loc_12:EsObject = null;
			var _loc_15:int = NaN;
			var _loc_16:EsObject = null;
			var _loc_17:UserVariable = null;
			var _loc_2:LoginResponse = new LoginResponse();
			var _loc_3:String = param1.nextInteger(MessageConstants.MESSAGE_ID_SIZE).toString();
			var _loc_4:Boolean = param1.nextBoolean();
			_loc_2.setAccepted(_loc_4);
			if(!_loc_2.getAccepted())
			{
				_loc_15 = param1.nextInteger(MessageConstants.ERROR_ID_LENGTH);
				_loc_2.setEsError(Errors.getErrorById(_loc_15));
			}
			var _loc_5:Boolean = param1.nextBoolean();
			if(_loc_5)
			{
				_loc_16 = EsObjectCodec.decode(param1);
				_loc_2.setEsObject(_loc_16);
			}
			var _loc_6:Boolean = param1.nextBoolean();
			if(_loc_6)
			{
				_loc_2.setUserName(param1.nextPrefixedString(MessageConstants.USER_NAME_PREFIX_LENGTH));
			}
			var _loc_7:Boolean = param1.nextBoolean();
			if(_loc_7)
			{
				_loc_2.setUserId(param1.nextLong(MessageConstants.USER_ID_LENGTH));
			}
			var _loc_8:Number = param1.nextInteger(MessageConstants.VARIABLE_COUNT_LENGTH);
			var _loc_9:Array = new Array();
			_loc_10 = 0;
			while(_loc_10 < _loc_8)
			{
				_loc_11 = param1.nextPrefixedString(MessageConstants.VARIABLE_NAME_PREFIX_LENGTH);
				_loc_12 = EsObjectCodec.decode(param1);
				_loc_17 = new UserVariable(_loc_11, _loc_12);
				_loc_9.push(_loc_17);
				_loc_10 = _loc_10 + 1;
			}
			_loc_2.setUserVariables(_loc_9);
			var _loc_13:Number = param1.nextInteger(MessageConstants.VARIABLE_COUNT_LENGTH);
			var _loc_14:Object = new Object();
			_loc_10 = 0;
			while(_loc_10 < _loc_13)
			{
				_loc_11 = param1.nextPrefixedString(MessageConstants.USER_NAME_PREFIX_LENGTH);
				_loc_12 = EsObjectCodec.decode(param1);
				_loc_14[_loc_11] = _loc_12;
				_loc_10 = _loc_10 + 1;
			}
			_loc_2.setBuddies(_loc_14);
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class LogoutRequestCodec extends MessageCodecImpl
	{
		public function LogoutRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:LogoutRequest = LogoutRequest(param2);
			param1.writeBoolean(_loc_3.getDropAllConnections());
			if(!_loc_3.getDropAllConnections())
			{
				param1.writeBoolean(_loc_3.getDropConnection());
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.protocol.*;

	public interface MessageCodec
	{
		function encode(param1:MessageWriter, param2:Message) : void;

		function decode(param1:MessageReader) : Message;
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.protocol.*;

	public class MessageCodecImpl extends Object implements MessageCodec
	{
		public function MessageCodecImpl()
		{
			super();
		}

		public function encode(param1:MessageWriter, param2:Message) : void
		{
			trace("Error: 'encode' method not over-written in a codec for " + param2.getMessageType().getMessageTypeName());
		}

		public function decode(param1:MessageReader) : Message
		{
			var _loc_2:Message = null;
			trace("Error: 'decode' method not over-written in a codec for this message");
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class PluginMessageEventCodec extends MessageCodecImpl
	{
		public function PluginMessageEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_3:EsObject = null;
			var _loc_2:PluginMessageEvent = new PluginMessageEvent();
			_loc_2.setPluginName(param1.nextPrefixedString(MessageConstants.PLUGIN_PARM_NAME_PREFIX_LENGTH));
			_loc_2.setSentToRoom(param1.nextBoolean());
			if(_loc_2.wasSentToRoom())
			{
				_loc_2.setDestinationZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
				_loc_2.setDestinationRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
			}
			_loc_2.setIsRoomLevelPlugin(param1.nextBoolean());
			if(_loc_2.getIsRoomLevelPlugin())
			{
				_loc_2.setOriginZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
				_loc_2.setOriginRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
			}
			if(param1.nextBoolean())
			{
				_loc_3 = EsObjectCodec.decode(param1);
				_loc_2.setEsObject(_loc_3);
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class PluginRequestCodec extends MessageCodecImpl
	{
		public function PluginRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:PluginRequest = PluginRequest(param2);
			param1.writePrefixedString(_loc_3.getPluginName(), MessageConstants.PLUGIN_NAME_PREFIX_LENGTH);
			param1.writeBoolean(_loc_3.wasSentToRoom());
			if(_loc_3.wasSentToRoom())
			{
				param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
				param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
			}
			var _loc_4:EsObject = _loc_3.getEsObject();
			if(_loc_4 == null)
			{
				param1.writeBoolean(false);
			}
			else
			{
				param1.writeBoolean(true);
				EsObjectCodec.encode(param1, _loc_4);
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class PrivateMessageEventCodec extends MessageCodecImpl
	{
		public function PrivateMessageEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_4:EsObject = null;
			var _loc_2:PrivateMessageEvent = new PrivateMessageEvent();
			_loc_2.setUserId(param1.nextLong(MessageConstants.USER_ID_LENGTH));
			_loc_2.setUserName(param1.nextPrefixedString(MessageConstants.USER_NAME_PREFIX_LENGTH));
			_loc_2.setMessage(param1.nextPrefixedString(MessageConstants.PRIVATE_MESSAGE_PREFIX_LENGTH));
			var _loc_3:Boolean = param1.nextBoolean();
			if(_loc_3)
			{
				_loc_4 = EsObjectCodec.decode(param1);
				_loc_2.setEsObject(_loc_4);
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class PrivateMessageRequestCodec extends MessageCodecImpl
	{
		public function PrivateMessageRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_5:int = NaN;
			var _loc_8:String = null;
			var _loc_3:PrivateMessageRequest = PrivateMessageRequest(param2);
			var _loc_4:Array = _loc_3.getUsers();
			param1.writeInteger(_loc_4.length, MessageConstants.USER_COUNT_LENGTH);
			_loc_5 = 0;
			while(_loc_5 < _loc_4.length)
			{
				param1.writeLong(_loc_4[_loc_5].getUserId(), MessageConstants.USER_ID_LENGTH);
				_loc_5 = _loc_5 + 1;
			}
			var _loc_6:Array = _loc_3.getUserNames();
			param1.writeInteger(_loc_6.length, MessageConstants.USER_COUNT_LENGTH);
			_loc_5 = 0;
			while(_loc_5 < _loc_6.length)
			{
				_loc_8 = _loc_6[_loc_5];
				param1.writePrefixedString(_loc_8, MessageConstants.USER_NAME_PREFIX_LENGTH);
				_loc_5 = _loc_5 + 1;
			}
			param1.writePrefixedString(_loc_3.getMessage(), MessageConstants.PRIVATE_MESSAGE_PREFIX_LENGTH);
			var _loc_7:EsObject = _loc_3.getEsObject();
			if(_loc_7 == null)
			{
				param1.writeBoolean(false);
			}
			else
			{
				param1.writeBoolean(true);
				EsObjectCodec.encode(param1, _loc_7);
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class PublicMessageEventCodec extends MessageCodecImpl
	{
		public function PublicMessageEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_4:EsObject = null;
			var _loc_2:PublicMessageEvent = new PublicMessageEvent();
			_loc_2.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
			_loc_2.setRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
			_loc_2.setUserId(param1.nextLong(MessageConstants.USER_ID_LENGTH));
			_loc_2.setUserNameIncluded(param1.nextBoolean());
			if(_loc_2.isUserNameIncluded())
			{
				_loc_2.setUserName(param1.nextPrefixedString(MessageConstants.USER_NAME_PREFIX_LENGTH));
			}
			_loc_2.setMessage(param1.nextPrefixedString(MessageConstants.PUBLIC_MESSAGE_PREFIX_LENGTH));
			var _loc_3:Boolean = param1.nextBoolean();
			if(_loc_3)
			{
				_loc_4 = EsObjectCodec.decode(param1);
				_loc_2.setEsObject(_loc_4);
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class PublicMessageRequestCodec extends MessageCodecImpl
	{
		public function PublicMessageRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:PublicMessageRequest = PublicMessageRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
			param1.writePrefixedString(_loc_3.getMessage(), MessageConstants.PUBLIC_MESSAGE_PREFIX_LENGTH);
			var _loc_4:EsObject = _loc_3.getEsObject();
			if(_loc_4 == null)
			{
				param1.writeBoolean(false);
			}
			else
			{
				param1.writeBoolean(true);
				EsObjectCodec.encode(param1, _loc_4);
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class RemoveBuddyRequestCodec extends MessageCodecImpl
	{
		public function RemoveBuddyRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:RemoveBuddyRequest = RemoveBuddyRequest(param2);
			param1.writePrefixedString(_loc_3.getBuddyName(), MessageConstants.USER_NAME_PREFIX_LENGTH);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class RemoveRoomOperatorRequestCodec extends MessageCodecImpl
	{
		public function RemoveRoomOperatorRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:RemoveRoomOperatorRequest = RemoveRoomOperatorRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
			param1.writeLong(_loc_3.getUserId(), MessageConstants.USER_ID_LENGTH);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.protocol.*;

	public class RoomVariableCodec extends Object
	{
		final public static function encode(param1:MessageWriter, param2:Array) : void
		{
			var _loc_4:RoomVariable = null;
			param1.writeInteger(param2.length, MessageConstants.ROOM_VARIABLE_COUNT_LENGTH);
			var _loc_3:Number = 0;
			while(_loc_3 < param2.length)
			{
				_loc_4 = param2[_loc_3];
				param1.writePrefixedString(_loc_4.getName(), MessageConstants.ROOM_VARIABLE_NAME_PREFIX_LENGTH);
				EsObjectCodec.encode(param1, _loc_4.getValue());
				param1.writeBoolean(_loc_4.getLocked());
				param1.writeBoolean(_loc_4.getPersistent());
				_loc_3 = _loc_3 + 1;
			}
		}

		final public static function decode(param1:MessageReader) : Array
		{
			var _loc_5:String = null;
			var _loc_6:EsObject = null;
			var _loc_7:Boolean = false;
			var _loc_8:Boolean = false;
			var _loc_9:RoomVariable = null;
			var _loc_2:Array = new Array();
			var _loc_3:Number = param1.nextInteger(MessageConstants.ROOM_VARIABLE_COUNT_LENGTH);
			var _loc_4:Number = 0;
			while(_loc_4 < _loc_3)
			{
				_loc_5 = param1.nextPrefixedString(MessageConstants.ROOM_VARIABLE_NAME_PREFIX_LENGTH);
				_loc_6 = EsObjectCodec.decode(param1);
				_loc_7 = param1.nextBoolean();
				_loc_8 = param1.nextBoolean();
				_loc_9 = new RoomVariable(_loc_5, _loc_6, _loc_7, _loc_8);
				_loc_2.push(_loc_9);
				_loc_4 = _loc_4 + 1;
			}
			return _loc_2;
		}

		public function RoomVariableCodec()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class RoomVariableUpdateEventCodec extends MessageCodecImpl
	{
		public function RoomVariableUpdateEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:RoomVariableUpdateEvent = new RoomVariableUpdateEvent();
			_loc_2.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
			_loc_2.setRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
			_loc_2.setUpdateAction(param1.nextShort(MessageConstants.UPDATE_ACTION_LENGTH));
			_loc_2.setName(param1.nextPrefixedString(MessageConstants.ROOM_VARIABLE_NAME_PREFIX_LENGTH));
			if(_loc_2.getUpdateAction() != RoomVariableUpdateEvent.VariableDeleted)
			{
				_loc_2.setValueChanged(param1.nextBoolean());
				if(_loc_2.getValueChanged())
				{
					_loc_2.setValue(EsObjectCodec.decode(param1));
				}
				_loc_2.setLockChanged(param1.nextBoolean());
				if(_loc_2.getLockChanged())
				{
					_loc_2.setLocked(param1.nextBoolean());
				}
				if(_loc_2.getUpdateAction() == RoomVariableUpdateEvent.VariableCreated)
				{
					_loc_2.setPersistent(param1.nextBoolean());
				}
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.protocol.*;

	public class SearchCriteriaCodec extends MessageCodecImpl
	{
		final public static function encode(param1:MessageWriter, param2:SearchCriteria) : void
		{
			var _loc_3:EsObject = null;
			if(param2 == null)
			{
				param1.writeBoolean(false);
			}
			else
			{
				param1.writeBoolean(true);
				if(param2.getGameId() == -1)
				{
					param1.writeBoolean(false);
				}
				else
				{
					param1.writeBoolean(true);
					param1.writeInteger(param2.getGameId());
				}
				param1.writeString(param2.getGameType());
				param1.writeBoolean(param2.getLockedSet());
				if(param2.getLockedSet())
				{
					param1.writeBoolean(param2.getLocked());
				}
				_loc_3 = param2.getGameDetails();
				if(_loc_3 == null)
				{
					param1.writeBoolean(false);
				}
				else
				{
					param1.writeBoolean(true);
					EsObjectCodec.encode(param1, _loc_3);
				}
			}
		}

		public function SearchCriteriaCodec()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class UpdateRoomDetailsEventCodec extends MessageCodecImpl
	{
		public function UpdateRoomDetailsEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:UpdateRoomDetailsEvent = new UpdateRoomDetailsEvent();
			_loc_2.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
			_loc_2.setRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
			_loc_2.setRoomNameUpdate(param1.nextBoolean());
			if(_loc_2.isRoomNameUpdate())
			{
				_loc_2.setRoomName(param1.nextPrefixedString(MessageConstants.ROOM_NAME_PREFIX_LENGTH));
			}
			_loc_2.setCapacityUpdate(param1.nextBoolean());
			if(_loc_2.isCapacityUpdate())
			{
				_loc_2.setCapacity(param1.nextInteger(MessageConstants.ROOM_CAPACITY_LENGTH));
			}
			_loc_2.setDescriptionUpdate(param1.nextBoolean());
			if(_loc_2.isDescriptionUpdate())
			{
				_loc_2.setDescription(param1.nextPrefixedString(MessageConstants.ROOM_DESCRIPTION_PREFIX_LENGTH));
			}
			_loc_2.setPasswordUpdate(param1.nextBoolean());
			_loc_2.setHiddenUpdate(param1.nextBoolean());
			if(_loc_2.isHiddenUpdate())
			{
				_loc_2.setHidden(param1.nextBoolean());
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class UpdateRoomDetailsRequestCodec extends MessageCodecImpl
	{
		public function UpdateRoomDetailsRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:UpdateRoomDetailsRequest = UpdateRoomDetailsRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
			param1.writeBoolean(_loc_3.isRoomNameUpdate());
			if(_loc_3.isRoomNameUpdate())
			{
				param1.writePrefixedString(_loc_3.getRoomName(), MessageConstants.ROOM_NAME_PREFIX_LENGTH);
			}
			param1.writeBoolean(_loc_3.isCapacityUpdate());
			if(_loc_3.isCapacityUpdate())
			{
				param1.writeInteger(_loc_3.getCapacity(), MessageConstants.ROOM_CAPACITY_LENGTH);
			}
			param1.writeBoolean(_loc_3.isDescriptionUpdate());
			if(_loc_3.isDescriptionUpdate())
			{
				param1.writePrefixedString(_loc_3.getDescription(), MessageConstants.ROOM_DESCRIPTION_PREFIX_LENGTH);
			}
			param1.writeBoolean(_loc_3.isPasswordUpdate());
			if(_loc_3.isPasswordUpdate())
			{
				param1.writePrefixedString(_loc_3.getPassword(), MessageConstants.ROOM_PASSWORD_PREFIX_LENGTH);
			}
			param1.writeBoolean(_loc_3.isHiddenUpdate());
			if(_loc_3.isHiddenUpdate())
			{
				param1.writeBoolean(_loc_3.getHidden());
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class UpdateRoomVariableRequestCodec extends MessageCodecImpl
	{
		public function UpdateRoomVariableRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:UpdateRoomVariableRequest = UpdateRoomVariableRequest(param2);
			param1.writeInteger(_loc_3.getZoneId(), MessageConstants.ZONE_ID_LENGTH);
			param1.writeInteger(_loc_3.getRoomId(), MessageConstants.ROOM_ID_LENGTH);
			param1.writePrefixedString(_loc_3.getName(), MessageConstants.ROOM_VARIABLE_NAME_PREFIX_LENGTH);
			param1.writeBoolean(_loc_3.hasValueChanged());
			if(_loc_3.hasValueChanged())
			{
				EsObjectCodec.encode(param1, _loc_3.getValue());
			}
			param1.writeBoolean(_loc_3.hasLockStatusChanged());
			if(_loc_3.hasLockStatusChanged())
			{
				param1.writeBoolean(_loc_3.getLocked());
			}
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class UpdateUserVariableRequestCodec extends MessageCodecImpl
	{
		public function UpdateUserVariableRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:UpdateUserVariableRequest = UpdateUserVariableRequest(param2);
			param1.writePrefixedString(_loc_3.getName(), MessageConstants.USER_VARIABLE_NAME_PREFIX_LENGTH);
			EsObjectCodec.encode(param1, _loc_3.getValue());
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class UserEvictedFromRoomEventCodec extends MessageCodecImpl
	{
		public function UserEvictedFromRoomEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:UserEvictedFromRoomEvent = new UserEvictedFromRoomEvent();
			_loc_2.setZoneId(param1.nextInteger(MessageConstants.ZONE_ID_LENGTH));
			_loc_2.setRoomId(param1.nextInteger(MessageConstants.ROOM_ID_LENGTH));
			_loc_2.setUserId(param1.nextLong(MessageConstants.USER_ID_LENGTH));
			_loc_2.setReason(param1.nextPrefixedString(MessageConstants.ROOM_EVICTION_REASON_PREFIX_LENGTH));
			_loc_2.setBan(param1.nextBoolean());
			if(_loc_2.isBan())
			{
				_loc_2.setDuration(param1.nextInteger(MessageConstants.ROOM_BAN_DURATION_LENGTH));
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.protocol.*;
	import com.electrotank.electroserver4.user.*;

	public class UserListCodec extends Object
	{
		final public static function decode(param1:MessageReader) : Array
		{
			var _loc_5:User = null;
			var _loc_6:String = null;
			var _loc_7:int = NaN;
			var _loc_8:int = NaN;
			var _loc_9:String = null;
			var _loc_10:EsObject = null;
			var _loc_2:Array = new Array();
			var _loc_3:Number = param1.nextInteger(MessageConstants.USER_COUNT_LENGTH);
			var _loc_4:Number = 0;
			while(_loc_4 < _loc_3)
			{
				_loc_5 = new User();
				_loc_6 = param1.nextLong(MessageConstants.USER_ID_LENGTH);
				_loc_5.setUserId(_loc_6);
				_loc_5.setUserName(param1.nextPrefixedString(MessageConstants.USER_NAME_PREFIX_LENGTH));
				_loc_7 = param1.nextInteger(MessageConstants.VARIABLE_COUNT_LENGTH);
				_loc_8 = 0;
				while(_loc_8 < _loc_7)
				{
					_loc_9 = param1.nextPrefixedString(MessageConstants.VARIABLE_NAME_PREFIX_LENGTH);
					_loc_10 = EsObjectCodec.decode(param1);
					_loc_5.addUserVariable(new UserVariable(_loc_9, _loc_10));
					_loc_8 = _loc_8 + 1;
				}
				_loc_5.setIsSendingVideo(param1.nextBoolean());
				if(_loc_5.getIsSendingVideo())
				{
					_loc_5.setVideoStreamName(param1.nextPrefixedString(MessageConstants.VIDEO_STREAM_NAME_PREFIX_LENGTH));
				}
				_loc_2.push(_loc_5);
				_loc_4 = _loc_4 + 1;
			}
			return _loc_2;
		}

		public function UserListCodec()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class UserListUpdateEventCodec extends MessageCodecImpl
	{
		public function UserListUpdateEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_7:String = null;
			var _loc_8:int = NaN;
			var _loc_9:Array = null;
			var _loc_10:int = NaN;
			var _loc_11:String = null;
			var _loc_12:EsObject = null;
			var _loc_2:UserListUpdateEvent = new UserListUpdateEvent();
			var _loc_3:Number = param1.nextInteger(MessageConstants.ZONE_ID_LENGTH);
			_loc_2.setZoneId(_loc_3);
			var _loc_4:Number = param1.nextInteger(MessageConstants.ROOM_ID_LENGTH);
			_loc_2.setRoomId(_loc_4);
			var _loc_5:Number = param1.nextShort(MessageConstants.UPDATE_ACTION_LENGTH);
			_loc_2.setActionId(_loc_5);
			var _loc_6:String = param1.nextLong(MessageConstants.USER_ID_LENGTH);
			_loc_2.setUserId(_loc_6);
			if(_loc_5 == UserListUpdateEvent.AddUser)
			{
				_loc_7 = param1.nextPrefixedString(MessageConstants.USER_NAME_PREFIX_LENGTH);
				_loc_2.setUserName(_loc_7);
				_loc_8 = param1.nextInteger(MessageConstants.VARIABLE_COUNT_LENGTH);
				_loc_9 = new Array();
				_loc_10 = 0;
				while(_loc_10 < _loc_8)
				{
					_loc_11 = param1.nextPrefixedString(MessageConstants.VARIABLE_NAME_PREFIX_LENGTH);
					_loc_12 = EsObjectCodec.decode(param1);
					_loc_9.push(new UserVariable(_loc_11, _loc_12));
					_loc_10 = _loc_10 + 1;
				}
				_loc_2.setUserVariables(_loc_9);
				_loc_2.setIsSendingVideo(param1.nextBoolean());
				if(_loc_2.getIsSendingVideo())
				{
					_loc_2.setVideoStreamName(param1.nextPrefixedString(MessageConstants.VIDEO_STREAM_NAME_PREFIX_LENGTH));
				}
			}
			else
			{
				if(_loc_5 == UserListUpdateEvent.SendingVideoStream)
				{
					_loc_2.setIsSendingVideo(true);
					_loc_2.setVideoStreamName(param1.nextPrefixedString(MessageConstants.VIDEO_STREAM_NAME_PREFIX_LENGTH));
				}
				else
				{
					if(_loc_5 == UserListUpdateEvent.StoppingVideoStream)
					{
						_loc_2.setIsSendingVideo(false);
						_loc_2.setVideoStreamName("");
					}
				}
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;

	public class UserVariableUpdateEventCodec extends MessageCodecImpl
	{
		public function UserVariableUpdateEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_5:EsObject = null;
			var _loc_2:UserVariableUpdateEvent = new UserVariableUpdateEvent();
			_loc_2.setUserId(param1.nextLong(MessageConstants.USER_ID_LENGTH));
			var _loc_3:Number = param1.nextShort(MessageConstants.UPDATE_ACTION_LENGTH);
			_loc_2.setActionId(_loc_3);
			var _loc_4:String = param1.nextPrefixedString(MessageConstants.USER_VARIABLE_NAME_PREFIX_LENGTH);
			_loc_2.setVariableName(_loc_4);
			if(_loc_2.getActionId() != UserVariableUpdateEvent.VariableDeleted)
			{
				_loc_5 = EsObjectCodec.decode(param1);
				_loc_2.setVariable(new UserVariable(_loc_4, _loc_5));
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.protocol.*;

	public class ValidateAdditionalLoginRequestCodec extends MessageCodecImpl
	{
		public function ValidateAdditionalLoginRequestCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:ValidateAdditionalLoginRequest = ValidateAdditionalLoginRequest(param2);
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_2:ValidateAdditionalLoginRequest = new ValidateAdditionalLoginRequest();
			_loc_2.setSecret(param1.nextPrefixedString(MessageConstants.SHARED_SECRET_LENGTH));
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.protocol.*;

	public class ValidateAdditionalLoginResponseCodec extends MessageCodecImpl
	{
		public function ValidateAdditionalLoginResponseCodec()
		{
			super();
		}

		override public function encode(param1:MessageWriter, param2:Message) : void
		{
			var _loc_3:ValidateAdditionalLoginResponse = ValidateAdditionalLoginResponse(param2);
			param1.writeBoolean(_loc_3.getApproved());
			param1.writePrefixedString(_loc_3.getSecret(), MessageConstants.SHARED_SECRET_LENGTH);
		}
	}
}
package com.electrotank.electroserver4.protocol.codec
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.protocol.*;
	import com.electrotank.electroserver4.room.*;

	public class ZoneUpdateEventCodec extends MessageCodecImpl
	{
		public function ZoneUpdateEventCodec()
		{
			super();
		}

		override public function decode(param1:MessageReader) : Message
		{
			var _loc_6:Room = null;
			var _loc_7:int = NaN;
			var _loc_2:ZoneUpdateEvent = new ZoneUpdateEvent();
			var _loc_3:Number = param1.nextInteger(MessageConstants.ZONE_ID_LENGTH);
			_loc_2.setZoneId(_loc_3);
			var _loc_4:Number = param1.nextShort(MessageConstants.UPDATE_ACTION_LENGTH);
			_loc_2.setActionId(_loc_4);
			var _loc_5:Number = param1.nextInteger(MessageConstants.ROOM_ID_LENGTH);
			_loc_2.setRoomId(_loc_5);
			if(_loc_4 == ZoneUpdateEvent.AddRoom)
			{
				_loc_6 = new Room();
				_loc_6.setZoneId(_loc_3);
				_loc_6.setRoomId(_loc_5);
				_loc_6.setRoomName(param1.nextPrefixedString(MessageConstants.ROOM_NAME_PREFIX_LENGTH));
				_loc_6.setUserCount(param1.nextInteger(MessageConstants.USER_COUNT_LENGTH));
				_loc_6.setCapacity(param1.nextInteger(MessageConstants.ROOM_CAPACITY_LENGTH));
				_loc_6.setHasPassword(param1.nextBoolean());
				_loc_6.setDescription(param1.nextPrefixedString(MessageConstants.ROOM_DESCRIPTION_PREFIX_LENGTH));
				_loc_2.setRoom(_loc_6);
			}
			if(_loc_4 != ZoneUpdateEvent.DeleteRoom)
			{
				_loc_7 = param1.nextInteger(MessageConstants.ROOM_COUNT_LENGTH);
				_loc_2.setRoomCount(_loc_7);
			}
			return _loc_2;
		}
	}
}
package com.electrotank.electroserver4.protocol.text
{
	import com.electrotank.electroserver4.protocol.*;
	import flash.utils.*;

	public class StringMessageReader extends Object implements MessageReader
	{
		private var data:String;
		private var currentPosition:Number;

		public function StringMessageReader()
		{
			super();
			setCurrentPosition(0);
		}

		public function setMessage(param1:String) : void
		{
			data = param1;
		}

		public function getMessage() : String
		{
			return data;
		}

		public function nextPrefixedString(param1:Number) : String
		{
			var _loc_2:int = nextInteger(param1);
			var _loc_3:String = _nextString(_loc_2);
			return _loc_3;
		}

		public function nextString(...restArguments) : String
		{
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			var _loc_4:String = null;
			if(restArguments.length == 0)
			{
				_loc_2 = _nextPrefix();
				return nextPrefixedString(_loc_2);
			}
			_loc_3 = restArguments[0];
			_loc_4 = _nextString(_loc_3);
			return _loc_4;
		}

		private function trim(param1:String) : String
		{
			var _loc_2:String = " ";
			while((param1.substr(0, 1)) == _loc_2)
			{
				param1 = param1.substr(1);
			}
			return param1;
		}

		public function nextInteger(...restArguments) : int
		{
			var _loc_2:String = null;
			var _loc_3:int = 0;
			if(restArguments.length == 1)
			{
				_loc_2 = _nextString(restArguments[0]);
				_loc_3 = parseInt(_loc_2);
				return _loc_3;
			}
			return nextInteger(_nextPrefix());
		}

		public function nextLong(...restArguments) : String
		{
			if(restArguments.length == 1)
			{
				return _nextString(restArguments[0]);
			}
			return nextLong(_nextPrefix());
		}

		public function nextDouble(...restArguments) : Number
		{
			if(restArguments.length == 1)
			{
				return parseFloat(trim(_nextString(restArguments[0])));
			}
			return nextDouble(_nextPrefix());
		}

		public function nextShort(...restArguments) : Number
		{
			var _loc_2:int = NaN;
			var _loc_3:String = null;
			var _loc_4:String = null;
			var _loc_5:int = NaN;
			var _loc_6:int = NaN;
			if(restArguments.length == 1)
			{
				_loc_2 = restArguments[0];
				_loc_3 = _nextString(_loc_2);
				_loc_4 = trim(_loc_3);
				return parseInt(_loc_4);
			}
			_loc_5 = _nextPrefix();
			_loc_6 = nextShort(_loc_5);
			return _loc_6;
		}

		public function nextCharacter() : String
		{
			var _loc_1:String = _nextString(1);
			return _loc_1.charAt(0);
		}

		public function nextBoolean() : Boolean
		{
			var _loc_1:Boolean = false;
			var _loc_2:int = nextInteger(1);
			if(_loc_2 == 1)
			{
				_loc_1 = true;
			}
			return _loc_1;
		}

		public function nextByte() : int
		{
			var _loc_1:int = int("0x" + nextString());
			return _loc_1;
		}

		public function nextFloat() : Number
		{
			return parseFloat(trim(_nextString(_nextPrefix())));
		}

		public function nextIntegerArray(...restArguments) : Array
		{
			var _loc_2:Array = null;
			var _loc_3:int = NaN;
			var _loc_4:int = NaN;
			var _loc_5:int = NaN;
			var _loc_6:int = NaN;
			if(restArguments.length == 2)
			{
				_loc_4 = restArguments[0];
				_loc_5 = restArguments[1];
				_loc_2 = new Array();
				_loc_3 = 0;
				while(_loc_3 < _loc_4)
				{
					_loc_2[_loc_3] = nextInteger(_loc_5);
					_loc_3 = _loc_3 + 1;
				}
				return _loc_2;
			}
			else
			{
				_loc_6 = _nextArrayPrefix();
				_loc_2 = new Array();
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_2[_loc_3] = nextInteger();
					_loc_3 = _loc_3 + 1;
				}
				return _loc_2;
			}
		}

		public function nextBooleanArray() : Array
		{
			var _loc_1:Number = _nextArrayPrefix();
			var _loc_2:Array = new Array();
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_1)
			{
				_loc_2[_loc_3] = nextBoolean();
				_loc_3 = _loc_3 + 1;
			}
			return _loc_2;
		}

		public function nextByteArray() : ByteArray
		{
			var _loc_1:int = nextInteger();
			var _loc_2:ByteArray = new ByteArray();
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_1)
			{
				_loc_2[_loc_3] = nextByte();
				_loc_3 = _loc_3 + 1;
			}
			return _loc_2;
		}

		public function nextCharacterArray() : Array
		{
			var _loc_1:Number = _nextArrayPrefix();
			var _loc_2:Array = new Array();
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_1)
			{
				_loc_2[_loc_3] = nextCharacter();
				_loc_3 = _loc_3 + 1;
			}
			return _loc_2;
		}

		public function nextDoubleArray() : Array
		{
			var _loc_1:Number = _nextArrayPrefix();
			var _loc_2:Array = new Array();
			trace("count: " + _loc_1);
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_1)
			{
				_loc_2[_loc_3] = nextDouble();
				_loc_3 = _loc_3 + 1;
			}
			trace(_loc_2);
			return _loc_2;
		}

		public function nextFloatArray() : Array
		{
			var _loc_1:Number = _nextArrayPrefix();
			var _loc_2:Array = new Array();
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_1)
			{
				_loc_2[_loc_3] = nextFloat();
				_loc_3 = _loc_3 + 1;
			}
			return _loc_2;
		}

		public function nextLongArray() : Array
		{
			var _loc_1:Number = _nextArrayPrefix();
			var _loc_2:Array = new Array();
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_1)
			{
				_loc_2[_loc_3] = nextLong();
				_loc_3 = _loc_3 + 1;
			}
			return _loc_2;
		}

		public function nextShortArray() : Array
		{
			var _loc_1:Number = _nextArrayPrefix();
			var _loc_2:Array = new Array();
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_1)
			{
				_loc_2[_loc_3] = nextShort();
				_loc_3 = _loc_3 + 1;
			}
			return _loc_2;
		}

		public function nextStringArray() : Array
		{
			var _loc_1:Number = _nextArrayPrefix();
			var _loc_2:Array = new Array();
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_1)
			{
				_loc_2[_loc_3] = nextString();
				_loc_3 = _loc_3 + 1;
			}
			return _loc_2;
		}

		public function getData() : String
		{
			return data;
		}

		public function setData(param1:String) : void
		{
			data = param1;
		}

		public function getCurrentPosition() : Number
		{
			return currentPosition;
		}

		public function setCurrentPosition(param1:Number) : void
		{
			currentPosition = param1;
		}

		private function _nextString(param1:Number) : String
		{
			if(data.length < (currentPosition + param1))
			{
				trace("Requested string is longer than available data");
			}
			var _loc_2:String = data.substring(currentPosition, currentPosition + param1);
			currentPosition = currentPosition + param1;
			return _loc_2;
		}

		private function _nextPrefix() : Number
		{
			var _loc_1:String = nextCharacter();
			return parseInt(_loc_1, 36);
		}

		private function _nextArrayPrefix() : int
		{
			return nextInteger(_nextPrefix());
		}
	}
}
package com.electrotank.electroserver4.protocol.text
{
	import com.electrotank.electroserver4.protocol.*;
	import flash.utils.*;

	public class StringMessageWriter extends Object implements MessageWriter
	{
		private var data:String;
		private var pads_arr:Array;

		public function StringMessageWriter()
		{
			super();
			pads_arr = ["", " ", "  ", "   ", "    ", "     ", "      ", "       ", "        ", "         ", "          ", "           ", "            ", "             ", "              ", "               ", "                ", "                 ", "                  ", "                   "];
			setMessage("");
		}

		public function setMessage(param1:String) : void
		{
			data = param1;
		}

		public function getMessage() : String
		{
			return data;
		}

		private function pad(param1:String, param2:Number) : String
		{
			var _loc_3:Number = param2 - param1.length;
			param1 = pads_arr[_loc_3] + param1;
			return param1;
		}

		public function append(param1:String) : void
		{
			data = data + param1;
		}

		public function writeCharacter(param1:String) : void
		{
			append(param1);
		}

		public function writePrefixedString(param1:String, param2:Number) : void
		{
			if(param1 == null)
			{
				param1 = "";
			}
			if(param2 > 0)
			{
				writeInteger(param1.length, param2);
			}
			append(param1);
		}

		private function trim(param1:String) : String
		{
			var _loc_2:String = " ";
			while((param1.substr(0, 1)) == _loc_2)
			{
				param1 = param1.substr(1);
			}
			return param1;
		}

		public function writeString(param1:String) : void
		{
			if(param1 == null)
			{
				return;
			}
			var _loc_2:String = trim(param1);
			writeInteger(_loc_2.length);
			append(_loc_2);
		}

		public function writeInteger(...restArguments) : void
		{
			var _loc_4:int = NaN;
			var _loc_2:int = restArguments[0];
			var _loc_3:String = _loc_2.toString();
			if(restArguments.length == 2)
			{
				_loc_4 = restArguments[1];
				if(_loc_3.length > _loc_4)
				{
					trace("Integer is longer then the specified length");
				}
				append(pad(_loc_3, _loc_4));
			}
			else
			{
				_writePrefix(_loc_3.length);
				append(_loc_3);
			}
		}

		public function writeLong(...restArguments) : void
		{
			var _loc_4:int = NaN;
			var _loc_2:String = restArguments[0];
			var _loc_3:String = _loc_2.toString();
			if(restArguments.length == 2)
			{
				_loc_4 = restArguments[1];
				if(_loc_3.length > _loc_4)
				{
					trace("Long is longer then the specified length");
				}
				append(pad(_loc_3, _loc_4));
			}
			else
			{
				_writePrefix(_loc_3.length);
				append(_loc_3);
			}
		}

		public function writeDouble(...restArguments) : void
		{
			var _loc_4:int = NaN;
			var _loc_2:Number = restArguments[0];
			var _loc_3:String = _loc_2.toString();
			if(restArguments.length == 2)
			{
				_loc_4 = restArguments[1];
				if(_loc_3.length > _loc_4)
				{
					trace("Double is longer then the specified length");
				}
				append(pad(_loc_3, _loc_4));
			}
			else
			{
				_writePrefix(_loc_3.length);
				append(_loc_3);
			}
		}

		public function writeBoolean(param1:Boolean) : void
		{
			if(param1)
			{
				append("1");
			}
			else
			{
				append("0");
			}
		}

		public function writeShort(...restArguments) : void
		{
			var _loc_4:int = NaN;
			var _loc_2:Number = restArguments[0];
			var _loc_3:String = _loc_2.toString();
			if(restArguments.length == 2)
			{
				_loc_4 = restArguments[1];
				if(_loc_3.length > _loc_4)
				{
					trace("Integer is longer then the specified length");
				}
				append(pad(_loc_3, _loc_4));
			}
			else
			{
				_writePrefix(_loc_3.length);
				append(_loc_3);
			}
		}

		public function writeByte(param1:int) : void
		{
			var _loc_2:String = param1.toString(16);
			if(_loc_2.length < 2)
			{
				_loc_2 = "0" + _loc_2;
			}
			writeString(_loc_2);
		}

		public function writeFloat(param1:Number) : void
		{
			var _loc_2:String = param1.toString();
			_writePrefix(_loc_2.length);
			append(_loc_2);
		}

		public function writeIntegerArray(param1:Array) : void
		{
			var _loc_2:Number = param1.length;
			_writeArrayPrefix(_loc_2);
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2)
			{
				writeInteger(param1[_loc_3]);
				_loc_3 = _loc_3 + 1;
			}
		}

		public function writeBooleanArray(param1:Array) : void
		{
			var _loc_2:Number = param1.length;
			_writeArrayPrefix(_loc_2);
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2)
			{
				writeBoolean(param1[_loc_3]);
				_loc_3 = _loc_3 + 1;
			}
		}

		public function writeByteArray(param1:ByteArray) : void
		{
			var _loc_2:int = param1.length;
			writeInteger(_loc_2);
			var _loc_3:int = 0;
			while(_loc_3 < _loc_2)
			{
				writeByte(param1[_loc_3]);
				_loc_3++;
			}
		}

		public function writeCharacterArray(param1:Array) : void
		{
			var _loc_2:Number = param1.length;
			_writeArrayPrefix(_loc_2);
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2)
			{
				writeCharacter(param1[_loc_3]);
				_loc_3 = _loc_3 + 1;
			}
		}

		public function writeDoubleArray(param1:Array) : void
		{
			var _loc_2:Number = param1.length;
			_writeArrayPrefix(_loc_2);
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2)
			{
				writeDouble(param1[_loc_3]);
				_loc_3 = _loc_3 + 1;
			}
		}

		public function writeFloatArray(param1:Array) : void
		{
			var _loc_2:Number = param1.length;
			_writeArrayPrefix(_loc_2);
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2)
			{
				writeFloat(param1[_loc_3]);
				_loc_3 = _loc_3 + 1;
			}
		}

		public function writeLongArray(param1:Array) : void
		{
			var _loc_2:Number = param1.length;
			_writeArrayPrefix(_loc_2);
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2)
			{
				writeLong(param1[_loc_3]);
				_loc_3 = _loc_3 + 1;
			}
		}

		public function writeShortArray(param1:Array) : void
		{
			var _loc_2:Number = param1.length;
			_writeArrayPrefix(_loc_2);
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2)
			{
				writeShort(param1[_loc_3]);
				_loc_3 = _loc_3 + 1;
			}
		}

		public function writeStringArray(param1:Array) : void
		{
			var _loc_2:Number = param1.length;
			_writeArrayPrefix(_loc_2);
			var _loc_3:Number = 0;
			while(_loc_3 < _loc_2)
			{
				writeString(param1[_loc_3]);
				_loc_3 = _loc_3 + 1;
			}
		}

		public function getData() : String
		{
			return data;
		}

		public function setData(param1:String) : void
		{
			data = param1;
		}

		private function _writePrefix(param1:Number) : void
		{
			append(param1.toString(36));
		}

		private function _writeArrayPrefix(param1:Number) : void
		{
			_writePrefix(param1.toString().length);
			append(param1.toString());
		}
	}
}
package com.electrotank.electroserver4.room
{
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.user.*;
	import com.electrotank.electroserver4.zone.*;

	public class Room extends Object
	{
		private var zoneId:Number;
		private var roomId:Number;
		private var roomName:String;
		private var userCount:Number;
		private var users:Array;
		private var usersById:Object;
		private var zone:Zone;
		private var hasPassword:Boolean;
		private var description:String;
		private var capacity:Number;
		private var isHidden:Boolean;
		private var password:String;
		private var roomVariables:Array;
		private var roomVariablesByName:Object;
		private var isJoined:Boolean;

		public function Room()
		{
			super();
			users = new Array();
			usersById = new Object();
			roomVariables = new Array();
			roomVariablesByName = new Object();
			setIsJoined(false);
		}

		public function getIsJoined() : Boolean
		{
			return this.isJoined;
		}

		public function setIsJoined(param1:Boolean) : void
		{
			this.isJoined = param1;
		}

		public function doesRoomVariableExist(param1:String) : Boolean
		{
			return !(roomVariablesByName[param1] == null);
		}

		public function addRoomVariable(param1:RoomVariable) : void
		{
			getRoomVariables().push(param1);
			roomVariablesByName[param1.getName()] = param1;
		}

		public function removeRoomVariable(param1:String) : void
		{
			var _loc_3:RoomVariable = null;
			var _loc_2:Number = 0;
			while(_loc_2 < getRoomVariables().length)
			{
				_loc_3 = getRoomVariables()[_loc_2];
				if(_loc_3.getName() == param1)
				{
					getRoomVariables().splice(_loc_2, 1);
					break;
				}
				_loc_2 = _loc_2 + 1;
			}
		}

		public function getRoomVariable(param1:String) : RoomVariable
		{
			return roomVariablesByName[param1];
		}

		public function setRoomVariables(param1:Array) : void
		{
			var _loc_3:RoomVariable = null;
			roomVariables = new Array();
			var _loc_2:Number = 0;
			while(_loc_2 < param1.length)
			{
				_loc_3 = param1[_loc_2];
				addRoomVariable(_loc_3);
				_loc_2 = _loc_2 + 1;
			}
		}

		public function getRoomVariables() : Array
		{
			return roomVariables;
		}

		public function setPassword(param1:String) : void
		{
			password = param1;
		}

		public function getPassword() : String
		{
			return password;
		}

		public function setIsHidden(param1:Boolean) : void
		{
			isHidden = param1;
		}

		public function getIsHidden() : Boolean
		{
			return isHidden;
		}

		public function setCapacity(param1:Number) : void
		{
			capacity = param1;
		}

		public function getCapacity() : Number
		{
			return capacity;
		}

		public function setDescription(param1:String) : void
		{
			description = param1;
		}

		public function getDescription() : String
		{
			return description;
		}

		public function setHasPassword(param1:Boolean) : void
		{
			hasPassword = param1;
		}

		public function getHasPassword() : Boolean
		{
			return hasPassword;
		}

		public function addUser(param1:User) : void
		{
			if(getUserById(param1.getUserId()) == null)
			{
				usersById[param1.getUserId()] = param1;
				getUsers().push(param1);
			}
			else
			{
				trace("Error: tried to add a user and that id is in use. userId: " + param1.getUserId() + " - userName: " + param1.getUserName());
			}
			setUserCount(getUsers().length);
		}

		public function removeUser(param1:String) : void
		{
			var _loc_2:User = getUserById(param1);
			var _loc_3:Number = 0;
			while(_loc_3 < getUsers().length)
			{
				if(_loc_2 == getUsers()[_loc_3])
				{
					getUsers().splice(_loc_3, 1);
					break;
				}
				_loc_3 = _loc_3 + 1;
			}
			setUserCount(getUsers().length);
		}

		public function setZone(param1:Zone) : void
		{
			zone = param1;
		}

		public function getZone() : Zone
		{
			return zone;
		}

		public function getUsers() : Array
		{
			return users;
		}

		public function getUserById(param1:String) : User
		{
			return usersById[param1];
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setRoomId(param1:Number) : void
		{
			roomId = param1;
		}

		public function getRoomId() : Number
		{
			return roomId;
		}

		public function setRoomName(param1:String) : void
		{
			roomName = param1;
		}

		public function getRoomName() : String
		{
			return roomName;
		}

		public function setUserCount(param1:Number) : void
		{
			userCount = param1;
		}

		public function getUserCount() : Number
		{
			return userCount;
		}
	}
}
package com.electrotank.electroserver4.rtmpconnection
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.utils.*;
	import flash.events.*;
	import flash.net.*;

	public class RtmpConnection extends Object
	{
		private var netConnection:NetConnection;
		private var es:ElectroServer;
		private var netStreams:Array;
		private var isConnected:Boolean;

		public function RtmpConnection(param1:ElectroServer)
		{
			super();
			this.es = param1;
			NetConnection.defaultObjectEncoding = ObjectEncoding.AMF0;
			netConnection = new NetConnection();
			netStreams = new Array();
			isConnected = false;
		}

		public function getNetConnection() : NetConnection
		{
			return this.netConnection;
		}

		public function disposeOfNetStream(param1:NetStream) : void
		{
			param1.close();
			var _loc_2:Number = 0;
			while(_loc_2 < netStreams.length)
			{
				if(netStreams[_loc_2] == param1)
				{
					netStreams.splice(_loc_2, 1);
					break;
				}
				_loc_2 = _loc_2 + 1;
			}
		}

		public function getIsConnected() : Boolean
		{
			return isConnected;
		}

		public function getNewNetStream() : NetStream
		{
			var _loc_1:NetStream = new NetStream(netConnection);
			netStreams.push(_loc_1);
			return _loc_1;
		}

		public function getNetStreams() : Array
		{
			return netStreams;
		}

		public function onStatus(param1:Object) : void
		{
			var _loc_2:RtmpConnectionEvent = null;
			var _loc_4:RtmpConnectionClosedEvent = null;
			Logger.log(param1.code, Logger.info);
			if(param1.level == "status")
			{
				switch(param1.code)
				{
				case "NetConnection.Connect.Success":
					isConnected = true;
					_loc_2 = new RtmpConnectionEvent();
					_loc_2.setAccepted(true);
					es.dispatchEvent(_loc_2);
					break;
				case "NetConnection.Connect.Closed":
					isConnected = false;
					_loc_4 = new RtmpConnectionClosedEvent();
					es.dispatchEvent(_loc_4);
					break;
				default:
					break;
				}
			}
			else
			{
				if(param1.level == "error")
				{
					switch(param1.code)
					{
					case "NetConnection.Connect.Failed":
						isConnected = false;
						_loc_2 = new RtmpConnectionEvent();
						_loc_2.setAccepted(false);
						es.dispatchEvent(_loc_2);
						break;
					case "NetConnection.Connect.Rejected":
						isConnected = false;
						_loc_2 = new RtmpConnectionEvent();
						_loc_2.setAccepted(false);
						es.dispatchEvent(_loc_2);
						break;
					case "NetConnection.Call.Failed":
						break;
					case "NetConnection.Connect.AppShutdown":
						break;
					case "NetConnection.Connect.InvalidApp":
						break;
					default:
						break;
					}
				}
			}
			var _loc_3:RtmpOnStatusEvent = new RtmpOnStatusEvent();
			_loc_3.setInfo(param1);
			es.dispatchEvent(_loc_3);
		}

		private function netStatusHandler(param1:NetStatusEvent) : void
		{
			onStatus(param1.info);
		}

		private function securityErrorHandler(param1:SecurityError) : void
		{
			trace("security error");
			trace(param1);
		}

		public function connect(param1:String) : void
		{
			netConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
			netConnection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
			netConnection.connect(param1);
		}

		public function close() : void
		{
			netConnection.close();
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.user.*;

	public class BuddyStatusUpdatedEventTransaction extends TransactionImpl
	{
		public function BuddyStatusUpdatedEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_6:String = null;
			var _loc_3:BuddyStatusUpdatedEvent = BuddyStatusUpdatedEvent(param1);
			var _loc_4:UserManager = param2.getUserManager();
			var _loc_5:User = new User();
			_loc_5.setUserId(_loc_3.getUserId());
			_loc_5.setUserName(_loc_3.getUserName());
			if(_loc_4.doesUserExist(_loc_5.getUserId()))
			{
				_loc_5 = _loc_4.getUserById(_loc_5.getUserId());
			}
			else
			{
				_loc_4.addUser(_loc_5);
			}
			if(_loc_3.getActionId() == BuddyStatusUpdatedEvent.LoggedIn)
			{
				_loc_4.addReference(_loc_5);
				_loc_6 = "loggedIn";
			}
			else
			{
				if(_loc_3.getActionId() == BuddyStatusUpdatedEvent.LoggedOut)
				{
					_loc_4.removeReference(_loc_5);
					_loc_6 = "loggedOut";
				}
			}
			_loc_3.setUser(_loc_5);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;

	public class ClientIdleEventTransaction extends TransactionImpl
	{
		public function ClientIdleEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:ClientIdleEvent = ClientIdleEvent(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;

	public class CompositePluginMessageEventTransaction extends TransactionImpl
	{
		public function CompositePluginMessageEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_7:PluginMessageEvent = null;
			var _loc_3:CompositePluginMessageEvent = CompositePluginMessageEvent(param1);
			var _loc_4:Array = new Array();
			var _loc_5:Array = _loc_3.getParameters();
			var _loc_6:Number = 0;
			while(_loc_6 < _loc_5.length)
			{
				_loc_7 = new PluginMessageEvent();
				_loc_7.setPluginName(_loc_3.getPluginName());
				_loc_7.setOriginRoomId(_loc_3.getOriginRoomId());
				_loc_7.setOriginZoneId(_loc_3.getOriginZoneId());
				_loc_7.setEsObject(_loc_5[_loc_6]);
				_loc_4.push(_loc_7);
				_loc_6 = _loc_6 + 1;
			}
			param2.processCompositeMessages(_loc_4);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;

	public class ConnectionEventTransaction extends TransactionImpl
	{
		public function ConnectionEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:ConnectionEvent = ConnectionEvent(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;

	public class CreateOrJoinGameResponseTransaction extends TransactionImpl
	{
		public function CreateOrJoinGameResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:CreateOrJoinGameResponse = CreateOrJoinGameResponse(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;

	public class FindGamesResponseTransaction extends TransactionImpl
	{
		public function FindGamesResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:FindGamesResponse = FindGamesResponse(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;

	public class FindZoneAndRoomByNameResponseTransaction extends TransactionImpl
	{
		public function FindZoneAndRoomByNameResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:FindZoneAndRoomByNameResponse = FindZoneAndRoomByNameResponse(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;

	public class GateWayKickUserRequestTransaction extends TransactionImpl
	{
		public function GateWayKickUserRequestTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:GateWayKickUserRequest = GateWayKickUserRequest(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;

	public class GenericErrorResponseTransaction extends TransactionImpl
	{
		public function GenericErrorResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:GenericErrorResponse = GenericErrorResponse(param1);
			param2.handleError(_loc_3);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.zone.*;

	public class GetRoomsInZoneResponseTransaction extends TransactionImpl
	{
		public function GetRoomsInZoneResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_6:Room = null;
			var _loc_3:GetRoomsInZoneResponse = GetRoomsInZoneResponse(param1);
			var _loc_4:Zone = new Zone();
			if(_loc_3.getZoneId() != -1)
			{
				_loc_4.setZoneId(_loc_3.getZoneId());
			}
			else
			{
				_loc_4.setZoneName(_loc_3.getZoneName());
			}
			var _loc_5:Number = 0;
			while(_loc_5 < _loc_3.getRooms().length)
			{
				_loc_6 = _loc_3.getRooms()[_loc_5];
				_loc_6.setZone(_loc_4);
				_loc_5 = _loc_5 + 1;
			}
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;

	public class GetUserCountResponseTransaction extends TransactionImpl
	{
		public function GetUserCountResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:GetUserCountResponse = GetUserCountResponse(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;

	public class GetUsersInRoomResponseTransaction extends TransactionImpl
	{
		public function GetUsersInRoomResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:GetUsersInRoomResponse = GetUsersInRoomResponse(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;

	public class GetUserVariablesResponseTransaction extends TransactionImpl
	{
		public function GetUserVariablesResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:GetUserVariablesResponse = GetUserVariablesResponse(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;

	public class GetZonesResponseTransaction extends TransactionImpl
	{
		public function GetZonesResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:GetZonesResponse = GetZonesResponse(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.user.*;
	import com.electrotank.electroserver4.zone.*;

	public class JoinRoomEventTransaction extends TransactionImpl
	{
		public function JoinRoomEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_5:Room = null;
			var _loc_8:User = null;
			var _loc_9:Array = null;
			var _loc_10:int = NaN;
			var _loc_11:UserVariable = null;
			var _loc_3:JoinRoomEvent = JoinRoomEvent(param1);
			var _loc_4:Zone = param2.getZoneManager().getZoneById(_loc_3.getZoneId());
			if(_loc_4.doesRoomExist(_loc_3.getRoomId()))
			{
				_loc_5 = _loc_4.getRoomById(_loc_3.getRoomId());
			}
			else
			{
				_loc_5 = new Room();
				_loc_5.setZoneId(_loc_3.getZoneId());
				_loc_5.setRoomId(_loc_3.getRoomId());
				_loc_5.setRoomName(_loc_3.getRoomName());
				_loc_5.setCapacity(_loc_3.getCapacity());
				_loc_5.setHasPassword(_loc_3.getHasPassword());
				_loc_5.setDescription(_loc_3.getRoomDescription());
				_loc_5.setUserCount(_loc_3.getUsers().length);
				_loc_4.addRoom(_loc_5);
			}
			_loc_5.setIsJoined(true);
			_loc_4.addJoinedRoom(_loc_5);
			_loc_5.setZone(param2.getZoneManager().getZoneById(_loc_3.getZoneId()));
			_loc_3.room = _loc_5;
			_loc_3.setZoneName(_loc_4.getZoneName());
			var _loc_6:UserManager = param2.getUserManager();
			var _loc_7:Number = 0;
			while(_loc_7 < _loc_3.getUsers().length)
			{
				_loc_8 = _loc_3.getUsers()[_loc_7];
				if(_loc_6.doesUserExist(_loc_8.getUserId()))
				{
					_loc_9 = _loc_8.getUserVariables();
					_loc_8 = _loc_6.getUserById(_loc_8.getUserId());
					_loc_10 = 0;
					while(_loc_10 < _loc_9.length)
					{
						_loc_11 = _loc_9[_loc_10];
						_loc_8.addUserVariable(_loc_11);
						_loc_10 = _loc_10 + 1;
					}
				}
				else
				{
					_loc_6.addUser(_loc_8);
				}
				_loc_6.addReference(_loc_8);
				_loc_5.addUser(_loc_8);
				_loc_7 = _loc_7 + 1;
			}
			_loc_5.setRoomVariables(_loc_3.getRoomVariables());
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.zone.*;

	public class JoinZoneEventTransaction extends TransactionImpl
	{
		public function JoinZoneEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_6:Room = null;
			var _loc_3:JoinZoneEvent = JoinZoneEvent(param1);
			var _loc_4:Zone = new Zone();
			_loc_4.setZoneId(_loc_3.getZoneId());
			_loc_4.setZoneName(_loc_3.getZoneName());
			var _loc_5:Number = 0;
			while(_loc_5 < _loc_3.getRooms().length)
			{
				_loc_6 = _loc_3.getRooms()[_loc_5];
				_loc_4.addRoom(_loc_6);
				_loc_5 = _loc_5 + 1;
			}
			param2.getZoneManager().addZone(_loc_4);
			_loc_3.zone = _loc_4;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.user.*;
	import com.electrotank.electroserver4.zone.*;

	public class LeaveRoomEventTransaction extends TransactionImpl
	{
		public function LeaveRoomEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:LeaveRoomEvent = LeaveRoomEvent(param1);
			var _loc_4:Zone = param2.getZoneManager().getZoneById(_loc_3.getZoneId());
			var _loc_5:Room = _loc_4.getRoomById(_loc_3.getRoomId());
			_loc_5.setIsJoined(false);
			_loc_4.removeJoinedRoom(_loc_5);
			var _loc_6:UserManager = param2.getUserManager();
			var _loc_7:Number = 0;
			while(_loc_7 < _loc_5.getUsers().length)
			{
				_loc_6.removeReference(_loc_5.getUsers()[_loc_7]);
				_loc_7 = _loc_7 + 1;
			}
			_loc_3.room = _loc_5;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.zone.*;

	public class LeaveZoneEventTransaction extends TransactionImpl
	{
		public function LeaveZoneEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:LeaveZoneEvent = LeaveZoneEvent(param1);
			var _loc_4:Zone = param2.getZoneManager().getZoneById(_loc_3.getZoneId());
			param2.getZoneManager().removeZone(_loc_4.getZoneId());
			_loc_3.zone = _loc_4;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.response.*;

	public class LoginResponseTransaction extends TransactionImpl
	{
		public function LoginResponseTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:LoginResponse = LoginResponse(param1);
			param2.handleLoginResponse(_loc_3);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;

	public class PluginMessageEventTransaction extends TransactionImpl
	{
		public function PluginMessageEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:PluginMessageEvent = PluginMessageEvent(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.user.*;

	public class PrivateMessageEventTransaction extends TransactionImpl
	{
		public function PrivateMessageEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:PrivateMessageEvent = PrivateMessageEvent(param1);
			var _loc_4:UserManager = param2.getUserManager();
			var _loc_5:User = new User();
			_loc_5.setUserId(_loc_3.getUserId());
			_loc_5.setUserName(_loc_3.getUserName());
			if(_loc_4.doesUserExist(_loc_5.getUserId()))
			{
				_loc_5 = _loc_4.getUserById(_loc_5.getUserId());
			}
			_loc_3.user = _loc_5;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.user.*;

	public class PublicMessageEventTransaction extends TransactionImpl
	{
		public function PublicMessageEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_6:User = null;
			var _loc_3:PublicMessageEvent = PublicMessageEvent(param1);
			var _loc_4:Room = param2.getZoneManager().getZoneById(_loc_3.getZoneId()).getRoomById(_loc_3.getRoomId());
			var _loc_5:UserManager = param2.getUserManager();
			if(_loc_5.doesUserExist(_loc_3.getUserId()))
			{
				_loc_6 = _loc_5.getUserById(_loc_3.getUserId());
				_loc_3.setUserName(_loc_6.getUserName());
			}
			else
			{
				_loc_6 = new User();
				_loc_6.setUserId(_loc_3.getUserId());
				if(_loc_3.isUserNameIncluded())
				{
					_loc_6.setUserName(_loc_3.getUserName());
				}
			}
			_loc_3.user = _loc_6;
			_loc_3.room = _loc_4;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.room.*;

	public class RoomVariableUpdateEventTransaction extends TransactionImpl
	{
		public function RoomVariableUpdateEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_5:RoomVariable = null;
			var _loc_6:String = null;
			var _loc_3:RoomVariableUpdateEvent = RoomVariableUpdateEvent(param1);
			var _loc_4:Room = param2.getZoneManager().getZoneById(_loc_3.getZoneId()).getRoomById(_loc_3.getRoomId());
			var _loc_7:Number = _loc_3.getUpdateAction();
			if(_loc_7 == RoomVariableUpdateEvent.VariableCreated)
			{
				_loc_6 = "created";
			}
			else
			{
				if(_loc_7 == RoomVariableUpdateEvent.VariableUpdated)
				{
					_loc_6 = "updated";
				}
				else
				{
					if(_loc_7 == RoomVariableUpdateEvent.VariableDeleted)
					{
						_loc_6 = "deleted";
					}
				}
			}
			if(_loc_7 == RoomVariableUpdateEvent.VariableCreated)
			{
				_loc_5 = new RoomVariable(_loc_3.getName(), _loc_3.getValue(), _loc_3.getPersistent(), _loc_3.getLocked());
				_loc_4.addRoomVariable(_loc_5);
			}
			_loc_5 = _loc_4.getRoomVariable(_loc_3.getName());
			if(_loc_3.getValueChanged())
			{
				_loc_5.setValue(_loc_3.getValue());
			}
			if(_loc_3.getLockChanged())
			{
				_loc_5.setLocked(_loc_3.getLocked());
			}
			if(_loc_7 == RoomVariableUpdateEvent.VariableDeleted)
			{
				_loc_4.removeRoomVariable(_loc_3.getName());
			}
			_loc_3.room = _loc_4;
			_loc_3.minorType = _loc_6;
			_loc_3.variable = _loc_5;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;

	public interface Transaction
	{
		function execute(param1:Message, param2:ElectroServer) : void;
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.message.*;

	public class TransactionHandler extends Object
	{
		private var mapper:Object;

		public function TransactionHandler()
		{
			super();
			mapper = new Object();
			register(MessageType.ConnectionEvent, Transaction(new ConnectionEventTransaction()));
			register(MessageType.LoginResponse, Transaction(new LoginResponseTransaction()));
			register(MessageType.JoinRoomEvent, Transaction(new JoinRoomEventTransaction()));
			register(MessageType.JoinZoneEvent, Transaction(new JoinZoneEventTransaction()));
			register(MessageType.ClientIdleEvent, Transaction(new ClientIdleEventTransaction()));
			register(MessageType.PublicMessageEvent, Transaction(new PublicMessageEventTransaction()));
			register(MessageType.PrivateMessageEvent, Transaction(new PrivateMessageEventTransaction()));
			register(MessageType.ZoneUpdateEvent, Transaction(new ZoneUpdateEventTransaction()));
			register(MessageType.GetZonesResponse, Transaction(new GetZonesResponseTransaction()));
			register(MessageType.GetUsersInRoomResponse, Transaction(new GetUsersInRoomResponseTransaction()));
			register(MessageType.GenericErrorResponse, Transaction(new GenericErrorResponseTransaction()));
			register(MessageType.GetUserCountResponse, Transaction(new GetUserCountResponseTransaction()));
			register(MessageType.GetRoomsInZoneResponse, Transaction(new GetRoomsInZoneResponseTransaction()));
			register(MessageType.LeaveRoomEvent, Transaction(new LeaveRoomEventTransaction()));
			register(MessageType.LeaveZoneEvent, Transaction(new LeaveZoneEventTransaction()));
			register(MessageType.UserListUpdateEvent, Transaction(new UserListUpdateEventTransaction()));
			register(MessageType.RoomVariableUpdateEvent, Transaction(new RoomVariableUpdateEventTransaction()));
			register(MessageType.UserVariableUpdateEvent, Transaction(new UserVariableUpdateEventTransaction()));
			register(MessageType.BuddyStatusUpdatedEvent, Transaction(new BuddyStatusUpdatedEventTransaction()));
			register(MessageType.UserEvictedFromRoomEvent, Transaction(new UserEvictedFromRoomEventTransaction()));
			register(MessageType.UpdateRoomDetailsEvent, Transaction(new UpdateRoomDetailsEventTransaction()));
			register(MessageType.FindZoneAndRoomByNameResponse, Transaction(new FindZoneAndRoomByNameResponseTransaction()));
			register(MessageType.PluginMessageEvent, Transaction(new PluginMessageEventTransaction()));
			register(MessageType.CompositePluginMessageEvent, Transaction(new CompositePluginMessageEventTransaction()));
			register(MessageType.ValidateAdditionalLoginRequest, Transaction(new ValidateAdditionalLoginRequestTransaction()));
			register(MessageType.CreateOrJoinGameResponse, Transaction(new CreateOrJoinGameResponseTransaction()));
			register(MessageType.FindGamesResponse, Transaction(new FindGamesResponseTransaction()));
			register(MessageType.GetUserVariablesResponse, Transaction(new GetUserVariablesResponseTransaction()));
			register(MessageType.GateWayKickUserRequest, Transaction(new GateWayKickUserRequestTransaction()));
		}

		public function getTransaction(param1:MessageType) : Transaction
		{
			var _loc_2:Transaction = mapper[param1.getMessageTypeName()];
			if(_loc_2 == null)
			{
				trace("Error: Tried to find a Transaction for " + param1.getMessageTypeName() + " and none was was registered.");
			}
			return _loc_2;
		}

		private function register(param1:MessageType, param2:Transaction) : void
		{
			mapper[param1.getMessageTypeName()] = param2;
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;

	public class TransactionImpl extends Object implements Transaction
	{
		public function TransactionImpl()
		{
			super();
		}

		public function execute(param1:Message, param2:ElectroServer) : void
		{
			trace("Error: 'execute' method not overwritten in transaction for " + param1.getMessageType().getMessageTypeName());
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.room.*;

	public class UpdateRoomDetailsEventTransaction extends TransactionImpl
	{
		public function UpdateRoomDetailsEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:UpdateRoomDetailsEvent = UpdateRoomDetailsEvent(param1);
			var _loc_4:Room = param2.getZoneManager().getZoneById(_loc_3.getZoneId()).getRoomById(_loc_3.getRoomId());
			if(_loc_3.isHiddenUpdate())
			{
				_loc_4.setIsHidden(_loc_3.getHidden());
			}
			if(_loc_3.isDescriptionUpdate())
			{
				_loc_4.setDescription(_loc_3.getDescription());
			}
			if(_loc_3.isCapacityUpdate())
			{
				_loc_4.setCapacity(_loc_3.getCapacity());
			}
			if(_loc_3.isRoomNameUpdate())
			{
				_loc_4.setRoomName(_loc_3.getRoomName());
			}
			if(_loc_3.isPasswordUpdate())
			{
			}
			_loc_3.room = _loc_4;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.user.*;

	public class UserEvictedFromRoomEventTransaction extends TransactionImpl
	{
		public function UserEvictedFromRoomEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:UserEvictedFromRoomEvent = UserEvictedFromRoomEvent(param1);
			var _loc_4:UserManager = param2.getUserManager();
			var _loc_5:User = _loc_4.getUserById(_loc_3.getUserId());
			_loc_3.user = _loc_5;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.user.*;

	public class UserListUpdateEventTransaction extends TransactionImpl
	{
		public function UserListUpdateEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_6:String = null;
			var _loc_7:User = null;
			var _loc_9:Array = null;
			var _loc_10:int = NaN;
			var _loc_11:UserVariable = null;
			var _loc_3:UserListUpdateEvent = UserListUpdateEvent(param1);
			var _loc_4:Number = _loc_3.getActionId();
			var _loc_5:Room = param2.getZoneManager().getZoneById(_loc_3.getZoneId()).getRoomById(_loc_3.getRoomId());
			var _loc_8:UserManager = param2.getUserManager();
			if(_loc_4 == UserListUpdateEvent.AddUser)
			{
				_loc_7 = new User();
				_loc_7.setUserId(_loc_3.getUserId());
				_loc_7.setUserName(_loc_3.getUserName());
				_loc_7.setUserVariables(_loc_3.getUserVariables());
				if(_loc_8.doesUserExist(_loc_7.getUserId()))
				{
					_loc_9 = _loc_7.getUserVariables();
					_loc_7 = _loc_8.getUserById(_loc_7.getUserId());
					_loc_10 = 0;
					while(_loc_10 < _loc_9.length)
					{
						_loc_11 = _loc_9[_loc_10];
						_loc_7.addUserVariable(_loc_11);
						_loc_10 = _loc_10 + 1;
					}
				}
				else
				{
					_loc_8.addUser(_loc_7);
				}
				_loc_8.addReference(_loc_7);
				_loc_5.addUser(_loc_7);
				_loc_6 = "userjoined";
			}
			else
			{
				if(_loc_4 == UserListUpdateEvent.DeleteUser)
				{
					_loc_7 = _loc_8.getUserById(_loc_3.getUserId());
					_loc_5.removeUser(_loc_3.getUserId());
					_loc_8.removeReference(_loc_7);
					_loc_6 = "userleft";
				}
				else
				{
					if(_loc_4 == UserListUpdateEvent.UpdateUser)
					{
						_loc_7 = _loc_8.getUserById(_loc_3.getUserId());
						trace("TODO: UpdateUser not handled in UserListUpdateEventTransaction");
					}
					else
					{
						if(_loc_4 == UserListUpdateEvent.OperatorGranted)
						{
							_loc_7 = _loc_8.getUserById(_loc_3.getUserId());
							trace("TODO: OperatorGranted not handled in UserListUpdateEventTransaction");
						}
						else
						{
							if(_loc_4 == UserListUpdateEvent.OperatorRevoked)
							{
								_loc_7 = _loc_8.getUserById(_loc_3.getUserId());
								trace("TODO: OperatorRevoked not handled in UserListUpdateEventTransaction");
							}
							else
							{
								if(_loc_4 == UserListUpdateEvent.SendingVideoStream)
								{
									_loc_7 = _loc_8.getUserById(_loc_3.getUserId());
									_loc_7.setIsSendingVideo(true);
									_loc_7.setVideoStreamName(_loc_3.getVideoStreamName());
								}
								else
								{
									if(_loc_4 == UserListUpdateEvent.StoppingVideoStream)
									{
										_loc_7 = _loc_8.getUserById(_loc_3.getUserId());
										_loc_7.setIsSendingVideo(false);
									}
								}
							}
						}
					}
				}
			}
			_loc_3.setUserName(_loc_7.getUserName());
			_loc_3.setUser(_loc_7);
			_loc_3.user = _loc_7;
			_loc_3.minorType = _loc_6;
			_loc_3.room = _loc_5;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.user.*;

	public class UserVariableUpdateEventTransaction extends TransactionImpl
	{
		public function UserVariableUpdateEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_7:UserVariable = null;
			var _loc_8:String = null;
			var _loc_3:UserVariableUpdateEvent = UserVariableUpdateEvent(param1);
			var _loc_4:UserManager = param2.getUserManager();
			var _loc_5:User = _loc_4.getUserById(_loc_3.getUserId());
			var _loc_6:Number = _loc_3.getActionId();
			if(_loc_6 == UserVariableUpdateEvent.VariableCreated)
			{
				_loc_8 = "created";
				_loc_7 = new UserVariable(_loc_3.getVariableName(), _loc_3.getVariable().getValue());
				_loc_5.addUserVariable(_loc_7);
			}
			else
			{
				if(_loc_6 == UserVariableUpdateEvent.VariableUpdated)
				{
					_loc_8 = "updated";
					_loc_7 = _loc_5.getUserVariable(_loc_3.getVariableName());
					_loc_7.setValue(_loc_3.getVariable().getValue());
				}
				else
				{
					if(_loc_6 == UserVariableUpdateEvent.VariableDeleted)
					{
						_loc_8 = "deleted";
						_loc_7 = _loc_5.getUserVariable(_loc_3.getVariableName());
						_loc_5.removeUserVariable(_loc_3.getVariableName());
					}
				}
			}
			_loc_3.user = _loc_5;
			_loc_3.minorType = _loc_8;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.request.*;

	public class ValidateAdditionalLoginRequestTransaction extends TransactionImpl
	{
		public function ValidateAdditionalLoginRequestTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_3:ValidateAdditionalLoginRequest = ValidateAdditionalLoginRequest(param1);
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.transaction
{
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.zone.*;

	public class ZoneUpdateEventTransaction extends TransactionImpl
	{
		public function ZoneUpdateEventTransaction()
		{
			super();
		}

		override public function execute(param1:Message, param2:ElectroServer) : void
		{
			var _loc_5:String = null;
			var _loc_6:Room = null;
			var _loc_3:ZoneUpdateEvent = ZoneUpdateEvent(param1);
			var _loc_4:Number = _loc_3.getActionId();
			if(_loc_4 == ZoneUpdateEvent.AddRoom)
			{
				_loc_6 = _loc_3.getRoom();
				_loc_6.setZone(param2.getZoneManager().getZoneById(_loc_3.getZoneId()));
				param2.getZoneManager().getZoneById(_loc_3.getZoneId()).addRoom(_loc_6);
				_loc_5 = "roomcreated";
			}
			else
			{
				if(_loc_4 == ZoneUpdateEvent.DeleteRoom)
				{
					_loc_6 = param2.getZoneManager().getZoneById(_loc_3.getZoneId()).getRoomById(_loc_3.getRoomId());
					param2.getZoneManager().getZoneById(_loc_3.getZoneId()).removeRoom(_loc_3.getRoomId());
					_loc_5 = "roomdeleted";
				}
				else
				{
					if(_loc_4 == ZoneUpdateEvent.UpdateRoom)
					{
						_loc_6 = param2.getZoneManager().getZoneById(_loc_3.getZoneId()).getRoomById(_loc_3.getRoomId());
						param2.getZoneManager().getZoneById(_loc_3.getZoneId()).getRoomById(_loc_3.getRoomId()).setUserCount(_loc_3.getRoomCount());
						_loc_5 = "roomupdated";
					}
				}
			}
			var _loc_7:Zone = param2.getZoneManager().getZoneById(_loc_3.getZoneId());
			_loc_3.room = _loc_6;
			_loc_3.zone = _loc_7;
			_loc_3.minorType = _loc_5;
			param2.dispatchEvent(_loc_3);
		}
	}
}
package com.electrotank.electroserver4.user
{
	import com.electrotank.electroserver4.entities.*;

	public class User extends Object
	{
		private var userName:String;
		private var userId:String;
		private var userVariables:Array;
		private var userVariablesByName:Object;
		private var references:Number;
		private var isMe:Boolean;
		private var isSendingVideo:Boolean;
		private var videoStreamName:String;

		public function User()
		{
			super();
			setIsMe(false);
			setIsSendingVideo(false);
			setUserVariables(new Array());
			userVariablesByName = new Object();
			setReferences(0);
		}

		public function setVideoStreamName(param1:String) : void
		{
			this.videoStreamName = param1;
		}

		public function getVideoStreamName() : String
		{
			return this.videoStreamName;
		}

		public function setIsSendingVideo(param1:Boolean) : void
		{
			this.isSendingVideo = param1;
		}

		public function getIsSendingVideo() : Boolean
		{
			return this.isSendingVideo;
		}

		public function getIsMe() : Boolean
		{
			return isMe;
		}

		public function setIsMe(param1:Boolean) : void
		{
			this.isMe = param1;
		}

		public function getRealUserId() : String
		{
			var _loc_1:String = null;
			return _loc_1;
		}

		public function setReferences(param1:Number) : void
		{
			references = param1;
		}

		public function getReferences() : Number
		{
			return references;
		}

		public function getUserVariables() : Array
		{
			return userVariables;
		}

		public function setUserVariables(param1:Array) : void
		{
			userVariables = new Array();
			var _loc_2:Number = 0;
			while(_loc_2 < param1.length)
			{
				addUserVariable(param1[_loc_2]);
				_loc_2 = _loc_2 + 1;
			}
		}

		public function doesUserVariableExist(param1:String) : Boolean
		{
			return !(userVariablesByName[param1] == null);
		}

		public function addUserVariable(param1:UserVariable) : void
		{
			if(doesUserVariableExist(param1.getName()))
			{
				removeUserVariable(param1.getName());
			}
			getUserVariables().push(param1);
			userVariablesByName[param1.getName()] = param1;
		}

		public function removeUserVariable(param1:String) : void
		{
			var _loc_2:UserVariable = userVariablesByName[param1];
			var _loc_3:Number = 0;
			while(_loc_3 < getUserVariables().length)
			{
				if(getUserVariables()[_loc_3] == _loc_2)
				{
					getUserVariables().splice(_loc_3, 1);
					break;
				}
				_loc_3 = _loc_3 + 1;
			}
		}

		public function getUserVariable(param1:String) : UserVariable
		{
			return userVariablesByName[param1];
		}

		public function setUserName(param1:String) : void
		{
			userName = param1;
		}

		public function getUserName() : String
		{
			return userName;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}
	}
}
package com.electrotank.electroserver4.user
{
	public class UserManager extends Object
	{
		private var users:Array;
		private var usersById:Object;
		private var me:User;
		private var usersByName:Object;

		public function UserManager()
		{
			super();
			users = new Array();
			usersById = new Object();
			usersByName = new Object();
		}

		public function setMe(param1:User) : void
		{
			me = param1;
		}

		public function getMe() : User
		{
			return me;
		}

		public function addUser(param1:User) : void
		{
			getUsers().push(param1);
			usersById[param1.getUserId()] = param1;
			usersByName[param1.getUserName()] = param1;
		}

		public function addReference(param1:User) : void
		{
			param1.setReferences(param1.getReferences() + 1);
		}

		public function removeReference(param1:User) : void
		{
			if(getUserByName(param1.getUserName()) != null)
			{
				param1.setReferences(param1.getReferences() - 1);
				if(param1.getReferences() == 0)
				{
					removeUser(param1);
				}
			}
			else
			{
				trace("Error: tried to remove reference to a user that wasn't being managed by the UserManager. Name: " + param1.getUserName());
			}
		}

		private function removeUser(param1:User) : void
		{
			var _loc_2:int = NaN;
			if(getUserByName(param1.getUserName()) != null)
			{
				_loc_2 = 0;
				while(_loc_2 < getUsers().length)
				{
					if(getUsers()[_loc_2] == param1)
					{
						getUsers().splice(_loc_2, 1);
						break;
					}
					_loc_2 = _loc_2 + 1;
				}
				usersById[param1.getUserId()] = null;
				usersByName[param1.getUserName()] = null;
			}
			else
			{
				trace("Error: tried to remove a user that isn't being managed by the UserManager. Name: " + param1.getUserName());
			}
		}

		public function doesUserExist(param1:String) : Boolean
		{
			return !(getUserById(param1) == null);
		}

		public function getUserById(param1:String) : User
		{
			return usersById[param1];
		}

		public function getUserByName(param1:String) : User
		{
			return usersByName[param1];
		}

		public function getUsers() : Array
		{
			return users;
		}
	}
}
package com.electrotank.electroserver4.utils
{
	public class Dispatcher extends Object
	{
		private var listeners:Array;
		private var events:Object;

		public function Dispatcher()
		{
			super();
			listeners = new Array();
			events = new Object();
		}

		public function dispatchEvent(param1:Object) : void
		{
			var _loc_4:int = NaN;
			var _loc_5:Object = null;
			var _loc_6:String = null;
			param1.target = this;
			var _loc_2:String = param1.type;
			var _loc_3:Array = events[_loc_2];
			if(_loc_3 != null)
			{
				_loc_4 = 0;
				while(_loc_4 < _loc_3.length)
				{
					_loc_5 = _loc_3[_loc_4].scope;
					_loc_6 = _loc_3[_loc_4].funcName;
					var _loc_7:Object = _loc_5;
					_loc_7[_loc_6](param1);
					_loc_4 = _loc_4 + 1;
				}
			}
		}

		public function addEventListener(param1:String, param2:String, param3:Object) : void
		{
			if(events[param1] == null)
			{
				events[param1] = new Array();
			}
			var _loc_4:Boolean = false;
			var _loc_5:Number = 0;
			while(_loc_5 < events[param1].length)
			{
				if(events[param1][_loc_5].scope == param3 && events[param1][_loc_5].funcName == param2)
				{
					_loc_4 = true;
					break;
				}
				_loc_5 = _loc_5 + 1;
			}
			if(!_loc_4)
			{
				events[param1].push({scope:param3, funcName:param2});
			}
		}

		public function removeEventListener(param1:String, param2:String, param3:Object) : void
		{
			var _loc_4:Number = 0;
			while(_loc_4 < events[param1].length)
			{
				if(events[param1][_loc_4].scope == param3 && events[param1][_loc_4].funcName == param2)
				{
					events[param1].splice(_loc_4, 1);
					break;
				}
				_loc_4 = _loc_4 + 1;
			}
			if(events[param1].length == 0)
			{
			}
		}

		private function getListeners() : Array
		{
			return listeners;
		}
	}
}
package com.electrotank.electroserver4.utils
{
	public class Logger extends Dispatcher
	{
		public static var LOGGED:String = "logged";
		private static var _instance:Logger;
		public static var info:Number = 4;
		public static var debug:Number = 2;
		public static var severe:Number = 1;
		private static var levelNames:Array = [null, "[SEVERE]", "[DEBUG]", null, "[INFO]"];
		public static var LogLevel:Number = info;

		final public static function log(param1:String, param2:Number) : void
		{
			if(param2 > LogLevel)
			{
				return;
			}
			var _loc_3:String = "   ";
			param1 = (levelNames[param2] + " ") + param1;
			var _loc_4:Object = {message:param1, level:param2};
			var _loc_5:Object = {target:_instance, log:_loc_4, type:LOGGED};
			_instance.dispatchEvent(_loc_5);
		}

		final public static function init() : void
		{
			_instance = new Logger();
		}

		final public static function getInstance() : Logger
		{
			return _instance;
		}

		public function Logger()
		{
			super();
		}
	}
}
package com.electrotank.electroserver4.utils
{
	import com.electrotank.electroserver4.message.*;

	public class Observable extends Object
	{
		private var listeners:Array;
		private var events:Object;

		public function Observable()
		{
			super();
			listeners = new Array();
			events = new Object();
		}

		public function notifyListeners(param1:String, param2:Object) : void
		{
			var _loc_5:Object = null;
			var _loc_3:Array = listeners.slice(0);
			var _loc_4:Number = 0;
			while(_loc_4 < _loc_3.length)
			{
				_loc_5 = _loc_3[_loc_4];
				var _loc_6:Object = _loc_5;
				_loc_6[param1](param2);
				_loc_4 = _loc_4 + 1;
			}
		}

		public function removeListener(param1:Object) : void
		{
			var _loc_3:Object = null;
			var _loc_2:Number = 0;
			while(_loc_2 < listeners.length)
			{
				_loc_3 = listeners[_loc_2];
				if(_loc_3 == param1)
				{
					listeners.splice(_loc_2, 1);
					break;
				}
				_loc_2 = _loc_2 + 1;
			}
		}

		public function dispatchEvent(param1:MessageImpl) : void
		{
			var _loc_4:int = NaN;
			var _loc_5:Object = null;
			var _loc_6:String = null;
			param1.target = this;
			var _loc_2:String = param1.type;
			var _loc_3:Array = events[_loc_2];
			if(_loc_3 != null)
			{
				_loc_4 = 0;
				while(_loc_4 < _loc_3.length)
				{
					_loc_5 = _loc_3[_loc_4].scope;
					_loc_6 = _loc_3[_loc_4].funcName;
					var _loc_7:Object = _loc_5;
					_loc_7[_loc_6](param1);
					_loc_4 = _loc_4 + 1;
				}
			}
		}

		public function addEventListener(param1:MessageType, param2:String, param3:Object, param4:Boolean = false) : void
		{
			var _loc_5:String = param1.getMessageTypeName();
			if(events[_loc_5] == null)
			{
				events[_loc_5] = new Array();
			}
			var _loc_6:Boolean = false;
			var _loc_7:Number = 0;
			while(_loc_7 < events[_loc_5].length)
			{
				if(events[_loc_5][_loc_7].scope == param3 && events[_loc_5][_loc_7].funcName == param2)
				{
					_loc_6 = true;
					break;
				}
				_loc_7 = _loc_7 + 1;
			}
			if(!_loc_6)
			{
				if(param4)
				{
					events[_loc_5].unshift({scope:param3, funcName:param2});
				}
				else
				{
					events[_loc_5].push({scope:param3, funcName:param2});
				}
			}
		}

		public function removeEventListener(param1:MessageType, param2:String, param3:Object) : void
		{
			var _loc_5:int = NaN;
			var _loc_4:String = param1.getMessageTypeName();
			if(events[_loc_4] != null)
			{
				_loc_5 = 0;
				while(_loc_5 < events[_loc_4].length)
				{
					if(events[_loc_4][_loc_5].scope == param3 && events[_loc_4][_loc_5].funcName == param2)
					{
						events[_loc_4].splice(_loc_5, 1);
						break;
					}
					_loc_5 = _loc_5 + 1;
				}
				if(events[_loc_4].length == 0)
				{
					events[_loc_4] = null;
				}
			}
		}

		public function addListener(param1:Object) : void
		{
			getListeners().push(param1);
		}

		private function getListeners() : Array
		{
			return listeners;
		}
	}
}
package com.electrotank.electroserver4.user
{
	import com.electrotank.electroserver4.entities.*;

	public class User extends Object
	{
		private var userName:String;
		private var userId:String;
		private var userVariables:Array;
		private var userVariablesByName:Object;
		private var references:Number;
		private var isMe:Boolean;
		private var isSendingVideo:Boolean;
		private var videoStreamName:String;

		public function User()
		{
			super();
			setIsMe(false);
			setIsSendingVideo(false);
			setUserVariables(new Array());
			userVariablesByName = new Object();
			setReferences(0);
		}

		public function setVideoStreamName(param1:String) : void
		{
			this.videoStreamName = param1;
		}

		public function getVideoStreamName() : String
		{
			return this.videoStreamName;
		}

		public function setIsSendingVideo(param1:Boolean) : void
		{
			this.isSendingVideo = param1;
		}

		public function getIsSendingVideo() : Boolean
		{
			return this.isSendingVideo;
		}

		public function getIsMe() : Boolean
		{
			return isMe;
		}

		public function setIsMe(param1:Boolean) : void
		{
			this.isMe = param1;
		}

		public function getRealUserId() : String
		{
			var _loc_1:String = null;
			return _loc_1;
		}

		public function setReferences(param1:Number) : void
		{
			references = param1;
		}

		public function getReferences() : Number
		{
			return references;
		}

		public function getUserVariables() : Array
		{
			return userVariables;
		}

		public function setUserVariables(param1:Array) : void
		{
			userVariables = new Array();
			var _loc_2:Number = 0;
			while(_loc_2 < param1.length)
			{
				addUserVariable(param1[_loc_2]);
				_loc_2 = _loc_2 + 1;
			}
		}

		public function doesUserVariableExist(param1:String) : Boolean
		{
			return !(userVariablesByName[param1] == null);
		}

		public function addUserVariable(param1:UserVariable) : void
		{
			if(doesUserVariableExist(param1.getName()))
			{
				removeUserVariable(param1.getName());
			}
			getUserVariables().push(param1);
			userVariablesByName[param1.getName()] = param1;
		}

		public function removeUserVariable(param1:String) : void
		{
			var _loc_2:UserVariable = userVariablesByName[param1];
			var _loc_3:Number = 0;
			while(_loc_3 < getUserVariables().length)
			{
				if(getUserVariables()[_loc_3] == _loc_2)
				{
					getUserVariables().splice(_loc_3, 1);
					break;
				}
				_loc_3 = _loc_3 + 1;
			}
		}

		public function getUserVariable(param1:String) : UserVariable
		{
			return userVariablesByName[param1];
		}

		public function setUserName(param1:String) : void
		{
			userName = param1;
		}

		public function getUserName() : String
		{
			return userName;
		}

		public function setUserId(param1:String) : void
		{
			userId = param1;
		}

		public function getUserId() : String
		{
			return userId;
		}
	}
}
package com.electrotank.electroserver4.user
{
	public class UserManager extends Object
	{
		private var users:Array;
		private var usersById:Object;
		private var me:User;
		private var usersByName:Object;

		public function UserManager()
		{
			super();
			users = new Array();
			usersById = new Object();
			usersByName = new Object();
		}

		public function setMe(param1:User) : void
		{
			me = param1;
		}

		public function getMe() : User
		{
			return me;
		}

		public function addUser(param1:User) : void
		{
			getUsers().push(param1);
			usersById[param1.getUserId()] = param1;
			usersByName[param1.getUserName()] = param1;
		}

		public function addReference(param1:User) : void
		{
			param1.setReferences(param1.getReferences() + 1);
		}

		public function removeReference(param1:User) : void
		{
			if(getUserByName(param1.getUserName()) != null)
			{
				param1.setReferences(param1.getReferences() - 1);
				if(param1.getReferences() == 0)
				{
					removeUser(param1);
				}
			}
			else
			{
				trace("Error: tried to remove reference to a user that wasn't being managed by the UserManager. Name: " + param1.getUserName());
			}
		}

		private function removeUser(param1:User) : void
		{
			var _loc_2:int = NaN;
			if(getUserByName(param1.getUserName()) != null)
			{
				_loc_2 = 0;
				while(_loc_2 < getUsers().length)
				{
					if(getUsers()[_loc_2] == param1)
					{
						getUsers().splice(_loc_2, 1);
						break;
					}
					_loc_2 = _loc_2 + 1;
				}
				usersById[param1.getUserId()] = null;
				usersByName[param1.getUserName()] = null;
			}
			else
			{
				trace("Error: tried to remove a user that isn't being managed by the UserManager. Name: " + param1.getUserName());
			}
		}

		public function doesUserExist(param1:String) : Boolean
		{
			return !(getUserById(param1) == null);
		}

		public function getUserById(param1:String) : User
		{
			return usersById[param1];
		}

		public function getUserByName(param1:String) : User
		{
			return usersByName[param1];
		}

		public function getUsers() : Array
		{
			return users;
		}
	}
}
package com.electrotank.electroserver4.zone
{
	import com.electrotank.electroserver4.room.*;

	public class Zone extends Object
	{
		private var zoneId:Number;
		private var zoneName:String;
		private var rooms:Array;
		private var roomsById:Object;
		private var roomsByName:Object;
		private var joinedRooms:Array;

		public function Zone()
		{
			super();
			rooms = new Array();
			roomsById = new Object();
			roomsByName = new Object();
			joinedRooms = new Array();
		}

		public function getJoinedRooms() : Array
		{
			return joinedRooms;
		}

		public function addJoinedRoom(param1:Room) : void
		{
			joinedRooms.push(param1);
		}

		public function removeJoinedRoom(param1:Room) : void
		{
			var _loc_2:Number = 0;
			while(_loc_2 < joinedRooms.length)
			{
				if(joinedRooms[_loc_2] == param1)
				{
					joinedRooms.splice(_loc_2, 1);
					break;
				}
				_loc_2 = _loc_2 + 1;
			}
		}

		public function addRoom(param1:Room) : void
		{
			if(roomsById[param1.getRoomId()] == null)
			{
				getRooms().push(param1);
				roomsById[param1.getRoomId()] = param1;
				roomsByName[param1.getRoomName()] = param1;
			}
			else
			{
				trace("Error: tried to add a room with an id that already exists. roomId: " + param1.getRoomId() + " roomName: " + param1.getRoomName());
			}
		}

		public function doesRoomExist(param1:Number) : Boolean
		{
			return !(getRoomById(param1) == null);
		}

		public function getRoomByName(param1:String) : Room
		{
			return roomsByName[param1];
		}

		public function getRoomById(param1:Number) : Room
		{
			return roomsById[param1];
		}

		public function removeRoom(param1:Number) : void
		{
			var _loc_3:int = NaN;
			var _loc_2:Room = getRoomById(param1);
			if(_loc_2 == null)
			{
				trace("Error: tried to remove a room and the roomId was not found. roomId: " + param1);
			}
			else
			{
				roomsById[param1] = null;
				roomsByName[_loc_2.getRoomName()] = null;
				_loc_3 = 0;
				while(_loc_3 < getRooms().length)
				{
					if(getRooms()[_loc_3] == _loc_2)
					{
						getRooms().splice(_loc_3, 1);
						break;
					}
					_loc_3 = _loc_3 + 1;
				}
			}
		}

		public function getRooms() : Array
		{
			return rooms;
		}

		public function setZoneId(param1:Number) : void
		{
			zoneId = param1;
		}

		public function getZoneId() : Number
		{
			return zoneId;
		}

		public function setZoneName(param1:String) : void
		{
			zoneName = param1;
		}

		public function getZoneName() : String
		{
			return zoneName;
		}
	}
}
package com.electrotank.electroserver4.zone
{
	public class ZoneManager extends Object
	{
		private var zones:Array;
		private var zonesById:Object;
		private var zonesByName:Object;

		public function ZoneManager()
		{
			super();
			zones = new Array();
			zonesById = new Object();
			zonesByName = new Object();
		}

		public function getZones() : Array
		{
			return zones;
		}

		public function removeZone(param1:Number) : void
		{
			var _loc_3:int = NaN;
			var _loc_4:Zone = null;
			var _loc_2:Zone = getZoneById(param1);
			if(_loc_2 != null)
			{
				zonesById[param1.toString()] = null;
				zonesByName[_loc_2.getZoneName()] = null;
				_loc_3 = 0;
				while(_loc_3 < zones.length)
				{
					_loc_4 = zones[_loc_3];
					if(_loc_4.getZoneId() == param1)
					{
						zones.splice(_loc_3, 1);
						break;
					}
					_loc_3 = _loc_3 + 1;
				}
			}
			else
			{
				trace("Error: Tried removing zone that wasn't being managed by the ZoneManager.");
			}
		}

		public function addZone(param1:Zone) : void
		{
			if(zonesById[param1.getZoneId().toString()] == null)
			{
				getZones().push(param1);
				zonesByName[param1.getZoneName()] = param1;
				zonesById[param1.getZoneId().toString()] = param1;
			}
			else
			{
				trace("Error: this zone has already been added. zoneId: " + param1.getZoneId().toString());
			}
		}

		public function getZoneById(param1:Number) : Zone
		{
			var _loc_2:Zone = zonesById[param1.toString()];
			if(_loc_2 == null)
			{
				trace("Error: getZoneById() could not find a zone with this id: " + param1);
			}
			return _loc_2;
		}

		public function getZoneByName(param1:String) : Zone
		{
			var _loc_2:Zone = zonesByName[param1];
			if(_loc_2 == null)
			{
				trace("Error: getZoneByName() could not find a zone with this name: " + param1);
			}
			return _loc_2;
		}
	}
}
package com.jumpeye.Events
{
	import flash.events.*;

	dynamic public class FLASHEFFEvents extends Event
	{
		public static const ROLL_OUT:String = "onRollOut";
		public static const INIT:String = "init";
		public static const TRANSITION_END:String = "onTransitionEnd";
		public static const MOUSE_UP:String = "onMouseUp";
		public static const ROLL_OVER:String = "onRollOver";
		public static const TRANSITION_START:String = "onTransitionStart";
		public static const COMPLETE:String = "complete";
		public static const DOUBLE_CLICK:String = "onDoubleClick";
		public static const MOUSE_DOWN:String = "onMouseDown";

		public function FLASHEFFEvents(param1:String, param2:Boolean = false, param3:Boolean = false)
		{
			super(param1, param2, param3);
		}

		override public function toString() : String
		{
			return formatToString("FLASHEFFEvents", "type", "bubbles", "cancelable");
		}

		override public function clone() : Event
		{
			return new FLASHEFFEvents(type, bubbles, cancelable);
		}
	}
}
package com.jumpeye.core
{
	import flash.display.*;
	import flash.events.*;
	import flash.utils.*;

	dynamic public class JUIComponent extends Sprite
	{
		public static var inCallLaterPhase:Boolean = false;
		protected var callLaterMethods:Dictionary;
		protected var invalidateFlag:Boolean = false;
		protected var _inspector:Boolean = false;
		protected var invalidHash:Object;
		protected var isLivePreview:Boolean = false;
		public var version:String = "3.0.0.15";

		public function JUIComponent()
		{
			version = "3.0.0.15";
			invalidateFlag = false;
			_inspector = false;
			isLivePreview = false;
			super();
			invalidHash = {};
			callLaterMethods = new Dictionary();
			configUI();
			invalidate("all");
		}

		protected function checkLivePreview() : Boolean
		{
			var className:String = null;
			if(parent == null)
			{
				return false;
			}
			try
			{
				className = getQualifiedClassName(parent);
			}
			catch(e:Error)
			{
			}
			return className == "fl.livepreview::LivePreviewParent";
		}

		private function callLaterDispatcher(param1:Event) : void
		{
			var _loc_2:Dictionary = null;
			var _loc_3:Object = null;
			if(param1.type == Event.ADDED_TO_STAGE)
			{
				removeEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher);
				stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
				stage.invalidate();
				return;
			}
			param1.target.removeEventListener(Event.RENDER, callLaterDispatcher);
			if(stage == null)
			{
				addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
				return;
			}
			inCallLaterPhase = true;
			_loc_2 = callLaterMethods;
			var _loc_4:int = 0;
			var _loc_5:* = _loc_2;
			for each(_loc_3 in _loc_5)
			{
				_loc_3();
			}
			inCallLaterPhase = false;
		}

		protected function validate() : void
		{
			invalidHash = {};
		}

		public function invalidate(param1:String = "all", param2:Boolean = true) : void
		{
			invalidHash[param1] = true;
			if(param2)
			{
				callLater(draw);
			}
		}

		protected function draw() : void
		{
			validate();
		}

		protected function configUI() : void
		{
			isLivePreview = checkLivePreview();
			if(numChildren > 0)
			{
				removeChildAt(0);
			}
		}

		protected function isInvalid(param1:String, ...restArguments) : Boolean
		{
			invalidHash[param1];
			if(invalidHash[param1] || invalidHash["all"])
			{
				return true;
			}
			while(restArguments.length > 0)
			{
				if(invalidHash[restArguments.pop()])
				{
					return true;
				}
			}
			return false;
		}

		protected function callLater(param1:Function) : void
		{
			if(inCallLaterPhase)
			{
				return;
			}
			callLaterMethods[param1] = true;
			if(stage != null)
			{
				stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
				stage.invalidate();
			}
			else
			{
				addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
			}
		}

		public function validateNow() : void
		{
			invalidate("all", false);
			draw();
		}

		public function drawNow() : void
		{
			draw();
		}
	}
}
package com.jumpeye.flashEff2.buttonEffect
{
	import com.jumpeye.transitions.plugins.*;
	import flash.display.*;

	public class FEBColorMatrixFilterPlugin extends Sprite
	{
		public function FEBColorMatrixFilterPlugin()
		{
			super();
			TweenPlugin.activate([ColorMatrixFilterPlugin]);
		}
	}
}
package com.jumpeye.flashEff2.buttonEffect
{
	import com.jumpeye.transitions.plugins.*;
	import flash.display.*;

	public class FEBCustomTintPlugin extends Sprite
	{
		public function FEBCustomTintPlugin()
		{
			super();
			TweenPlugin.activate([CustomTintPlugin]);
		}
	}
}
package com.jumpeye.flashEff2.buttonEffect
{
	import com.jumpeye.transitions.plugins.*;
	import flash.display.*;

	public class FEBFilterPlugins extends Sprite
	{
		public function FEBFilterPlugins()
		{
			super();
			TweenPlugin.activate([BlurFilterPlugin, BevelFilterPlugin, GlowFilterPlugin, DropShadowFilterPlugin]);
		}
	}
}
package com.jumpeye.flashEff2.core.interfaces
{
	import flash.display.*;
	import flash.utils.*;

	public class IFlashEffButtonEffect extends IFlashEffPattern
	{
		protected var _tweenDuration:Number = 0.300000;
		protected var _tweenType:String = "Linear";
		protected var _target:DisplayObject;
		protected var _easeType:String = "easeOut";

		public function IFlashEffButtonEffect()
		{
			super();
		}

		public function get tweenDuration() : Number
		{
			return this._tweenDuration;
		}

		public function set target(param1:DisplayObject) : void
		{
			this._target = param1;
		}

		public function buttonRollOver() : void
		{
		}

		public function remove() : void
		{
		}

		public function get tweenType() : String
		{
			return this._tweenType;
		}

		public function get easeType() : String
		{
			return this._easeType;
		}

		public function set tweenType(param1:String) : void
		{
			this._tweenType = param1;
		}

		public function apply() : void
		{
		}

		public function buttonPress() : void
		{
		}

		protected function get easeFunc() : Function
		{
			var easeFunc:* = undefined;
			try
			{
				easeFunc = getDefinitionByName("com.jumpeye.transitions.easing." + this._tweenType);
				return easeFunc[this._easeType];
			}
			catch(e:ReferenceError)
			{
				throw "FlashEff2 WARNING: The selected ease function is not in the Library ! Please drag the " + this.tweenType + "Ease from the Components panel over the Library panel.";
				return null;
			}
			return null;
		}

		public function set easeType(param1:String) : void
		{
			this._easeType = param1;
		}

		public function get target() : DisplayObject
		{
			return this._target;
		}

		public function buttonRelease() : void
		{
		}

		public function set tweenDuration(param1:Number) : void
		{
			if(param1 < 0)
			{
				param1 = 0;
			}
			this._tweenDuration = param1;
		}

		public function buttonRollOut() : void
		{
		}
	}
}
package com.jumpeye.flashEff2.core.interfaces
{
	import flash.display.*;

	public class IFlashEffCommand extends IFlashEffPattern
	{
		protected var _target:DisplayObject;
		private var _commandEventType:String;

		public function IFlashEffCommand()
		{
			super();
		}

		public function get target() : DisplayObject
		{
			return _target;
		}

		public function set target(param1:DisplayObject) : void
		{
			_target = param1;
		}

		public function get commandEventType() : String
		{
			return this._commandEventType;
		}

		public function set commandEventType(param1:String) : void
		{
			_commandEventType = param1;
		}

		public function run() : void
		{
		}
	}
}
package com.jumpeye.flashEff2.core.interfaces
{
	import flash.display.*;

	public class IFlashEffFilter extends IFlashEffPattern
	{
		protected var _target:Sprite;

		public function IFlashEffFilter()
		{
			super();
		}

		public function get target() : Sprite
		{
			return _target;
		}

		public function set target(param1:Sprite) : void
		{
			_target = param1;
		}

		public function remove() : void
		{
		}

		public function apply() : void
		{
		}
	}
}
package com.jumpeye.flashEff2.core.interfaces
{
	import com.jumpeye.core.*;
	import flash.display.*;

	public class IFlashEffPattern extends Sprite
	{
		protected var _component:JUIComponent;

		public function IFlashEffPattern()
		{
			super();
			if(this.numChildren > 0)
			{
				removeChildAt(0);
			}
			var _loc_1:int = 0;
			scaleY = _loc_1;
			scaleX = _loc_1;
			visible = false;
		}

		public function set component(param1:JUIComponent) : void
		{
			this._component = param1;
		}

		public function get component() : JUIComponent
		{
			return this._component;
		}
	}
}
package com.jumpeye.flashEff2.core.interfaces
{
	import flash.display.*;

	public class IFlashEffSymbol extends IFlashEffSymbolText
	{
		protected var _target:DisplayObject;

		public function IFlashEffSymbol()
		{
			super();
		}

		public function get target() : DisplayObject
		{
			return _target;
		}

		public function set target(param1:DisplayObject) : void
		{
			_target = param1;
		}
	}
}
package com.jumpeye.flashEff2.core.interfaces
{
	import flash.utils.*;

	public class IFlashEffSymbolText extends IFlashEffPattern
	{
		protected var _tweenDuration:Number = 1.700000;
		protected var _easeType:String = "easeInOut";
		protected var _tweenType:String = "Strong";

		public function IFlashEffSymbolText()
		{
			_tweenDuration = 1.70;
			_tweenType = "Strong";
			_easeType = "easeInOut";
			super();
		}

		public function show() : void
		{
		}

		public function get tweenDuration() : Number
		{
			return this._tweenDuration;
		}

		public function set tweenDuration(param1:Number) : void
		{
			if(param1 < 0.00)
			{
				param1 = 0.00;
			}
			this._tweenDuration = param1;
		}

		public function get tweenType() : String
		{
			return this._tweenType;
		}

		public function get easeType() : String
		{
			return this._easeType;
		}

		public function hide() : void
		{
		}

		public function remove() : void
		{
		}

		public function set tweenType(param1:String) : void
		{
			this._tweenType = param1;
		}

		public function set easeType(param1:String) : void
		{
			this._easeType = param1;
		}

		public function get easeFunc() : Function
		{
			var easeFunc:* = undefined;
			try
			{
				easeFunc = getDefinitionByName("com.jumpeye.transitions.easing." + this.tweenType);
				return easeFunc[this.easeType];
			}
			catch(e:ReferenceError)
			{
				throw "FlashEff2 WARNING:  The selected ease function is not in the Library ! Please drag the " + this.tweenType + "Ease from the Components panel over the Library panel.";
				return null;
			}
			return null;
		}
	}
}
package com.jumpeye.flashEff2.core.interfaces
{
	import flash.text.*;

	public class IFlashEffText extends IFlashEffSymbolText
	{
		protected var _partialBlurAmount:Number = 0;
		protected var _partialStart:Number = 50;
		protected var _partialGroup:String = "letters";
		protected var _partialPercent:Number = -28;
		protected var _selectedStrings:Array;
		protected var _target:TextField;

		public function IFlashEffText()
		{
			super();
		}

		public function get partialPercent() : Number
		{
			return this._partialPercent;
		}

		public function get partialBlurAmount() : Number
		{
			return this._partialBlurAmount;
		}

		public function set partialPercent(param1:Number) : void
		{
			if(param1 < 0)
			{
				param1 = 0;
			}
			else
			{
				if(param1 > 100)
				{
					param1 = 100;
				}
			}
			this._partialPercent = param1;
		}

		public function set partialStart(param1:Number) : void
		{
			if(param1 < 0)
			{
				param1 = 0;
			}
			else
			{
				if(param1 > 100)
				{
					param1 = 100;
				}
			}
			this._partialStart = param1;
		}

		public function set selectedStrings(param1:Array) : void
		{
			this._selectedStrings = param1;
		}

		public function get target() : TextField
		{
			return this._target;
		}

		public function set partialBlurAmount(param1:Number) : void
		{
			if(param1 < 0)
			{
				param1 = 0;
			}
			this._partialBlurAmount = param1;
		}

		public function get partialStart() : Number
		{
			return this._partialStart;
		}

		public function set target(param1:TextField) : void
		{
			this._target = param1;
		}

		public function get selectedStrings() : Array
		{
			return this._selectedStrings;
		}

		public function set partialGroup(param1:String) : void
		{
			this._partialGroup = param1;
		}

		public function get partialGroup() : String
		{
			return this._partialGroup;
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP1 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = _loc_7;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = param3;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP1()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP10 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = (param3 + param2) - _loc_6 - _loc_7 - 2;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = (_loc_6 + _loc_7) - 1;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP10()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP11 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = (param2 + _loc_7) - _loc_6 - 1;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = (_loc_6 + _loc_7) - 1;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP11()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP12 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = (param3 - _loc_7) + _loc_6 - 1;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = (_loc_6 + _loc_7) - 1;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP12()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP13 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < _loc_9)
			{
				_loc_7 = _loc_6;
				while(_loc_7 < (param3 - _loc_7))
				{
					param4[_loc_7][_loc_7] = _loc_7;
					param4[(param2 - _loc_7) - 1][_loc_7] = _loc_7;
					_loc_7 = _loc_7 + 1;
				}
				if(_loc_7 <= (JFESP13.uint(param3 / 2)))
				{
					_loc_7 = _loc_7 + 1;
					while(_loc_7 < (param2 - _loc_7) - 1)
					{
						param4[_loc_7][_loc_7] = _loc_7;
						param4[_loc_7][(param3 - _loc_7) - 1] = _loc_7;
						_loc_7 = _loc_7 + 1;
					}
				}
				_loc_7 = _loc_7 + 1;
			}
			_loc_8 = _loc_9;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP13()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP14 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:Number = Math.ceil(param2 / 2);
			var _loc_10:uint = Math.min(_loc_9, param3 / 2);
			_loc_6 = 0;
			while(_loc_6 < _loc_9)
			{
				_loc_7 = _loc_6;
				while(_loc_7 < (param3 - _loc_7))
				{
					param4[_loc_7][_loc_7] = _loc_10 - _loc_7;
					param4[(param2 - _loc_7) - 1][_loc_7] = _loc_10 - _loc_7;
					_loc_7 = _loc_7 + 1;
				}
				if(_loc_7 <= (JFESP14.uint(param3 / 2)))
				{
					_loc_7 = _loc_7 + 1;
					while(_loc_7 < (param2 - _loc_7) - 1)
					{
						param4[_loc_7][_loc_7] = _loc_10 - _loc_7;
						param4[_loc_7][(param3 - _loc_7) - 1] = _loc_10 - _loc_7;
						_loc_7 = _loc_7 + 1;
					}
				}
				_loc_7 = _loc_7 + 1;
			}
			_loc_8 = _loc_9 + 1;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP14()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP15 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:int = 0;
			var _loc_10:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < _loc_10)
			{
				if(_loc_6 <= (param3 - _loc_6) - 1)
				{
					_loc_7 = _loc_6;
					while(_loc_7 <= (param2 - _loc_7) - 2)
					{
						_loc_9++;
						param4[_loc_7][_loc_7] = _loc_9;
						_loc_7 = _loc_7 + 1;
					}
				}
				_loc_7 = _loc_7;
				while(_loc_7 <= (param3 - _loc_7) - 1)
				{
					_loc_9++;
					param4[(param2 - _loc_7) - 1][_loc_7] = _loc_9;
					_loc_7 = _loc_7 + 1;
				}
				if((param3 - _loc_7) - 1 > _loc_7)
				{
					_loc_7 = (param2 - _loc_7) - 2;
					while(_loc_7 > _loc_7)
					{
						_loc_9++;
						param4[_loc_7][(param3 - _loc_7) - 1] = _loc_9;
						_loc_7 = _loc_7 - 1;
					}
				}
				if(_loc_7 < (param2 - _loc_7) - 1)
				{
					_loc_7 = (param3 - _loc_7) - 1;
					while(_loc_7 > _loc_7)
					{
						_loc_9++;
						param4[_loc_7][_loc_7] = _loc_9;
						_loc_7 = _loc_7 - 1;
					}
				}
				_loc_7 = _loc_7 + 1;
			}
			_loc_8 = _loc_9;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP15()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP16 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:* = param3 * param2;
			_loc_8 = _loc_9;
			var _loc_10:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < _loc_10)
			{
				if(_loc_6 <= (param3 - _loc_6) - 1)
				{
					_loc_7 = _loc_6;
					while(_loc_7 <= (param2 - _loc_7) - 2)
					{
						_loc_9 = _loc_9 - 1;
						param4[_loc_7][_loc_7] = _loc_9;
						_loc_7 = _loc_7 + 1;
					}
				}
				_loc_7 = _loc_7;
				while(_loc_7 <= (param3 - _loc_7) - 1)
				{
					_loc_9 = _loc_9 - 1;
					param4[(param2 - _loc_7) - 1][_loc_7] = _loc_9;
					_loc_7 = _loc_7 + 1;
				}
				if((param3 - _loc_7) - 1 > _loc_7)
				{
					_loc_7 = (param2 - _loc_7) - 2;
					while(_loc_7 > _loc_7)
					{
						_loc_9 = _loc_9 - 1;
						param4[_loc_7][(param3 - _loc_7) - 1] = _loc_9;
						_loc_7 = _loc_7 - 1;
					}
				}
				if(_loc_7 < (param2 - _loc_7) - 1)
				{
					_loc_7 = (param3 - _loc_7) - 1;
					while(_loc_7 > _loc_7)
					{
						_loc_9 = _loc_9 - 1;
						param4[_loc_7][_loc_7] = _loc_9;
						_loc_7 = _loc_7 - 1;
					}
				}
				_loc_7 = _loc_7 + 1;
			}
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP16()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP17 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:Number = 0;
			var _loc_10:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < _loc_10)
			{
				if((param2 - _loc_6) - 1 >= _loc_6)
				{
					_loc_7 = _loc_6;
					while(_loc_7 <= (param3 - _loc_7) - 1)
					{
						_loc_9 = _loc_9 + 1;
						param4[_loc_7][_loc_7] = _loc_9;
						_loc_7 = _loc_7 + 1;
					}
				}
				if((param3 - _loc_7) - 1 >= _loc_7)
				{
					_loc_7 = _loc_7 + 1;
					while(_loc_7 < (param2 - _loc_7) - 1)
					{
						_loc_9 = _loc_9 + 1;
						param4[_loc_7][(param3 - _loc_7) - 1] = _loc_9;
						_loc_7 = _loc_7 + 1;
					}
				}
				if(_loc_7 < (param3 - _loc_7) - 1)
				{
					if((param2 - _loc_7) - 1 > _loc_7)
					{
						_loc_7 = param3 - _loc_7;
						while(_loc_7 > _loc_7)
						{
							_loc_9 = _loc_9 + 1;
							param4[(param2 - _loc_7) - 1][_loc_7 - 1] = _loc_9;
							_loc_7 = _loc_7 - 1;
						}
					}
				}
				if(_loc_7 < (param3 - _loc_7) - 1)
				{
					_loc_7 = (param2 - _loc_7) - 2;
					while(_loc_7 > _loc_7)
					{
						_loc_9 = _loc_9 + 1;
						param4[_loc_7][_loc_7] = _loc_9;
						_loc_7 = _loc_7 - 1;
					}
				}
				_loc_7 = _loc_7 + 1;
			}
			_loc_8 = _loc_9;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP17()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP18 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:Number = param3 * param2;
			_loc_8 = _loc_9;
			var _loc_10:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < _loc_10)
			{
				if((param2 - _loc_6) - 1 >= _loc_6)
				{
					_loc_7 = _loc_6;
					while(_loc_7 <= (param3 - _loc_7) - 1)
					{
						_loc_9 = _loc_9 - 1;
						param4[_loc_7][_loc_7] = _loc_9;
						_loc_7 = _loc_7 + 1;
					}
				}
				if((param3 - _loc_7) - 1 >= _loc_7)
				{
					_loc_7 = _loc_7 + 1;
					while(_loc_7 < (param2 - _loc_7) - 1)
					{
						_loc_9 = _loc_9 - 1;
						param4[_loc_7][(param3 - _loc_7) - 1] = _loc_9;
						_loc_7 = _loc_7 + 1;
					}
				}
				if(_loc_7 < (param3 - _loc_7) - 1)
				{
					if((param2 - _loc_7) - 1 > _loc_7)
					{
						_loc_7 = param3 - _loc_7;
						while(_loc_7 > _loc_7)
						{
							_loc_9 = _loc_9 - 1;
							param4[(param2 - _loc_7) - 1][_loc_7 - 1] = _loc_9;
							_loc_7 = _loc_7 - 1;
						}
					}
				}
				if(_loc_7 < (param3 - _loc_7) - 1)
				{
					_loc_7 = (param2 - _loc_7) - 2;
					while(_loc_7 > _loc_7)
					{
						_loc_9 = _loc_9 - 1;
						param4[_loc_7][_loc_7] = _loc_9;
						_loc_7 = _loc_7 - 1;
					}
				}
				_loc_7 = _loc_7 + 1;
			}
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP18()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP19 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = JFESP19.uint((Math.random() * param3) * param2);
					_loc_8 = Math.max(_loc_8, param4[_loc_6][_loc_7]);
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP19()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP2 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = param3 - _loc_7;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = param3;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP2()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP20 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = (_loc_6 + _loc_7) % 2;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = 2;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP20()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP3 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = _loc_6;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = param2;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP3()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP4 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = param2 - _loc_6;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = param2;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP4()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP5 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < _loc_9)
				{
					param4[_loc_6][_loc_7] = _loc_9 - _loc_7;
					param4[_loc_6][(param3 - _loc_7) - 1] = _loc_9 - _loc_7;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = _loc_9 + 1;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP5()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP6 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < _loc_9)
				{
					param4[_loc_6][_loc_7] = _loc_7;
					param4[_loc_6][(param3 - _loc_7) - 1] = _loc_7;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = _loc_9;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP6()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP7 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < _loc_9)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = _loc_6;
					param4[(param2 - _loc_6) - 1][_loc_7] = _loc_6;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = _loc_9;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP7()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP8 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			var _loc_9:Number = (Math.ceil(param2 / 2)) - 1;
			_loc_6 = 0;
			while(_loc_6 <= _loc_9)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = _loc_9 - _loc_6;
					param4[(param2 - _loc_6) - 1][_loc_7] = _loc_9 - _loc_6;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = _loc_9 + 1;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP8()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESP9 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = _loc_6 + _loc_7;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = (_loc_6 + _loc_7) - 1;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESP9()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESPM2 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = (_loc_6 * (param3 - 1)) + (param3 - _loc_7);
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = param2 * param3;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESPM2()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESPM3 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = (_loc_7 * (param2 - 1)) + _loc_6;
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = param2 * param3;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESPM3()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESPM4 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_8:Number = 0;
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					param4[_loc_6][_loc_7] = (_loc_7 * (param2 - 1)) + (param2 - _loc_6);
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			_loc_8 = param2 * param3;
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESPM4()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESPM5 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_10:int = NaN;
			var _loc_8:Number = 0;
			var _loc_9:uint = Math.ceil(param3 / 2);
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < _loc_9)
				{
					_loc_10 = (Math.ceil(_loc_6 * _loc_9)) + (_loc_9 - _loc_7) - 1;
					param4[_loc_6][_loc_7] = _loc_10;
					param4[_loc_6][(param3 - _loc_7) - 1] = _loc_10;
					_loc_8 = Math.max(_loc_8, _loc_10);
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESPM5()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESPM6 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_10:int = NaN;
			var _loc_8:Number = 0;
			var _loc_9:Number = Math.ceil(param3 / 2);
			_loc_6 = 0;
			while(_loc_6 < param2)
			{
				_loc_7 = 0;
				while(_loc_7 < _loc_9)
				{
					_loc_10 = (Math.ceil(_loc_6 * _loc_9)) + _loc_7;
					param4[_loc_6][_loc_7] = _loc_10;
					param4[_loc_6][(param3 - _loc_7) - 1] = _loc_10;
					_loc_8 = Math.max(_loc_10, _loc_8);
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESPM6()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESPM7 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_10:int = NaN;
			var _loc_8:Number = 0;
			var _loc_9:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < _loc_9)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					_loc_10 = Math.ceil((_loc_7 * _loc_9) + _loc_6);
					param4[_loc_6][_loc_7] = _loc_10;
					param4[(param2 - _loc_6) - 1][_loc_7] = _loc_10;
					_loc_8 = Math.max(_loc_10, _loc_8);
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESPM7()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFESPM8 extends Sprite
	{
		final public static function fep(param1:uint, param2:uint, param3:uint, param4:Array, param5:Object = null) : Array
		{
			var _loc_6:* = undefined;
			var _loc_7:uint = 0;
			var _loc_10:int = NaN;
			var _loc_8:Number = 0;
			var _loc_9:Number = Math.ceil(param2 / 2);
			_loc_6 = 0;
			while(_loc_6 < _loc_9)
			{
				_loc_7 = 0;
				while(_loc_7 < param3)
				{
					_loc_10 = (Math.ceil(_loc_7 * _loc_9)) + (_loc_9 - _loc_6) - 1;
					param4[_loc_6][_loc_7] = _loc_10;
					param4[(param2 - _loc_6) - 1][_loc_7] = _loc_10;
					_loc_8 = Math.max(_loc_10, _loc_8);
					_loc_7 = _loc_7 + 1;
				}
				_loc_6 = _loc_6 + 1;
			}
			if(param5 != null)
			{
				param5.MAX = _loc_8;
			}
			return param4;
		}

		public function JFESPM8()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP10 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_8:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_8 = Math.ceil(_loc_6 / 2);
				_loc_4[_loc_2] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_8)
				{
					_loc_4[_loc_2][_loc_3] = _loc_3;
					_loc_4[_loc_2][(_loc_6 - _loc_3) - 1] = _loc_3;
					_loc_3++;
				}
				_loc_7 = Math.max(_loc_7, _loc_8);
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP10()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP11 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_8:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_8 = Math.ceil(_loc_6 / 2);
				_loc_4[_loc_2] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_8)
				{
					_loc_4[_loc_2][_loc_3] = (_loc_8 - _loc_3) - 1;
					_loc_4[_loc_2][(_loc_6 - _loc_3) - 1] = (_loc_8 - _loc_3) - 1;
					_loc_3++;
				}
				_loc_7 = Math.max(_loc_7, _loc_8);
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP11()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP12 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_8:int = NaN;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_8 = Math.ceil(_loc_6 / 2);
				_loc_3 = 0;
				while(_loc_3 < _loc_8)
				{
					_loc_4[_loc_2][_loc_3] = _loc_7;
					_loc_7 = _loc_7 + 1;
					_loc_4[_loc_2][(_loc_6 - _loc_3) - 1] = _loc_7;
					_loc_3++;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP12()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP13 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_8:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = _loc_5 - 1;
			while(_loc_2 >= 0)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_8 = Math.ceil(_loc_6 / 2);
				_loc_3 = 0;
				while(_loc_3 < _loc_8)
				{
					_loc_4[_loc_2][_loc_3] = _loc_7;
					_loc_7 = _loc_7 + 1;
					_loc_4[_loc_2][(_loc_6 - _loc_3) - 1] = _loc_7;
					_loc_3++;
				}
				_loc_2 = _loc_2 - 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP13()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP14 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_8:int = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_8 = Math.ceil(_loc_6 / 2);
				_loc_3 = _loc_8 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[_loc_2][_loc_3] = _loc_7;
					_loc_7 = _loc_7 + 1;
					_loc_4[_loc_2][(_loc_6 - _loc_3) - 1] = _loc_7;
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP14()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP15 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_8:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = _loc_5 - 1;
			while(_loc_2 >= 0)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_8 = Math.ceil(_loc_6 / 2);
				_loc_3 = _loc_8 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[_loc_2][_loc_3] = _loc_7;
					_loc_7 = _loc_7 + 1;
					_loc_4[_loc_2][(_loc_6 - _loc_3) - 1] = _loc_7;
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 - 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP15()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP16 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			var _loc_8:uint = Math.ceil(_loc_5 / 2);
			_loc_2 = 0;
			while(_loc_2 < _loc_8)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_4[(_loc_5 - _loc_2) - 1] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[_loc_2][_loc_3] = _loc_2 + (_loc_3 * _loc_8);
					_loc_7 = Math.max(_loc_7, _loc_2 + (_loc_3 * _loc_8));
					_loc_3++;
				}
				_loc_6 = (param1[(_loc_5 - _loc_2) - 1]).length;
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[(_loc_5 - _loc_2) - 1][_loc_3] = _loc_2 + (_loc_3 * _loc_8);
					_loc_7 = Math.max(_loc_7, _loc_2 + (_loc_3 * _loc_8));
					_loc_3++;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP16()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP17 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = Math.ceil(_loc_5 / 2);
			var _loc_8:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_7)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_4[(_loc_5 - _loc_2) - 1] = [];
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[_loc_2][_loc_3] = _loc_2 + (_loc_6 - _loc_3) - 1 * _loc_7;
					_loc_8 = Math.max(_loc_8, _loc_2 + (_loc_6 - _loc_3) - 1 * _loc_7);
					_loc_3 = _loc_3 - 1;
				}
				_loc_6 = (param1[(_loc_5 - _loc_2) - 1]).length;
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[(_loc_5 - _loc_2) - 1][_loc_3] = _loc_2 + (_loc_6 - _loc_3) - 1 * _loc_7;
					_loc_8 = Math.max(_loc_8, _loc_2 + (_loc_6 - _loc_3) - 1 * _loc_7);
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_8, timeMatrix:_loc_4};
		}

		public function JFETP17()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP18 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = Math.ceil(_loc_5 / 2);
			var _loc_8:uint = 0;
			_loc_2 = _loc_7 - 1;
			while(_loc_2 >= 0)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_4[(_loc_5 - _loc_2) - 1] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[_loc_2][_loc_3] = (_loc_7 - _loc_2) - 1 + (_loc_3 * _loc_7);
					_loc_8 = Math.max(_loc_8, (_loc_7 - _loc_2) - 1 + (_loc_3 * _loc_7));
					_loc_3++;
				}
				_loc_6 = (param1[(_loc_5 - _loc_2) - 1]).length;
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[(_loc_5 - _loc_2) - 1][_loc_3] = (_loc_7 - _loc_2) - 1 + (_loc_3 * _loc_7);
					_loc_8 = Math.max(_loc_8, (_loc_7 - _loc_2) - 1 + (_loc_3 * _loc_7));
					_loc_3++;
				}
				_loc_2 = _loc_2 - 1;
			}
			return {maxItems:_loc_8, timeMatrix:_loc_4};
		}

		public function JFETP18()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP19 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			var _loc_8:uint = Math.ceil(_loc_5 / 2);
			_loc_2 = _loc_8 - 1;
			while(_loc_2 >= 0)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_4[(_loc_5 - _loc_2) - 1] = [];
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[_loc_2][_loc_3] = (_loc_8 - _loc_2) - 1 + (_loc_6 - _loc_3) - 1 * _loc_8;
					_loc_7 = Math.max(_loc_7, (_loc_8 - _loc_2) - 1 + (_loc_6 - _loc_3) - 1 * _loc_8);
					_loc_3 = _loc_3 - 1;
				}
				_loc_6 = (param1[(_loc_5 - _loc_2) - 1]).length;
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[(_loc_5 - _loc_2) - 1][_loc_3] = (_loc_8 - _loc_2) - 1 + (_loc_6 - _loc_3) - 1 * _loc_8;
					_loc_7 = Math.max(_loc_7, (_loc_8 - _loc_2) - 1 + (_loc_6 - _loc_3) - 1 * _loc_8);
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 - 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP19()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP2 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = _loc_6 - 1;
				while(_loc_3 > -1)
				{
					_loc_4[_loc_2][_loc_3] = _loc_7;
					_loc_7 = _loc_7 + 1;
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP2()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP20 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:* = -1;
			var _loc_8:uint = Math.ceil(_loc_5 / 2);
			_loc_2 = 0;
			while(_loc_2 < _loc_8)
			{
				_loc_4[_loc_2] = [];
				if((_loc_8 + _loc_2) < _loc_5)
				{
					_loc_4[_loc_8 + _loc_2] = [];
				}
				_loc_2 = _loc_2 + 1;
			}
			_loc_2 = 0;
			while(_loc_2 < _loc_8)
			{
				_loc_6 = param1[_loc_2].length;
				if((_loc_5 - _loc_2) - 1 >= _loc_2)
				{
					_loc_3 = _loc_2;
					while(_loc_3 <= (_loc_6 - _loc_3) - 1)
					{
						if(JFETP20.isNaN(_loc_4[_loc_3][_loc_3]))
						{
							_loc_7 = _loc_7 + 1;
							_loc_4[_loc_3][_loc_3] = _loc_7;
						}
						_loc_3++;
					}
				}
				_loc_6 = param1[_loc_3].length;
				_loc_3 = _loc_3;
				while(_loc_3 < (_loc_5 - _loc_3) - 1)
				{
					_loc_6 = param1[_loc_3].length;
					if((_loc_6 - _loc_3) - 1 > _loc_3)
					{
						if(JFETP20.isNaN(_loc_4[_loc_3][(_loc_6 - _loc_3) - 1]))
						{
							_loc_7 = _loc_7 + 1;
							_loc_4[_loc_3][(_loc_6 - _loc_3) - 1] = _loc_7;
						}
					}
					_loc_3++;
				}
				_loc_6 = (param1[(_loc_5 - _loc_3) - 1]).length;
				if((_loc_5 - _loc_3) - 1 > _loc_3)
				{
					_loc_3 = _loc_6 - _loc_3;
					while(_loc_3 > _loc_3)
					{
						if(JFETP20.isNaN(_loc_4[(_loc_5 - _loc_3) - 1][_loc_3 - 1]))
						{
							_loc_7 = _loc_7 + 1;
							_loc_4[(_loc_5 - _loc_3) - 1][_loc_3 - 1] = _loc_7;
						}
						_loc_3 = _loc_3 - 1;
					}
				}
				_loc_3 = (_loc_5 - _loc_3) - 2;
				while(_loc_3 > _loc_3)
				{
					_loc_6 = param1[_loc_3].length;
					if(_loc_3 < _loc_6)
					{
						if(JFETP20.isNaN(_loc_4[_loc_3][_loc_3]))
						{
							_loc_7 = _loc_7 + 1;
							_loc_4[_loc_3][_loc_3] = _loc_7;
						}
					}
					_loc_3 = _loc_3 - 1;
				}
				_loc_3 = _loc_3 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP20()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP21 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			var _loc_8:uint = Math.ceil(_loc_5 / 2);
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_4[_loc_2] = [];
				_loc_7 = _loc_7 + param1[_loc_2].length;
				_loc_2 = _loc_2 + 1;
			}
			var _loc_9:uint = _loc_7;
			_loc_2 = 0;
			while(_loc_2 < _loc_8)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_3 = _loc_2;
				while(_loc_3 <= (_loc_5 - _loc_3) - 2)
				{
					_loc_6 = param1[_loc_3].length;
					if(_loc_3 < _loc_6)
					{
						if(JFETP21.isNaN(_loc_4[_loc_3][_loc_3]))
						{
							_loc_9 = _loc_9 - 1;
							_loc_4[_loc_3][_loc_3] = _loc_9;
						}
					}
					_loc_3++;
				}
				_loc_6 = (param1[(_loc_5 - _loc_3) - 1]).length;
				_loc_3 = _loc_3;
				while(_loc_3 <= (_loc_6 - _loc_3) - 1)
				{
					_loc_6 = (param1[(_loc_5 - _loc_3) - 1]).length;
					if(JFETP21.isNaN(_loc_4[(_loc_5 - _loc_3) - 1][_loc_3]))
					{
						_loc_9 = _loc_9 - 1;
						_loc_4[(_loc_5 - _loc_3) - 1][_loc_3] = _loc_9;
					}
					_loc_3++;
				}
				_loc_3 = (_loc_5 - _loc_3) - 2;
				while(_loc_3 > _loc_3)
				{
					_loc_6 = param1[_loc_3].length;
					if((_loc_6 - _loc_3) - 1 > _loc_3)
					{
						if(JFETP21.isNaN(_loc_4[_loc_3][(_loc_6 - _loc_3) - 1]))
						{
							_loc_9 = _loc_9 - 1;
							_loc_4[_loc_3][(_loc_6 - _loc_3) - 1] = _loc_9;
						}
					}
					_loc_3 = _loc_3 - 1;
				}
				_loc_6 = param1[_loc_3].length;
				if(_loc_3 < (_loc_5 - _loc_3) - 1)
				{
					_loc_3 = (_loc_6 - _loc_3) - 1;
					while(_loc_3 > _loc_3)
					{
						if(JFETP21.isNaN(_loc_4[_loc_3][_loc_3]))
						{
							_loc_9 = _loc_9 - 1;
							_loc_4[_loc_3][_loc_3] = _loc_9;
						}
						_loc_3 = _loc_3 - 1;
					}
				}
				_loc_3 = _loc_3 + 1;
			}
			return {maxItems:_loc_9, timeMatrix:_loc_4};
		}

		public function JFETP21()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP22 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:int = -1;
			var _loc_8:uint = Math.ceil(_loc_5 / 2);
			_loc_2 = 0;
			while(_loc_2 < _loc_8)
			{
				_loc_4[_loc_2] = [];
				if((_loc_8 + _loc_2) < _loc_5)
				{
					_loc_4[_loc_8 + _loc_2] = [];
				}
				_loc_2 = _loc_2 + 1;
			}
			_loc_2 = 0;
			while(_loc_2 < _loc_8)
			{
				_loc_3 = _loc_2;
				while(_loc_3 <= (_loc_5 - _loc_3) - 2)
				{
					_loc_6 = param1[_loc_3].length;
					if(_loc_3 <= (_loc_6 - _loc_3) - 1)
					{
						if(JFETP22.isNaN(_loc_4[_loc_3][_loc_3]))
						{
							_loc_7++;
							_loc_4[_loc_3][_loc_3] = _loc_7;
						}
					}
					_loc_3++;
				}
				_loc_6 = (param1[(_loc_5 - _loc_3) - 1]).length;
				_loc_3 = _loc_3;
				while(_loc_3 <= (_loc_6 - _loc_3) - 1)
				{
					_loc_6 = (param1[(_loc_5 - _loc_3) - 1]).length;
					if(JFETP22.isNaN(_loc_4[(_loc_5 - _loc_3) - 1][_loc_3]))
					{
						_loc_7++;
						_loc_4[(_loc_5 - _loc_3) - 1][_loc_3] = _loc_7;
					}
					_loc_3++;
				}
				_loc_3 = (_loc_5 - _loc_3) - 2;
				while(_loc_3 > _loc_3)
				{
					_loc_6 = param1[_loc_3].length;
					if((_loc_6 - _loc_3) - 1 > _loc_3)
					{
						if(JFETP22.isNaN(_loc_4[_loc_3][(_loc_6 - _loc_3) - 1]))
						{
							_loc_7++;
							_loc_4[_loc_3][(_loc_6 - _loc_3) - 1] = _loc_7;
						}
					}
					_loc_3 = _loc_3 - 1;
				}
				_loc_6 = param1[_loc_3].length;
				if(_loc_3 < (_loc_5 - _loc_3) - 1)
				{
					_loc_3 = (_loc_6 - _loc_3) - 1;
					while(_loc_3 > _loc_3)
					{
						if(JFETP22.isNaN(_loc_4[_loc_3][_loc_3]))
						{
							_loc_7++;
							_loc_4[_loc_3][_loc_3] = _loc_7;
						}
						_loc_3 = _loc_3 - 1;
					}
				}
				_loc_3 = _loc_3 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP22()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP23 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:int = -1;
			var _loc_8:uint = Math.ceil(_loc_5 / 2);
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_4[_loc_2] = [];
				_loc_7 = _loc_7 + param1[_loc_2].length;
				_loc_2 = _loc_2 + 1;
			}
			var _loc_9:int = _loc_7;
			_loc_2 = 0;
			while(_loc_2 < _loc_8)
			{
				_loc_6 = param1[_loc_2].length;
				if((_loc_5 - _loc_2) - 1 >= _loc_2)
				{
					_loc_3 = _loc_2;
					while(_loc_3 <= (_loc_6 - _loc_3) - 1)
					{
						if(JFETP23.isNaN(_loc_4[_loc_3][_loc_3]))
						{
							_loc_9 = _loc_9 - 1;
							_loc_4[_loc_3][_loc_3] = _loc_9;
						}
						_loc_3++;
					}
				}
				_loc_6 = param1[_loc_3].length;
				_loc_3 = _loc_3;
				while(_loc_3 < (_loc_5 - _loc_3) - 1)
				{
					_loc_6 = param1[_loc_3].length;
					if((_loc_6 - _loc_3) - 1 >= _loc_3)
					{
						if(JFETP23.isNaN(_loc_4[_loc_3][(_loc_6 - _loc_3) - 1]))
						{
							_loc_9 = _loc_9 - 1;
							_loc_4[_loc_3][(_loc_6 - _loc_3) - 1] = _loc_9;
						}
					}
					_loc_3++;
				}
				_loc_6 = (param1[(_loc_5 - _loc_3) - 1]).length;
				if(_loc_3 <= (_loc_6 - _loc_3) - 1)
				{
					if((_loc_5 - _loc_3) - 1 > _loc_3)
					{
						_loc_3 = _loc_6 - _loc_3;
						while(_loc_3 > _loc_3)
						{
							if(JFETP23.isNaN(_loc_4[(_loc_5 - _loc_3) - 1][_loc_3 - 1]))
							{
								_loc_9 = _loc_9 - 1;
								_loc_4[(_loc_5 - _loc_3) - 1][_loc_3 - 1] = _loc_9;
							}
							_loc_3 = _loc_3 - 1;
						}
					}
				}
				_loc_3 = (_loc_5 - _loc_3) - 2;
				while(_loc_3 > _loc_3)
				{
					_loc_6 = param1[_loc_3].length;
					if(_loc_3 < _loc_6)
					{
						if(JFETP23.isNaN(_loc_4[_loc_3][_loc_3]))
						{
							_loc_9 = _loc_9 - 1;
							_loc_4[_loc_3][_loc_3] = _loc_9;
						}
					}
					_loc_3 = _loc_3 - 1;
				}
				_loc_3 = _loc_3 + 1;
			}
			return {maxItems:_loc_9, timeMatrix:_loc_4};
		}

		public function JFETP23()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP24 extends Sprite
	{
		final public static function jtpFill(param1:*, param2:*, param3:Array) : Array
		{
			var _loc_4:Number = param3[param1][param2];
			if(JFETP24.isNaN(param3[param1 - 1][param2]) || (param3[param1 - 1][param2]) > (_loc_4 + 1))
			{
				param3[param1 - 1][param2] = _loc_4 + 1;
				JFETP24.jtpFill(param1 - 1, param2, param3);
			}
			if(JFETP24.isNaN(param3[param1 + 1][param2]) || (param3[param1 + 1][param2]) > (_loc_4 + 1))
			{
				param3[param1 + 1][param2] = _loc_4 + 1;
				JFETP24.jtpFill(param1 + 1, param2, param3);
			}
			if(JFETP24.isNaN(param3[param1][param2 - 1]) || (param3[param1][param2 - 1]) > (_loc_4 + 1))
			{
				param3[param1][param2 - 1] = _loc_4 + 1;
				JFETP24.jtpFill(param1, param2 - 1, param3);
			}
			if(JFETP24.isNaN(param3[param1][param2 + 1]) || (param3[param1][param2 + 1]) > (_loc_4 + 1))
			{
				param3[param1][param2 + 1] = _loc_4 + 1;
				JFETP24.jtpFill(param1, param2 + 1, param3);
			}
			return param3;
		}

		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_14:int = NaN;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			var _loc_8:Number = Math.ceil(_loc_5 / 2);
			var _loc_9:Array = [];
			var _loc_10:Number = 0;
			var _loc_11:int = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_4[_loc_2] = [];
				_loc_9[_loc_2] = [];
				_loc_14 = param1[_loc_2].length;
				_loc_7 = _loc_7 + _loc_14;
				_loc_10 = Math.max(_loc_10, _loc_14);
				_loc_2 = _loc_2 + 1;
			}
			_loc_9[_loc_5] = [];
			_loc_9[_loc_5 + 1] = [];
			var _loc_12:Number = Math.ceil(_loc_10 / 2);
			_loc_2 = 0;
			while(_loc_2 <= (_loc_5 + 1))
			{
				_loc_9[_loc_2][0] = -1;
				_loc_9[_loc_2][_loc_10 + 1] = -1;
				_loc_2 = _loc_2 + 1;
			}
			_loc_2 = 0;
			while(_loc_2 <= (_loc_10 + 1))
			{
				_loc_9[0][_loc_2] = -1;
				_loc_9[_loc_5 + 1][_loc_2] = -1;
				_loc_2 = _loc_2 + 1;
			}
			_loc_9[_loc_8][_loc_12] = 0;
			JFETP24.jtpFill(_loc_8, _loc_12, _loc_9);
			_loc_11 = 0;
			var _loc_13:Number = Math.max(_loc_9[1][1], _loc_9[1][_loc_10]);
			_loc_13 = Math.max(_loc_13, _loc_9[_loc_5][1]);
			_loc_13 = Math.max(_loc_13, _loc_9[_loc_5][_loc_10]);
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[_loc_2][_loc_3] = _loc_13 - (_loc_9[_loc_2 + 1][_loc_3 + 1]);
					_loc_11 = Math.max(_loc_11, _loc_4[_loc_2][_loc_3]);
					_loc_3++;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_11, timeMatrix:_loc_4};
		}

		public function JFETP24()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP25 extends Sprite
	{
		final public static function jtpFill(param1:*, param2:*, param3:Array) : Array
		{
			var _loc_4:Number = param3[param1][param2];
			if(JFETP25.isNaN(param3[param1 - 1][param2]) || (param3[param1 - 1][param2]) > (_loc_4 + 1))
			{
				param3[param1 - 1][param2] = _loc_4 + 1;
				JFETP25.jtpFill(param1 - 1, param2, param3);
			}
			if(JFETP25.isNaN(param3[param1 + 1][param2]) || (param3[param1 + 1][param2]) > (_loc_4 + 1))
			{
				param3[param1 + 1][param2] = _loc_4 + 1;
				JFETP25.jtpFill(param1 + 1, param2, param3);
			}
			if(JFETP25.isNaN(param3[param1][param2 - 1]) || (param3[param1][param2 - 1]) > (_loc_4 + 1))
			{
				param3[param1][param2 - 1] = _loc_4 + 1;
				JFETP25.jtpFill(param1, param2 - 1, param3);
			}
			if(JFETP25.isNaN(param3[param1][param2 + 1]) || (param3[param1][param2 + 1]) > (_loc_4 + 1))
			{
				param3[param1][param2 + 1] = _loc_4 + 1;
				JFETP25.jtpFill(param1, param2 + 1, param3);
			}
			return param3;
		}

		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_13:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:Number = Math.ceil(_loc_5 / 2);
			var _loc_8:Array = [];
			var _loc_9:Number = 0;
			var _loc_10:int = 0;
			var _loc_11:int = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_4[_loc_2] = [];
				_loc_8[_loc_2] = [];
				_loc_13 = param1[_loc_2].length;
				_loc_10 = _loc_10 + _loc_13;
				_loc_9 = Math.max(_loc_9, _loc_13);
				_loc_2 = _loc_2 + 1;
			}
			_loc_8[_loc_5] = [];
			_loc_8[_loc_5 + 1] = [];
			var _loc_12:uint = Math.ceil(_loc_9 / 2);
			_loc_2 = 0;
			while(_loc_2 <= (_loc_5 + 1))
			{
				_loc_8[_loc_2][0] = -1;
				_loc_8[_loc_2][_loc_9 + 1] = -1;
				_loc_2 = _loc_2 + 1;
			}
			_loc_2 = 0;
			while(_loc_2 <= (_loc_9 + 1))
			{
				_loc_8[0][_loc_2] = -1;
				_loc_8[_loc_5 + 1][_loc_2] = -1;
				_loc_2 = _loc_2 + 1;
			}
			_loc_8[_loc_7][_loc_12] = 0;
			JFETP25.jtpFill(_loc_7, _loc_12, _loc_8);
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[_loc_2][_loc_3] = _loc_8[_loc_2 + 1][_loc_3 + 1];
					_loc_11 = Math.max(_loc_11, _loc_4[_loc_2][_loc_3]);
					_loc_3++;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_11, timeMatrix:_loc_4};
		}

		public function JFETP25()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP26 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[_loc_2][_loc_3] = _loc_2;
					_loc_3++;
				}
				_loc_7 = _loc_7 + _loc_6;
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP26()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP27 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[_loc_2][_loc_3] = (_loc_5 - _loc_2) - 1;
					_loc_3++;
				}
				_loc_7 = _loc_7 + _loc_6;
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP27()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP28 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[_loc_2][_loc_3] = Math.random() * _loc_5;
					_loc_3++;
				}
				_loc_7 = _loc_7 + _loc_6;
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP28()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP29 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:Number = Math.ceil(_loc_5 / 2);
			var _loc_8:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_7)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_4[(_loc_5 - _loc_2) - 1] = [];
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[_loc_2][_loc_3] = _loc_2;
					_loc_8 = Math.max(_loc_8, _loc_2 + 1);
					_loc_3 = _loc_3 - 1;
				}
				_loc_6 = (param1[(_loc_5 - _loc_2) - 1]).length;
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[(_loc_5 - _loc_2) - 1][_loc_3] = _loc_2;
					_loc_8 = Math.max(_loc_8, _loc_2 + 1);
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_8, timeMatrix:_loc_4};
		}

		public function JFETP29()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = _loc_5 - 1;
			while(_loc_2 >= 0)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_7 = _loc_7 + 1;
					_loc_4[_loc_2][_loc_3] = _loc_7;
					_loc_3++;
				}
				_loc_2 = _loc_2 - 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP3()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP30 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:Number = Math.ceil(_loc_5 / 2);
			var _loc_8:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_7)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_4[(_loc_5 - _loc_2) - 1] = [];
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[_loc_2][_loc_3] = (_loc_7 - _loc_2) - 1;
					_loc_8 = Math.max(_loc_8, _loc_7 - _loc_2);
					_loc_3 = _loc_3 - 1;
				}
				_loc_6 = (param1[(_loc_5 - _loc_2) - 1]).length;
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[(_loc_5 - _loc_2) - 1][_loc_3] = (_loc_7 - _loc_2) - 1;
					_loc_8 = Math.max(_loc_8, _loc_7 - _loc_2);
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_8, timeMatrix:_loc_4};
		}

		public function JFETP30()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D10 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width + textOwnerClip.height;
			return -param1 - param2;
			propOwner.getZPosition = _func_3122;
		}

		public function JFETP3D10()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D11 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width + textOwnerClip.height;
			return -(textOwnerClip.width - param1) + param2;
			propOwner.getZPosition = _func_3112;
		}

		public function JFETP3D11()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D12 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width + textOwnerClip.height;
			return -(textOwnerClip.height - param2) + param1;
			propOwner.getZPosition = _func_3117;
		}

		public function JFETP3D12()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D13 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width + textOwnerClip.height;
			return -(propOwner.teorecticSpace + param1) + param2;
			propOwner.getZPosition = _func_3155;
		}

		public function JFETP3D13()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D14 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width;
			return -Math.random() * propOwner.teorecticSpace;
			propOwner.getZPosition = _func_3160;
		}

		public function JFETP3D14()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D15 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = (Math.sqrt((textOwnerClip.width * textOwnerClip.width) + (textOwnerClip.height * textOwnerClip.height))) / 2;
			var _loc_6:Number = param1 - param3;
			var _loc_7:Number = param2 - param4;
			return -(Math.sqrt(Math.abs((propOwner.teorecticSpace * propOwner.teorecticSpace) - (_loc_6 * _loc_6) - (_loc_7 * _loc_7))));
			propOwner.getZPosition = _func_3145;
		}

		public function JFETP3D15()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D16 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = (Math.sqrt((textOwnerClip.width * textOwnerClip.width) + (textOwnerClip.height * textOwnerClip.height))) / 2;
			var _loc_6:Number = param1 - param3;
			var _loc_7:Number = param2 - param4;
			return (Math.sqrt(Math.abs((propOwner.teorecticSpace * propOwner.teorecticSpace) - (_loc_6 * _loc_6) - (_loc_7 * _loc_7)))) - propOwner.teorecticSpace;
			propOwner.getZPosition = _func_3150;
		}

		public function JFETP3D16()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D17 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.height;
			return param2 - propOwner.teorecticSpace;
			propOwner.getZPosition = _func_3135;
		}

		public function JFETP3D17()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D18 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.height;
			return -param2;
			propOwner.getZPosition = _func_3140;
		}

		public function JFETP3D18()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D19 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width;
			return -Math.random() * propOwner.teorecticSpace;
			propOwner.getZPosition = _func_3130;
		}

		public function JFETP3D19()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D2 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = (Math.sqrt((textOwnerClip.width * textOwnerClip.width) + (textOwnerClip.height * textOwnerClip.height))) / 2;
			var _loc_6:Number = param1 - param3;
			var _loc_7:Number = param2 - param4;
			return -(Math.sqrt(Math.abs((propOwner.teorecticSpace * propOwner.teorecticSpace) - (_loc_6 * _loc_6) - (_loc_7 * _loc_7))));
			propOwner.getZPosition = _func_3254;
		}

		public function JFETP3D2()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D3 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = (Math.sqrt((textOwnerClip.width * textOwnerClip.width) + (textOwnerClip.height * textOwnerClip.height))) / 2;
			var _loc_6:Number = param1 - param3;
			var _loc_7:Number = param2 - param4;
			return (Math.sqrt(Math.abs((propOwner.teorecticSpace * propOwner.teorecticSpace) - (_loc_6 * _loc_6) - (_loc_7 * _loc_7)))) - propOwner.teorecticSpace;
			propOwner.getZPosition = _func_3249;
		}

		public function JFETP3D3()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D4 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width / 2;
			var _loc_6:Number = param1 - param3;
			var _loc_7:Number = param2 - param4;
			var _loc_8:Number = propOwner.teorecticSpace;
			return (Math.sqrt((_loc_8 * _loc_8) - (_loc_6 * _loc_6))) - propOwner.teorecticSpace;
			propOwner.getZPosition = _func_3264;
		}

		public function JFETP3D4()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D5 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width / 2;
			var _loc_6:Number = param1 - param3;
			var _loc_7:Number = param2 - param4;
			var _loc_8:Number = propOwner.teorecticSpace;
			return -(Math.sqrt((_loc_8 * _loc_8) - (_loc_6 * _loc_6)));
			propOwner.getZPosition = _func_3259;
		}

		public function JFETP3D5()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D6 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width;
			return -param1;
			propOwner.getZPosition = _func_3186;
		}

		public function JFETP3D6()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D7 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.width;
			return param1 - propOwner.teorecticSpace;
			propOwner.getZPosition = _func_3177;
		}

		public function JFETP3D7()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D8 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.height;
			return param2 - propOwner.teorecticSpace;
			propOwner.getZPosition = _func_3204;
		}

		public function JFETP3D8()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP3D9 extends Sprite
	{
		final public static function fep(param1:Object, param2:Sprite) : void
		{
			var propOwner:Object = param1;
			var textOwnerClip:Sprite = param2;
			propOwner.teorecticSpace = textOwnerClip.height;
			return -param2;
			propOwner.getZPosition = _func_3195;
		}

		public function JFETP3D9()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP4 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = _loc_5 - 1;
			while(_loc_2 >= 0)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = _loc_6 - 1;
				while(_loc_3 > -1)
				{
					_loc_7 = _loc_7 + 1;
					_loc_4[_loc_2][_loc_3] = _loc_7;
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 - 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP4()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP5 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[_loc_2][_loc_3] = _loc_2 + _loc_3;
					_loc_7 = Math.max(_loc_7, _loc_2 + _loc_3);
					_loc_3++;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP5()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP6 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[_loc_2][_loc_3] = (_loc_2 + _loc_6) - _loc_3;
					_loc_7 = Math.max(_loc_7, (_loc_2 + _loc_6) - _loc_3);
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 + 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP6()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP7 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = _loc_5 - 1;
			while(_loc_2 >= 0)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_4[_loc_2][_loc_3] = (_loc_5 - _loc_2) + _loc_3;
					_loc_7 = Math.max(_loc_7, (_loc_5 - _loc_2) + _loc_3);
					_loc_3++;
				}
				_loc_2 = _loc_2 - 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP7()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP8 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:uint = 0;
			_loc_2 = _loc_5 - 1;
			while(_loc_2 >= 0)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = _loc_6 - 1;
				while(_loc_3 >= 0)
				{
					_loc_4[_loc_2][_loc_3] = (_loc_5 - _loc_2) + _loc_6 - _loc_3;
					_loc_7 = Math.max(_loc_7, (_loc_5 - _loc_2) + _loc_6 - _loc_3);
					_loc_3 = _loc_3 - 1;
				}
				_loc_2 = _loc_2 - 1;
			}
			return {maxItems:_loc_7, timeMatrix:_loc_4};
		}

		public function JFETP8()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.presets
{
	import flash.display.*;

	public class JFETP9 extends Sprite
	{
		final public static function fep(param1:Array) : Object
		{
			var _loc_2:* = undefined;
			var _loc_3:int = 0;
			var _loc_6:uint = 0;
			var _loc_8:uint = 0;
			var _loc_9:int = NaN;
			var _loc_10:* = undefined;
			var _loc_4:Array = [];
			var _loc_5:uint = param1.length;
			var _loc_7:Array = [];
			_loc_2 = 0;
			while(_loc_2 < _loc_5)
			{
				_loc_6 = param1[_loc_2].length;
				_loc_4[_loc_2] = [];
				_loc_3 = 0;
				while(_loc_3 < _loc_6)
				{
					_loc_7.push({i:_loc_2, j:_loc_3, id:_loc_7.length});
					_loc_3++;
				}
				_loc_2 = _loc_2 + 1;
			}
			_loc_8 = _loc_7.length;
			while(_loc_7.length != 0)
			{
				_loc_9 = _loc_7.length;
				_loc_10 = Math.floor(Math.random() * _loc_9);
				_loc_4[_loc_7[_loc_10].i][_loc_7[_loc_10].j] = _loc_9 - 1;
				_loc_7.splice(_loc_10, 1);
			}
			return {maxItems:_loc_8, timeMatrix:_loc_4};
		}

		public function JFETP9()
		{
			super();
		}
	}
}
package com.jumpeye.flashEff2.symbol.badTransmission
{
	public class CustomMotion extends Object
	{
		protected var _points:Array;
		protected var pLen:uint;

		public function CustomMotion()
		{
			var _loc_1:* = undefined;
			super();
			_points = [];
			_loc_1 = 0;
			while(_loc_1 < 30)
			{
				_points[_loc_1] = 1;
				_loc_1 = _loc_1 + 1;
			}
		}

		public function get points() : Array
		{
			return this._points;
		}

		public function set points(param1:Array) : void
		{
			if(param1 is Array)
			{
				this._points = param1;
				pLen = param1.length - 1;
			}
		}

		public function getValue(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:* = undefined;
			var _loc_6:uint = 0;
			if(param4 <= 0)
			{
				return NaN;
			}
			_loc_5 = param1 / param4;
			_loc_6 = Math.floor(this.pLen * _loc_5);
			return param2 + (this._points[_loc_6] * param3);
		}
	}
}
package com.jumpeye.flashEff2.symbol.badTransmission
{
	import com.jumpeye.Events.*;
	import com.jumpeye.core.*;
	import com.jumpeye.flashEff2.core.interfaces.*;
	import com.jumpeye.transitions.*;
	import flash.display.*;
	import flash.events.*;
	import flash.filters.*;
	import flash.geom.*;

	public class FESBadTransmission extends IFlashEffSymbol
	{
		protected var noiseBmp:Bitmap;
		protected var backBmp:Bitmap;
		private var _disturbance:Number = 50;
		protected var targetBmp:Bitmap;
		protected var isShow:Boolean = false;
		private var _maxNoise:Number = 0.500000;
		protected var overlayNoiseBmp:Bitmap;
		protected var screenNoiseBmp:Bitmap;
		protected var tweenObject:Object;
		protected var targetBD:BitmapData;
		protected var perlinBD:BitmapData;
		protected var effectOwner:Sprite;
		private var updateParams:Array;
		protected var noiseBD:BitmapData;
		protected var outputEffect:Sprite;

		public function FESBadTransmission(param1:JUIComponent = null)
		{
			isShow = false;
			_disturbance = 50;
			_maxNoise = 0.50;
			super();
			this.component = param1;
			init();
		}

		override public function show() : void
		{
			remove();
			startMotion(true);
		}

		protected function motionChange(...restArguments) : void
		{
			var _loc_2:* = undefined;
			var _loc_3:Object = null;
			var _loc_4:int = 0;
			var _loc_5:* = restArguments;
			for each(_loc_2 in _loc_5)
			{
				_loc_3 = _loc_5[_loc_2];
				_loc_3.target[_loc_3.prop] = _loc_3.getValue(this.tweenObject.pos, _loc_3.begin, _loc_3.change, this._tweenDuration);
			}
			if((Math.floor(this.tweenObject.pos * 100)) % 3 == 0)
			{
				this.outputEffect.filters = [createDisplacementMap()];
			}
			else
			{
				if((Math.floor(this.tweenObject.pos * 100)) + 1 % 3 == 0)
				{
					this.overlayNoiseBmp.bitmapData.noise(Math.random() * int.MAX_VALUE, 0, 255, 7, true);
				}
			}
		}

		protected function init() : void
		{
			_tweenDuration = 2;
			_tweenType = "Quadratic";
			_easeType = "easeOut";
		}

		protected function createDisplacementMap() : BitmapFilter
		{
			var _loc_1:BitmapData = null;
			var _loc_2:Point = null;
			var _loc_3:uint = 0;
			var _loc_4:uint = 0;
			var _loc_5:uint = 0;
			var _loc_6:int = NaN;
			var _loc_7:int = NaN;
			var _loc_8:String = null;
			var _loc_9:uint = 0;
			var _loc_10:int = NaN;
			_loc_1 = createPerlinBD();
			_loc_2 = new Point();
			_loc_3 = 1;
			_loc_4 = _loc_3;
			_loc_5 = _loc_4;
			_loc_6 = (this.disturbance / 2) + (Math.random() * this.disturbance) / 2;
			_loc_7 = 0.50;
			_loc_8 = DisplacementMapFilterMode.CLAMP;
			_loc_9 = 0;
			_loc_10 = 0;
			return new DisplacementMapFilter(_loc_1, _loc_2, _loc_4, _loc_5, _loc_6, _loc_7, _loc_8, _loc_9, _loc_10);
		}

		public function set maxNoise(param1:Number) : void
		{
			if(param1 > 1)
			{
				param1 = 1;
			}
			else
			{
				if(param1 < 0)
				{
					param1 = 0;
				}
			}
			_maxNoise = param1;
		}

		public function get maxNoise() : Number
		{
			return _maxNoise;
		}

		override public function hide() : void
		{
			remove();
			startMotion(false);
		}

		protected function waitAFrame(param1:Event)
		{
			this.component.removeEventListener(Event.ENTER_FRAME, this.waitAFrame);
			TweenLite.obfuscatedName0E12(this.tweenObject, this.tweenDuration, {pos:this.tweenDuration * Number(isShow), onUpdate:this.motionChange, onUpdateParams:updateParams, onComplete:this.motionFinish});
			this.motionChange.apply(this, updateParams);
			this.component.dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.TRANSITION_START));
		}

		override public function remove() : void
		{
			if(this.tweenObject != null)
			{
				TweenLite.killTweensOf(this.tweenObject, false);
				this.tweenObject = null;
			}
			if(this.component != null)
			{
				if(this.effectOwner != null)
				{
					if(this.component.targetOwner.contains(this.effectOwner))
					{
						this.component.targetOwner.removeChild(this.effectOwner);
					}
					this.effectOwner = null;
				}
				this.component.removeEventListener(Event.ENTER_FRAME, this.waitAFrame);
			}
			if(this.target != null)
			{
				this.target.alpha = 1;
			}
			if(perlinBD != null)
			{
				perlinBD.dispose();
			}
			perlinBD = null;
			if(targetBD != null)
			{
				targetBD.dispose();
			}
			targetBD = null;
			if(noiseBD != null)
			{
				noiseBD.dispose();
			}
			noiseBD = null;
			targetBmp = null;
			backBmp = null;
			noiseBmp = null;
			screenNoiseBmp = null;
			overlayNoiseBmp = null;
			updateParams = null;
		}

		protected function createPerlinBD() : BitmapData
		{
			var _loc_1:BitmapData = null;
			_loc_1 = new BitmapData(this.component.width, this.component.height, true, 16711680);
			_loc_1.perlinNoise(10, 1.50, 1, Math.random() * 1000, true, true, 3);
			return _loc_1;
		}

		public function set disturbance(param1:Number) : void
		{
			_disturbance = param1;
		}

		public function get disturbance() : Number
		{
			return _disturbance;
		}

		protected function startMotion(param1:Boolean) : void
		{
			var _loc_2:Rectangle = null;
			var _loc_3:Matrix = null;
			var _loc_4:Sprite = null;
			var _loc_5:Sprite = null;
			var _loc_6:Sprite = null;
			var _loc_7:CustomMotion = null;
			var _loc_8:CustomMotion = null;
			var _loc_9:CustomMotion = null;
			var _loc_10:CustomMotion = null;
			var _loc_11:CustomMotion = null;
			var _loc_12:CustomMotion = null;
			var _loc_13:CustomMotion = null;
			var _loc_14:CustomMotion = null;
			var _loc_15:CustomMotion = null;
			_loc_2 = this.target.getBounds(this.target);
			_loc_3 = new Matrix();
			this.isShow = param1;
			this.outputEffect = new Sprite();
			this.effectOwner = new Sprite();
			this.component.targetOwner.addChild(this.effectOwner);
			this.effectOwner.addChild(this.outputEffect);
			this.effectOwner.x = _loc_2.x * this.target.scaleX;
			this.effectOwner.y = _loc_2.y * this.target.scaleY;
			_loc_3.translate(-_loc_2.x, -_loc_2.y);
			_loc_3.scale(this.target.scaleX, this.target.scaleY);
			this.targetBD = new BitmapData(this.target.width, this.target.height, true, 16711680);
			this.targetBD.draw(this.target, _loc_3);
			this.targetBmp = new Bitmap(this.targetBD);
			this.backBmp = new Bitmap(this.targetBD.clone());
			this.backBmp.alpha = 0.34;
			this.outputEffect.addChild(this.backBmp);
			this.outputEffect.addChild(this.targetBmp);
			this.noiseBD = new BitmapData(this.target.width, this.target.height, false);
			this.noiseBD.noise(Math.random() * int.MAX_VALUE, 0, 255, 7, true);
			this.noiseBmp = new Bitmap(this.noiseBD);
			this.noiseBmp.alpha = 0.15 * this.maxNoise;
			this.outputEffect.addChild(this.noiseBmp);
			this.outputEffect.filters = [createDisplacementMap()];
			this.overlayNoiseBmp = new Bitmap(this.noiseBD.clone());
			this.overlayNoiseBmp.alpha = 0;
			this.effectOwner.addChild(this.overlayNoiseBmp);
			this.screenNoiseBmp = new Bitmap(this.noiseBD.clone());
			this.screenNoiseBmp.bitmapData.noise(Math.random() * int.MAX_VALUE, 0, 255, 7, true);
			this.screenNoiseBmp.blendMode = BlendMode.SCREEN;
			this.screenNoiseBmp.alpha = 0.10 * this.maxNoise;
			this.screenNoiseBmp.cacheAsBitmap = true;
			this.effectOwner.addChild(this.screenNoiseBmp);
			_loc_4 = new Sprite();
			_loc_4.graphics.beginFill(10066329, 0.32);
			_loc_4.graphics.drawRect(0, 0, this.target.width, 1);
			_loc_4.alpha = 0;
			_loc_5 = new Sprite();
			_loc_5.graphics.beginFill(10066329, 0.32);
			_loc_5.graphics.drawRect(0, 0, this.target.width, 1);
			_loc_6 = new Sprite();
			_loc_6.graphics.beginFill(10066329);
			_loc_6.graphics.drawRect(0, 0, this.target.width, this.target.height / 10);
			_loc_6.cacheAsBitmap = true;
			this.screenNoiseBmp.mask = _loc_6;
			this.effectOwner.addChild(_loc_4);
			this.effectOwner.addChild(_loc_5);
			this.effectOwner.addChild(_loc_6);
			this.tweenObject = {pos:this.tweenDuration * Number(!param1)};
			this.outputEffect.alpha = 0;
			this.effectOwner.alpha = 0;
			this.target.alpha = 0;
			_loc_7 = new CustomMotion();
			_loc_7.points = [0.07, 0.14, 0.21, 0.29, 0.36, 0.43, 0.50, 0.57, 0.64, 0.71, 0.79, 0.86, 0.93, 1, 0.12, 0.95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.45, 0, 0, 0, 0, 0, 0.57, 1, 1, 0.66, 0.23, 0, 0.45, 0.84, 0.42, 0, 0.01, 0.01, 0.01, 0.36, 0.62, 0.57, 0.52, 0.48, 0.37, 0.29, 0.24, 0.19, 0.15, 0.12, 0.09, 0.07, 0.05, 0.04, 0.03, 0.02, 0.01, 0, 0];
			_loc_8 = new CustomMotion();
			_loc_8.points = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0.02, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18, 0.21, 0.23, 0.26, 0.30, 0.34, 0.38, 0.43, 0.48, 0.54, 0.62, 0.70, 0.81, 1];
			_loc_9 = new CustomMotion();
			_loc_9.points = [0, 0.01, 0.02, 0.03, 0.04, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.18, 0.19, 0.20, 0.21, 0.22, 0.24, 0.25, 0.26, 0.27, 0.29, 0.30, 0.32, 0.33, 0.35, 0.37, 0.39, 0.41, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.30, 0.09, 0.06, 0, 0.04, 0.11, 0.18, 0.20, 0.20, 0.20, 0.19, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.11, 0.10, 0.09, 0.07, 0.06, 0.05, 0.03, 0.02, 0];
			_loc_10 = new CustomMotion();
			_loc_10.points = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.80, 0.80, 0, 0, 1, 0.95, 0.80, 0.58, 0.35, 0.16, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, -0.40, -0.40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
			_loc_11 = new CustomMotion();
			_loc_11.points = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.80, 0.80, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.95, 0.80, 0.58, 0.35, 0.16, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
			_loc_12 = new CustomMotion();
			_loc_12.points = [0, 0, 0, 0, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.30, 0.31, 0.32, 0.34, 0.35, 0.36, 0.38, 0.39, 0.41, 0.42, 0.44, 0.46, 0.47, 0.49, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.64, 0.66, 0.69, 0.71, 0.74, 0.77, 0.80, 0.84, 0.87, 0.91, 0.95, 1, 1, 0.45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
			_loc_13 = new CustomMotion();
			_loc_13.points = [0.90, 0.88, 0.84, 0.76, 0.68, 0.61, 0.54, 0.47, 0.41, 0.36, 0.30, 0.26, 0.21, 0.17, 0.14, 0.10, 0.08, 0.05, 0.03, 0.02, 0.01, 0, 0, 0.03, 0.07, 0.10, 0.13, 0.16, 0.19, 0.22, 0.25, 0.27, 0.29, 0.31, 0.33, 0.34, 0.35, 0.36, 0.36, 0.36, 0.35, 0.34, 0.32, 0.30, 0.28, 0.25, 0.23, 0.20, 0.17, 0.14, 0.11, 0.07, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
			_loc_14 = new CustomMotion();
			_loc_14.points = [0, 0, 0, 0, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.30, 0.31, 0.32, 0.34, 0.35, 0.36, 0.38, 0.39, 0.41, 0.42, 0.44, 0.46, 0.47, 0.49, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.64, 0.66, 0.69, 0.71, 0.74, 0.77, 0.80, 0.84, 0.87, 0.91, 0.95, 1, 0.81, 0.45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
			_loc_15 = new CustomMotion();
			_loc_15.points = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.03, 0.06, 0.11, 0.16, 0.22, 0.28, 0.34, 0.41, 0.48, 0.55, 0.61, 0.68, 0.74, 0.80, 0.85, 0.90, 0.94, 0.97, 0.99, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
			updateParams = [];
			updateParams.push({target:this.outputEffect, prop:"alpha", getValue:_loc_7.getValue, begin:0, change:1});
			updateParams.push({target:this.overlayNoiseBmp, prop:"alpha", getValue:_loc_9.getValue, begin:0, change:this.maxNoise});
			updateParams.push({target:this.backBmp, prop:"x", getValue:_loc_10.getValue, begin:this.outputEffect.x, change:-(Math.random() * this.disturbance) / 2 + (this.disturbance / 2)});
			updateParams.push({target:this.outputEffect, prop:"x", getValue:_loc_11.getValue, begin:this.outputEffect.x, change:this.disturbance / 5});
			updateParams.push({target:_loc_4, prop:"y", getValue:_loc_12.getValue, begin:_loc_4.y, change:this.target.height * 0.80});
			updateParams.push({target:_loc_4, prop:"alpha", getValue:_loc_14.getValue, begin:0, change:1});
			updateParams.push({target:_loc_5, prop:"y", getValue:_loc_13.getValue, begin:_loc_5.y, change:this.target.height});
			updateParams.push({target:_loc_5, prop:"alpha", getValue:_loc_13.getValue, begin:0, change:1});
			updateParams.push({target:_loc_6, prop:"y", getValue:_loc_15.getValue, begin:-2 * _loc_6.height, change:this.target.height + (2 * _loc_6.height)});
			updateParams.push({target:this.target, prop:"alpha", getValue:_loc_8.getValue, begin:0, change:1});
			updateParams.push({target:this.effectOwner, prop:"alpha", getValue:this.easeFunc, begin:0, change:1});
			this.component.addEventListener(Event.ENTER_FRAME, this.waitAFrame, false, 0, true);
		}

		protected function motionFinish() : void
		{
			remove();
			if(this.target != null)
			{
				this.target.visible = this.isShow;
			}
			this.component.dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.TRANSITION_END));
		}
	}
}
package com.jumpeye.flashEff2.symbol.desertIllusion
{
	import com.jumpeye.Events.*;
	import com.jumpeye.core.*;
	import com.jumpeye.flashEff2.core.interfaces.*;
	import com.jumpeye.flashEff2.utils.wavesEffect.*;
	import com.jumpeye.transitions.*;
	import flash.filters.*;

	public class FESDesertIllusion extends IFlashEffSymbol
	{
		private var _preset:Number;
		private var _wavesIntensity:Number = -48;
		private var transitionType:String;
		private var waveIntensity:*;
		private var maxWaveSize:*;
		private var _blurAmount:* = 3;
		private var t:*;
		private var _scaleAmount:Number = 1;
		private var radius:Number;
		private var owner:Object;
		private var bounds:Object;
		private var _smooth:Boolean = true;
		private var _blurQuality:Number = 1;
		private var _waveSize:Number = -48;

		public function FESDesertIllusion(param1:JUIComponent = null)
		{
			_blurQuality = 1;
			_wavesIntensity = 80;
			_waveSize = 80;
			_smooth = true;
			owner = {};
			_scaleAmount = 1;
			_blurAmount = 3;
			super();
			this.component = param1;
			init();
		}

		override public function show() : void
		{
			startTransition("show");
		}

		private function destroy() : void
		{
			if(!owner)
			{
				return;
			}
			TweenLite.killTweensOf(target, false);
			TweenLite.killTweensOf(owner["wave"], false);
			TweenLite.killTweensOf(owner.blurFilterTween, false);
			if(owner["wave"])
			{
				owner["wave"].bitmap.dispose();
			}
			if(target)
			{
				target.filters = [];
				target.alpha = 1;
			}
		}

		protected function init() : void
		{
			_tweenDuration = 1.50;
			_easeType = "easeNone";
			_tweenType = "Quadratic";
		}

		public function set waveSize(param1:Number) : void
		{
			this._waveSize = param1;
		}

		public function set blurQuality(param1:Number) : void
		{
			if(param1 < 0)
			{
				param1 = 0;
			}
			this._blurQuality = param1;
		}

		override public function hide() : void
		{
			startTransition("hide");
		}

		private function hdlChangeFilter(param1:Object) : void
		{
			var _loc_2:* = undefined;
			var _loc_3:* = undefined;
			var _loc_4:* = undefined;
			if(!target)
			{
				return;
			}
			_loc_2 = param1.value;
			_loc_3 = getBlurFilter(_loc_2);
			_loc_4 = target.filters;
			_loc_4.push(_loc_3);
			target.filters = _loc_4;
		}

		public function set smooth(param1:Boolean) : void
		{
			this._smooth = param1;
		}

		public function get scaleAmount() : Number
		{
			return this._scaleAmount;
		}

		private function hdlMotionFinished()
		{
			this.component.dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.TRANSITION_END));
		}

		public function set blurAmount(param1:Number) : void
		{
			this._blurAmount = param1;
		}

		private function transition()
		{
			var _loc_1:* = undefined;
			var _loc_2:* = undefined;
			var _loc_3:* = undefined;
			var _loc_4:* = undefined;
			var _loc_5:* = undefined;
			var _loc_6:* = undefined;
			var _loc_7:* = undefined;
			var _loc_8:* = undefined;
			var _loc_9:* = undefined;
			var _loc_10:* = undefined;
			this.target.visible = true;
			owner.scX = target.width / target.getBounds(target).width;
			owner.scY = target.height / target.getBounds(target).height;
			owner.origX = target.x + (target.width / 2);
			owner.origY = target.y + (target.height / 2);
			_loc_1 = transitionType == "show" ? 0 : 1;
			_loc_2 = transitionType == "show" ? 1 : 0;
			_loc_3 = transitionType == "show" ? maxWaveSize : 0;
			_loc_4 = transitionType == "show" ? 0 : maxWaveSize;
			owner["wave"] = new JWavesEffect(target, smooth, _blurQuality, component.width, component.height);
			owner["wave"].baseX = waveIntensity;
			owner["wave"].baseY = waveIntensity;
			target.alpha = _loc_1;
			TweenLite.obfuscatedName0E12(target, t, {alpha:_loc_2, delay:0, onComplete:hdlMotionFinished, ease:this.easeFunc, overwrite:false});
			owner["wave"].value = _loc_3;
			TweenLite.obfuscatedName0E12(owner["wave"], t, {value:_loc_4, delay:0, onComplete:hdlMotionFinished, ease:this.easeFunc, overwrite:false});
			_loc_5 = transitionType == "show" ? target.scaleX * scaleAmount : owner.scX;
			_loc_6 = transitionType == "show" ? owner.scX : target.scaleX * scaleAmount;
			_loc_7 = transitionType == "show" ? target.scaleY * scaleAmount : owner.scY;
			_loc_8 = transitionType == "show" ? owner.scY : target.scaleY * scaleAmount;
			_loc_9 = transitionType == "show" ? blurAmount : 0;
			_loc_10 = transitionType == "show" ? 0 : blurAmount;
			owner.blurFilterTween = {};
			owner.blurFilterTween.value = _loc_9;
			TweenLite.obfuscatedName0E12(owner.blurFilterTween, t, {value:_loc_10, delay:0, onUpdate:hdlChangeFilter, onUpdateParams:[owner.blurFilterTween], ease:this.easeFunc, overwrite:false});
			this.component.dispatchEvent(new FLASHEFFEvents(FLASHEFFEvents.TRANSITION_START));
		}

		override public function remove() : void
		{
			destroy();
		}

		public function get blurQuality() : Number
		{
			return this._blurQuality;
		}

		private function startTransition(param1:String)
		{
			var _loc_2:* = undefined;
			owner.gain = waveSize;
			owner.customParam1 = wavesIntensity;
			radius = (Math.abs(component.rotation) / 180) * Math.PI;
			transitionType = param1;
			maxWaveSize = owner.gain == "" || isNaN(Number(owner.gain)) ? 100 : owner.gain;
			maxWaveSize = Math.max(0, maxWaveSize);
			waveIntensity = owner.customParam1 == "" || isNaN(Number(owner.customParam1)) ? 100 : owner.customParam1;
			t = this._tweenDuration;
			bounds = target.getBounds(target);
			_loc_2 = target.getBounds(target.parent);
			owner["targetObj"] = {x:target.x, y:target.y, width:_loc_2.width * target.scaleX, height:_loc_2.height * target.scaleY, scaleX:target.scaleX, scaleY:target.scaleY, xMin:_loc_2.x, yMin:_loc_2.y};
			transition();
		}

		public function get blurAmount() : Number
		{
			return this._blurAmount;
		}

		public function get waveSize() : Number
		{
			return _waveSize;
		}

		public function set scaleAmount(param1:Number) : void
		{
			this._scaleAmount = param1;
		}

		public function get smooth() : Boolean
		{
			return this._smooth;
		}

		public function set preset(param1:Number) : void
		{
			this._preset = param1;
		}

		public function get wavesIntensity() : Number
		{
			return _wavesIntensity;
		}

		private function hdlScaleXChange()
		{
			this.component.targetOwner.x = owner.origX - (this.component.targetOwner.width / 2);
		}

		public function set wavesIntensity(param1:Number) : void
		{
			this._wavesIntensity = param1;
		}

		private function getBlurFilter(param1:*) : BlurFilter
		{
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			_loc_2 = param1;
			_loc_3 = param1;
			return new BlurFilter(_loc_2, _loc_3, _blurQuality);
		}

		public function get preset() : Number
		{
			return this._preset;
		}

		private function hdlScaleYChange()
		{
			this.component.targetOwner.y = owner.origY - (this.component.targetOwner.height / 2);
		}
	}
}
package com.jumpeye.flashEff2.text
{
	import flash.display.*;
	import flash.text.*;

	dynamic public class FeChar extends Sprite
	{
		private var _id:Number;
		private var _textField:TextField;
		private var _properties:Object;
		private var _bottomPosition:Number;
		private var _htmlText:String = "";
		private var _type:String = "FeChar";

		public function FeChar(param1:Number, param2:Number, param3:Object)
		{
			super();
			init();
			param3.text;
			this.text = param3.text || "";
			this.id = param3.id;
			this.x = param1;
			this.y = param2;
			this.properties = param3;
			this.textField.embedFonts = true;
		}

		public function get textField() : TextField
		{
			return _textField;
		}

		private function init()
		{
			this.textField = new TextField();
			this.textField.autoSize = TextFieldAutoSize.LEFT;
			this.textField.selectable = false;
			addChild(this.textField);
		}

		public function set text(param1:String) : void
		{
			this.textField.text = param1;
			_htmlText = param1;
		}

		public function get id() : Number
		{
			return this._id;
		}

		private function renewPositions()
		{
			this.y = (this.y + this.bottomPosition) - this.textField.getLineMetrics(0).ascent;
		}

		public function set textField(param1:TextField) : void
		{
			_textField = param1;
		}

		public function set bottomPosition(param1:Number) : void
		{
			_bottomPosition = param1;
		}

		public function applyTextFormat(param1:TextFormat) : void
		{
			param1.leading = 0;
			param1.leftMargin = 0;
			param1.rightMargin = 0;
			param1.letterSpacing = 0;
			param1.indent = 0;
			param1.blockIndent = 0;
			param1.align = "left";
			this.textField.setTextFormat(param1);
			if(this.textField.getTextFormat().italic == true)
			{
				this.textField.autoSize = TextFieldAutoSize.LEFT;
				this.textField.width = this.textField.width + (this.textField.height * 0.21);
				this.textField.autoSize = TextFieldAutoSize.NONE;
			}
			renewPositions();
		}

		public function get text() : String
		{
			return this.textField.text;
		}

		public function set htmlText(param1:String) : void
		{
			trace(param1);
			this.textField.htmlText = param1;
			_htmlText = param1;
		}

		public function get properties() : Object
		{
			return this._properties;
		}

		public function get bottomPosition() : Number
		{
			return _bottomPosition;
		}

		public function set properties(param1:Object) : void
		{
			this._properties = param1;
		}

		public function set id(param1:Number) : void
		{
			this._id = param1;
		}

		public function get htmlText() : String
		{
			return _htmlText;
		}

		public function get type() : String
		{
			return this._type;
		}
	}
}
package com.jumpeye.flashEff2.text
{
	import flash.utils.*;

	dynamic public class FeGroup extends FeTable
	{
		private var _type:String = "FeGroup";
		private var _id:Number;
		private var _text:String;
		private var _properties:Object;

		public function FeGroup(param1:Number, param2:Number, param3:Object)
		{
			super();
			init();
			this.x = param1 || 0;
			this.y = param2 || 0;
			this.text = param3.text;
			this.id = param3.id;
			this.properties = param3;
		}

		public function set properties(param1:Object) : void
		{
			this._properties = param1;
		}

		public function set text(param1:String) : void
		{
			this._text = param1;
		}

		public function get text() : String
		{
			return this._text;
		}

		override public function set childs(param1:Array) : void
		{
			var className:String = null;
			var classInstance:Class = null;
			var child:* = undefined;
			var arg:Array = param1;
			var len:uint = arg.length;
			var i:uint = 0;
			while(i < len)
			{
				className = arg[i].type;
				try
				{
					classInstance = getDefinitionByName("com.jumpeye.flashEff2.text." + className);
					child = new classInstance(arg[i].x, arg[i].y, arg[i]);
					addChild(child);
					this._childs.push(arg);
				}
				catch(e:*)
				{
					throw e;
				}
				i = i + 1;
			}
		}

		private function init()
		{
		}

		public function get properties() : Object
		{
			return this._properties;
		}

		public function set id(param1:Number) : void
		{
			this._id = param1;
		}

		override public function get childs() : Array
		{
			return super.childs;
		}

		override public function get type() : String
		{
			return this._type;
		}

		public function get id() : Number
		{
			return this._id;
		}
	}
}
package com.jumpeye.flashEff2.text
{
	import flash.display.*;
	import flash.utils.*;

	public class FeTable extends Sprite
	{
		private var tempChar:FeChar;
		private var tempGroup:FeGroup;
		private var _type:String = "FeTable";
		protected var _childs:Array;

		public function FeTable()
		{
			super();
			init();
			_childs = [];
		}

		public function cleanMe() : void
		{
			var _loc_2:* = undefined;
			var _loc_1:* = 0;
			while(_loc_1 < this._childs.length)
			{
				_loc_2 = this._childs[_loc_1];
				if(_loc_2.type != "FeChar")
				{
					_loc_2.cleanMe();
				}
				if(_loc_2.numChildren == 0)
				{
					removeChildAtIndex(_loc_1);
					break;
				}
				_loc_1 = _loc_1 + 1;
			}
		}

		public function pushChild(param1:Object) : Object
		{
			var classInstance:Class = null;
			var child:* = undefined;
			var arg:Object = param1;
			var className:String = arg.type;
			try
			{
				classInstance = getDefinitionByName("com.jumpeye.flashEff2.text." + className);
				child = new classInstance(arg.x, arg.y, arg);
				addChild(child);
				this._childs.push(child);
			}
			catch(e:*)
			{
				throw e;
			}
			return child;
		}

		public function removeChildAtIndex(param1:uint) : Object
		{
			removeChildAt(param1);
			return this._childs.splice(param1, 1)[0];
		}

		public function set childs(param1:Array) : void
		{
			var _loc_2:uint = param1.length;
			this._childs = [];
			var _loc_3:uint = 0;
			while(_loc_3 < _loc_2)
			{
				pushChild(param1[_loc_3]);
				_loc_3 = _loc_3 + 1;
			}
		}

		private function init()
		{
		}

		public function get childs() : Array
		{
			return _childs;
		}

		public function get type() : String
		{
			return this._type;
		}

		public function removeChilds() : void
		{
			var _loc_1:uint = this._childs.length;
			var _loc_2:uint = 0;
			while(_loc_2 < _loc_1)
			{
				if(this._childs[_loc_2].type == "FeGroup")
				{
					this._childs[_loc_2].removeChilds();
				}
				removeChild(this._childs[_loc_2]);
				_loc_2 = _loc_2 + 1;
			}
			this._childs = [];
		}
	}
}
package com.jumpeye.flashEff2.text.defaultFade
{
	import com.jumpeye.Events.*;
	import com.jumpeye.core.*;
	import com.jumpeye.flashEff2.core.interfaces.*;
	import flash.events.*;
	import flash.filters.*;
	import flash.utils.*;

	public class FeTDefaultFade extends IFlashEffSymbol
	{
		private var _partialStart:Number = 50;
		private var _partialBlurAmount:Number = 0;
		protected var delay:Number;
		protected var finishPos:uint;
		protected var time:Number = 0;
		protected var startPos:uint;
		protected var duration:Number = 1;
		protected var tweenTimer:Timer;
		protected var change:int;
		protected var isTimer:Boolean = false;

		public function FeTDefaultFade(param1:JUIComponent = null)
		{
			super();
			this.component = param1;
			_easeType = "easeOut";
			_tweenType = "Quadratic";
		}

		override public function remove() : void
		{
			if(this.tweenTimer != null)
			{
				this.tweenTimer.removeEventListener(TimerEvent.TIMER, timerHandler);
			}
			if(this.component != null)
			{
				this.component.removeEventListener(Event.ENTER_FRAME, enterFrame);
			}
			this.tweenTimer = null;
			if(this.target != null)
			{
				this.target.filters = [];
			}
		}

		protected function timerHandler(param1:TimerEvent) : void
		{
			this.time = this.time + this.delay;
			if(this.time > this.duration)
			{
				this.time = this.duration;
				this.tweenTimer.removeEventListener(TimerEvent.TIMER, timerHandler);
				this.isTimer = false;
			}
		}

		public function set partialStart(param1:Number) : void
		{
			this._partialStart = param1;
		}

		public function get partialBlurAmount() : Number
		{
			return this._partialBlurAmount;
		}

		protected function startTransition(param1:Boolean = true) : void
		{
			startPos = 1;
			finishPos = 0;
			if(param1 == true)
			{
				startPos = 0;
				finishPos = 1;
			}
			this.change = finishPos - startPos;
			this.target.alpha = startPos;
			this.duration = (this.tweenDuration * (1 - (this.partialStart / 100))) * 1000;
			if(duration <= 0)
			{
				duration = 1;
			}
			this.delay = 30;
			if(duration > (this.delay / 2))
			{
				this.tweenTimer = new Timer(delay);
				this.tweenTimer.addEventListener(TimerEvent.TIMER, timerHandler);
				this.time = 0;
				this.isTimer = true;
				this.tweenTimer.start();
				this.component.addEventListener(Event.ENTER_FRAME, enterFrame);
			}
			else
			{
				this.time = this.duration;
				enterFrame();
			}
		}

		public function set partialBlurAmount(param1:Number) : void
		{
			this._partialBlurAmount = param1;
		}

		public function get partialStart() : Number
		{
			return this._partialStart;
		}

		override public function hide() : void
		{
			if(this.target != null)
			{
				startTransition(false);
			}
		}

		protected function enterFrame(param1:Event = null) : void
		{
			var _loc_6:FLASHEFFEvents = null;
			var _loc_2:Number = (this.change * this.time) / this.duration + this.startPos;
			this.target.alpha = _loc_2;
			var _loc_3:Number = this.partialBlurAmount * (1 - _loc_2);
			var _loc_4:BitmapFilter = new BlurFilter(_loc_3, _loc_3, 2);
			var _loc_5:Array = new Array();
			_loc_5.push(_loc_4);
			this.target.filters = _loc_5;
			if(this.isTimer == false)
			{
				remove();
				_loc_6 = new FLASHEFFEvents("defaultPatternFinish");
				this.component.dispatchEvent(_loc_6);
			}
		}

		protected function motionFinish(param1:Event) : void
		{
		}

		override public function show() : void
		{
			if(this.target != null)
			{
				startTransition(true);
			}
		}
	}
}
package com.jumpeye.flashEff2.utils.wavesEffect
{
	import flash.display.*;
	import flash.filters.*;
	import flash.geom.*;

	public class JWavesEffect extends Sprite
	{
		public var bitmap:BitmapData;
		private var map:Bitmap;
		private var offsetPoints:Array;
		private var target:*;
		public var decrInterval:Number;
		private var blurQuality:Number;
		public var baseX:*;
		public var baseY:*;
		private var bounds:Object;
		private var __value:* = 0;
		public var fractalNoiseVal:*;
		private var hig:Number;
		public var intervalId:*;
		public var blurX:*;
		public var blurY:*;
		private var wid:*;

		public function JWavesEffect(param1:*, param2:Boolean, param3:Number, param4:Number = 0, param5:Number = 0)
		{
			__value = 0;
			super();
			blurQuality = param3;
			this.target = param1;
			this.map = new Bitmap();
			this.map.smoothing = param2;
			addChild(map);
			this.baseX = baseX || 100;
			this.baseY = baseY || 100;
			this.blurX = blurX || 0;
			this.blurY = blurY || 0;
			this.fractalNoiseVal = fractalNoiseVal || true;
			this.offsetPoints = new Array();
			this.offsetPoints[0] = new Point();
			this.wid = param4 == 0 ? param1.width : param4;
			this.hig = param5 == 0 ? param1.height : param5;
			this.wid = this.wid > 2880 ? 2880 : this.wid;
			this.hig = this.hig > 2880 ? 2880 : this.hig;
			this.bitmap = new BitmapData(this.wid + 2, this.hig + 2, true, 0);
		}

		public function get value() : Number
		{
			return __value;
		}

		private function setEffect() : void
		{
			var _loc_1:Array = null;
			initFilters(value);
			_loc_1 = this.target.filters;
			this.offsetPoints[0].x = this.value;
			this.offsetPoints[0].y = this.value;
			this.bitmap.perlinNoise(this.baseX, this.baseY, 2, 100, true, this.fractalNoiseVal, 7, true, this.offsetPoints);
			_loc_1[0].mapBitmap = this.bitmap;
			this.target.filters = _loc_1;
			map.bitmapData = bitmap;
		}

		private function getDisplacement(param1:*) : BitmapFilter
		{
			var _loc_2:Point = null;
			var _loc_3:DisplacementMapFilter = null;
			_loc_2 = new Point(0, 0);
			_loc_3 = new DisplacementMapFilter(this.bitmap, _loc_2, 1, 1, param1 / 3, param1 / 3, "color");
			return _loc_3;
		}

		private function initFilters(param1:*) : void
		{
			var _loc_2:* = undefined;
			var _loc_3:* = undefined;
			var _loc_4:Array = null;
			_loc_2 = getDisplacement(param1);
			_loc_3 = getBlur(0);
			_loc_4 = [];
			_loc_4.push(_loc_2);
			_loc_4.push(_loc_3);
			target.filters = [_loc_2];
		}

		private function getBlur(param1:*) : BitmapFilter
		{
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			_loc_2 = param1;
			_loc_3 = param1;
			return new BlurFilter(_loc_2, _loc_3, blurQuality);
		}

		public function set value(param1:Number) : void
		{
			__value = param1;
			setEffect();
		}
	}
}
package com.jumpeye.transitions
{
	import com.jumpeye.transitions.utils.tween.*;
	import flash.display.*;
	import flash.events.*;
	import flash.utils.*;

	public class TweenLite extends Object
	{
		private static var _timer:Timer = new Timer(2000);
		public static var defaultEase:Function = easeOut;
		public static const version:Number = 10.09;
		public static var plugins:Object = {};
		public static var currentTime:uint;
		public static var masterList:Dictionary = new Dictionary(false);
		public static var _reservedProps:Object = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, roundProps:1, onStart:1, onStartParams:1, persist:1, renderOnStart:1, proxiedEase:1, easeParams:1, yoyo:1, loop:1, onCompleteListener:1, onUpdateListener:1, onStartListener:1, orientToBezier:1, timeScale:1};
		public static var killDelayedCallsTo:Function = TweenLite.killTweensOf;
		public static var timingSprite:Sprite = new Sprite();
		public static var overwriteManager:Object;
		private static var _tlInitted:Boolean;
		public var delay:Number;
		protected var _hasUpdate:Boolean;
		protected var _hasPlugins:Boolean;
		public var started:Boolean;
		public var initted:Boolean;
		public var active:Boolean;
		public var startTime:Number;
		public var target:Object;
		public var duration:Number;
		public var gc:Boolean;
		public var vars:Object;
		public var ease:Function;
		public var tweens:Array;
		public var exposedVars:Object;
		public var combinedTimeScale:Number;
		public var initTime:Number;

		final public static function updateAll(param1:Event = null) : void
		{
			var _loc_2:uint = 0;
			var _loc_3:Dictionary = null;
			var _loc_4:Array = null;
			var _loc_5:int = 0;
			var _loc_6:TweenLite = null;
			var _loc_7:getTimer = TweenLite.getTimer();
			currentTime = _loc_7;
			_loc_2 = _loc_7;
			_loc_3 = masterList;
			var _loc_7:int = 0;
			var _loc_8:* = _loc_3;
			for each(_loc_4 in _loc_8)
			{
				_loc_5 = _loc_4.length - 1;
				while(_loc_5 > -1)
				{
					_loc_6 = _loc_4[_loc_5];
					if(_loc_6.active)
					{
						_loc_6.render(_loc_2);
					}
					else
					{
						if(_loc_6.gc)
						{
							_loc_4.splice(_loc_5, 1);
						}
						else
						{
							if(_loc_2 >= _loc_6.startTime)
							{
								_loc_6.activate();
								_loc_6.render(_loc_2);
							}
						}
					}
					_loc_5 = _loc_5 - 1;
				}
			}
		}

		final public static function removeTween(param1:TweenLite, param2:Boolean = true) : void
		{
			if(param1 != null)
			{
				if(param2)
				{
					param1.clear();
				}
				param1.enabled = false;
			}
		}

		final public static function killTweensOf(param1:Object = null, param2:Boolean = false) : void
		{
			var _loc_3:Array = null;
			var _loc_4:int = 0;
			var _loc_5:TweenLite = null;
			if(!(param1 == null) && param1 in masterList)
			{
				_loc_3 = masterList[param1];
				_loc_4 = _loc_3.length - 1;
				while(_loc_4 > -1)
				{
					_loc_5 = _loc_3[_loc_4];
					if(param2 && !_loc_5.gc)
					{
						_loc_5.complete(false);
					}
					_loc_5.clear();
					_loc_4 = _loc_4 - 1;
				}
			}
		}

		final public static function from(param1:Object, param2:Number, param3:Object) : TweenLite
		{
			param3.runBackwards = true;
			return new TweenLite(param1, param2, param3);
		}

		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return (param3 * param1) / param4 + param2;
		}

		final public static function killGarbage(param1:TimerEvent) : void
		{
			var _loc_2:Dictionary = null;
			var _loc_3:Object = null;
			_loc_2 = masterList;
			var _loc_4:int = 0;
			var _loc_5:* = _loc_2;
			for each(_loc_3 in _loc_5)
			{
				if(_loc_5[_loc_3].length == 0)
				{
				}
			}
		}

		final public static function delayedCall(param1:Number, param2:Function, param3:Array = null) : TweenLite
		{
			return new TweenLite(param2, 0, {delay:param1, onComplete:param2, onCompleteParams:param3, overwrite:0});
		}

		final public static function obfuscatedName0E12(param1:Object, param2:Number, param3:Object) : TweenLite
		{
			return new TweenLite(param1, param2, param3);
		}

		public function TweenLite(param1:Object, param2:Number, param3:Object)
		{
			var _loc_4:int = 0;
			super();
			if(param1 == null)
			{
				return;
			}
			if(!_tlInitted)
			{
				currentTime = getTimer();
				timingSprite.addEventListener(Event.ENTER_FRAME, updateAll, false, 0, true);
				if(overwriteManager == null)
				{
					overwriteManager = {mode:1, enabled:false};
				}
				_timer.addEventListener("timer", killGarbage, false, 0, true);
				_timer.start();
				_tlInitted = true;
			}
			this.vars = param3;
			this.duration = param2 || 0.00;
			this.delay = param3.delay || 0;
			this.combinedTimeScale = param3.timeScale || 1;
			this.active = Boolean(param2 == 0 && this.delay == 0);
			this.target = param1;
			if(typeof(this.vars.ease) != "function")
			{
				this.vars.ease = defaultEase;
			}
			if(this.vars.easeParams != null)
			{
				this.vars.proxiedEase = this.vars.ease;
				this.vars.ease = easeProxy;
			}
			this.ease = this.vars.ease;
			this.exposedVars = this.vars.isTV == true ? this.vars.exposedVars : this.vars;
			this.tweens = [];
			this.initTime = currentTime;
			this.startTime = this.initTime + (this.delay * 1000);
			_loc_4 = param3.overwrite == undefined || !overwriteManager.enabled && param3.overwrite > 1 ? overwriteManager.mode : int(param3.overwrite);
			if(!(param1 in masterList) || _loc_4 == 1)
			{
				masterList[param1] = [this];
			}
			else
			{
				masterList[param1].push(this);
			}
			if(!(this.vars.runBackwards == true && this.vars.renderOnStart == true) || this.active)
			{
				initTweenVals();
				if(this.active)
				{
					render(this.startTime + 1);
				}
				else
				{
					render(this.startTime);
				}
				if(!(this.exposedVars.visible == null) && this.vars.runBackwards == true && this.target is DisplayObject)
				{
					this.target.visible = this.exposedVars.visible;
				}
			}
		}

		public function set enabled(param1:Boolean) : void
		{
			var _loc_2:Array = null;
			var _loc_3:Boolean = false;
			var _loc_4:int = 0;
			if(param1)
			{
				if(!(this.target in masterList))
				{
					masterList[this.target] = [this];
				}
				else
				{
					_loc_2 = masterList[this.target];
					_loc_4 = _loc_2.length - 1;
					while(_loc_4 > -1)
					{
						if(_loc_2[_loc_4] == this)
						{
							_loc_3 = true;
							break;
						}
						_loc_4 = _loc_4 - 1;
					}
					if(!_loc_3)
					{
						_loc_2[_loc_2.length] = this;
					}
				}
			}
			this.gc = param1 ? false : true;
			if(this.gc)
			{
				this.active = false;
			}
			else
			{
				this.active = this.started;
			}
		}

		public function clear() : void
		{
			this.tweens = [];
			var _loc_1:Object = {ease:this.vars.ease};
			this.exposedVars = _loc_1;
			this.vars = _loc_1;
			_hasUpdate = false;
		}

		public function render(param1:uint) : void
		{
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			var _loc_4:TweenInfo = null;
			var _loc_5:int = 0;
			_loc_2 = (param1 - this.startTime) * 0.00;
			if(_loc_2 >= this.duration)
			{
				_loc_2 = this.duration;
				_loc_3 = this.ease == this.vars.ease || this.duration == 0.00 ? 1 : 0;
			}
			else
			{
				_loc_3 = ease(_loc_2, 0, 1, this.duration);
			}
			_loc_5 = this.tweens.length - 1;
			while(_loc_5 > -1)
			{
				_loc_4 = this.tweens[_loc_5];
				_loc_4.target[_loc_4.property] = _loc_4.start + (_loc_3 * _loc_4.change);
				_loc_5 = _loc_5 - 1;
			}
			if(_hasUpdate)
			{
				this.vars.onUpdate.apply(null, this.vars.onUpdateParams);
			}
			if(_loc_2 == this.duration)
			{
				complete(true);
			}
		}

		public function activate() : void
		{
			var _loc_1:Boolean = true;
			this.active = _loc_1;
			this.started = _loc_1;
			if(!this.initted)
			{
				initTweenVals();
			}
			if(this.vars.onStart != null)
			{
				this.vars.onStart.apply(null, this.vars.onStartParams);
			}
			if(this.duration == 0.00)
			{
				this.startTime = this.startTime - 1;
			}
		}

		public function get enabled() : Boolean
		{
			return this.gc ? false : true;
		}

		public function initTweenVals() : void
		{
			var _loc_1:String = null;
			var _loc_2:int = 0;
			var _loc_3:* = undefined;
			var _loc_4:TweenInfo = null;
			if(!(this.exposedVars.timeScale == undefined) && this.target is TweenLite)
			{
				this.tweens[this.tweens.length] = new TweenInfo(this.target, "timeScale", this.target.timeScale, this.exposedVars.timeScale - this.target.timeScale, "timeScale", false);
			}
			var _loc_5:int = 0;
			var _loc_6:* = this.exposedVars;
			for each(_loc_1 in _loc_6)
			{
				if(_loc_1 in _reservedProps)
				{
					continue;
				}
				if(_loc_1 in plugins)
				{
					_loc_3 = ();
					if((_loc_3.onInitTween(this.target, this.exposedVars[_loc_1], this)) == false)
					{
						this.tweens[this.tweens.length] = new TweenInfo(this.target, _loc_1, this.target[_loc_1], typeof(this.exposedVars[_loc_1]) == "number" ? this.exposedVars[_loc_1] - this.target[_loc_1] : Number(this.exposedVars[_loc_1]), _loc_1, false);
					}
					else
					{
						this.tweens[this.tweens.length] = new TweenInfo(_loc_3, "changeFactor", 0, 1, _loc_3.overwriteProps.length == 1 ? _loc_3.overwriteProps[0] : "_MULTIPLE_", true);
						_hasPlugins = true;
					}
					continue;
				}
				this.tweens[this.tweens.length] = new TweenInfo(this.target, _loc_1, this.target[_loc_1], typeof(this.exposedVars[_loc_1]) == "number" ? this.exposedVars[_loc_1] - this.target[_loc_1] : Number(this.exposedVars[_loc_1]), _loc_1, false);
			}
			if(this.vars.runBackwards == true)
			{
				_loc_2 = this.tweens.length - 1;
				while(_loc_2 > -1)
				{
					_loc_4 = this.tweens[_loc_2];
					_loc_4.start = _loc_4.start + _loc_4.change;
					_loc_4.change = -_loc_4.change;
					_loc_2 = _loc_2 - 1;
				}
			}
			if(this.vars.onUpdate != null)
			{
				_hasUpdate = true;
			}
			TweenLite.overwriteManager.enabled;
			if(TweenLite.overwriteManager.enabled && this.target in masterList)
			{
				overwriteManager.manageOverwrites(this, masterList[this.target]);
			}
			this.initted = true;
		}

		protected function easeProxy(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return this.vars.proxiedEase.apply(null, arguments.concat(this.vars.easeParams));
		}

		public function killVars(param1:Object) : void
		{
			if(overwriteManager.enabled)
			{
				overwriteManager.killVars(param1, this.exposedVars, this.tweens);
			}
		}

		public function complete(param1:Boolean = false) : void
		{
			var _loc_2:int = 0;
			if(!param1)
			{
				if(!this.initted)
				{
					initTweenVals();
				}
				this.startTime = currentTime - (this.duration * 1000) / this.combinedTimeScale;
				render(currentTime);
				return;
			}
			if(_hasPlugins)
			{
				_loc_2 = this.tweens.length - 1;
				while(_loc_2 > -1)
				{
					this.tweens[_loc_2].isPlugin;
					if(!(this.tweens[_loc_2].isPlugin && this.tweens[_loc_2].target.onComplete == null))
					{
						this.tweens[_loc_2].target.onComplete();
					}
					_loc_2 = _loc_2 - 1;
				}
			}
			if(this.vars.persist != true)
			{
				this.enabled = false;
			}
			if(this.vars.onComplete != null)
			{
				this.vars.onComplete.apply(null, this.vars.onCompleteParams);
			}
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Back extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number = 1.701580) : Number
		{
			var _loc_6:Number = (param1 / param4) - 1;
			param1 = _loc_6;
			return (param3 * (_loc_6 * param1) * (param5 + 1) * param1 + param5 + 1) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number = 1.701580) : Number
		{
			var _loc_6:Number = param1 / param4;
			param1 = _loc_6;
			return (param3 * _loc_6) * param1 * (param5 + 1) * param1 - param5 + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number = 1.701580) : Number
		{
			var _loc_6:int = param1 / (param4 / 2);
			param1 = _loc_6;
			if(_loc_6 < 1)
			{
				var _loc_6:Number = param5 * 1.52;
				param5 = _loc_6;
				return (param3 / 2) * (param1 * param1) * (_loc_6 + 1) * param1 - param5 + param2;
			}
			var _loc_6:int = param1 - 2;
			param1 = _loc_6;
			var _loc_6:Number = param5 * 1.52;
			param5 = _loc_6;
			return (param3 / 2) * (_loc_6 * param1) * (_loc_6 + 1) * param1 + param5 + 2 + param2;
		}

		public function Back()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Bounce extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = param1 / param4;
			param1 = _loc_5;
			if(_loc_5 < (1 / 2.75))
			{
				return (param3 * (7.56 * param1) * param1) + param2;
			}
			if(param1 < (2 / 2.75))
			{
				var _loc_5:Number = param1 - (1.50 / 2.75);
				param1 = _loc_5;
				return (param3 * (7.56 * _loc_5) * param1 + 0.75) + param2;
			}
			if(param1 < (2.50 / 2.75))
			{
				var _loc_5:Number = param1 - (2.25 / 2.75);
				param1 = _loc_5;
				return (param3 * (7.56 * _loc_5) * param1 + 0.94) + param2;
			}
			var _loc_5:Number = param1 - (2.63 / 2.75);
			param1 = _loc_5;
			return (param3 * (7.56 * _loc_5) * param1 + 0.98) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return (param3 - (Bounce.easeOut(param4 - param1, 0, param3, param4))) + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			if(param1 < (param4 / 2))
			{
				return (Bounce.easeIn(param1 * 2, 0, param3, param4)) * 0.50 + param2;
			}
			return (Bounce.easeOut((param1 * 2) - param4, 0, param3, param4)) * 0.50 + (param3 * 0.50) + param2;
		}

		public function Bounce()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Circular extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = (param1 / param4) - 1;
			param1 = _loc_5;
			return (param3 * (Math.sqrt(1 - (_loc_5 * param1)))) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = param1 / param4;
			param1 = _loc_5;
			return (-param3 * (Math.sqrt(1 - (_loc_5 * param1))) - 1) + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:int = param1 / (param4 / 2);
			param1 = _loc_5;
			if(_loc_5 < 1)
			{
				return (-param3 / 2) * (Math.sqrt(1 - (param1 * param1))) - 1 + param2;
			}
			var _loc_5:int = param1 - 2;
			param1 = _loc_5;
			return (param3 / 2) * (Math.sqrt(1 - (_loc_5 * param1))) + 1 + param2;
		}

		public function Circular()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Cubic extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = (param1 / param4) - 1;
			param1 = _loc_5;
			return (param3 * (_loc_5 * param1) * param1 + 1) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = param1 / param4;
			param1 = _loc_5;
			return (param3 * _loc_5) * param1 * param1 + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:int = param1 / (param4 / 2);
			param1 = _loc_5;
			if(_loc_5 < 1)
			{
				return (param3 / 2) * param1 * param1 * param1 + param2;
			}
			var _loc_5:int = param1 - 2;
			param1 = _loc_5;
			return (param3 / 2) * (_loc_5 * param1) * param1 + 2 + param2;
		}

		public function Cubic()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Elastic extends Object
	{
		private static const _2PI:Number = Math.PI * 2;

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number = 0, param6:Number = 0) : Number
		{
			var _loc_7:int = NaN;
			if(param1 == 0)
			{
				return param2;
			}
			var _loc_8:Number = param1 / param4;
			param1 = _loc_8;
			if(_loc_8 == 1)
			{
				return param2 + param3;
			}
			if(!param6)
			{
				param6 = param4 * 0.30;
			}
			if(!param5 || param5 < Math.abs(param3))
			{
				param5 = param3;
				_loc_7 = param6 / 4;
			}
			else
			{
				_loc_7 = (param6 / _2PI) * (Math.asin(param3 / param5));
			}
			var _loc_8:Number = param1 - 1;
			param1 = _loc_8;
			return (-(param5 * (Math.pow(2, 10 * _loc_8))) * (Math.sin((param1 * param4) - _loc_7 * _2PI / param6))) + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number = 0, param6:Number = 0) : Number
		{
			var _loc_7:int = NaN;
			if(param1 == 0)
			{
				return param2;
			}
			var _loc_8:int = param1 / (param4 / 2);
			param1 = _loc_8;
			if(_loc_8 == 2)
			{
				return param2 + param3;
			}
			if(!param6)
			{
				param6 = param4 * (0.30 * 1.50);
			}
			if(!param5 || param5 < Math.abs(param3))
			{
				param5 = param3;
				_loc_7 = param6 / 4;
			}
			else
			{
				_loc_7 = (param6 / _2PI) * (Math.asin(param3 / param5));
			}
			if(param1 < 1)
			{
				var _loc_8:Number = param1 - 1;
				param1 = _loc_8;
				return (-0.50 * (param5 * (Math.pow(2, 10 * _loc_8))) * (Math.sin((param1 * param4) - _loc_7 * _2PI / param6))) + param2;
			}
			var _loc_8:Number = param1 - 1;
			param1 = _loc_8;
			return (param5 * (Math.pow(2, -10 * _loc_8))) * (Math.sin((param1 * param4) - _loc_7 * _2PI / param6)) * 0.50 + param3 + param2;
		}

		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number = 0, param6:Number = 0) : Number
		{
			var _loc_7:int = NaN;
			if(param1 == 0)
			{
				return param2;
			}
			var _loc_8:Number = param1 / param4;
			param1 = _loc_8;
			if(_loc_8 == 1)
			{
				return param2 + param3;
			}
			if(!param6)
			{
				param6 = param4 * 0.30;
			}
			if(!param5 || param5 < Math.abs(param3))
			{
				param5 = param3;
				_loc_7 = param6 / 4;
			}
			else
			{
				_loc_7 = (param6 / _2PI) * (Math.asin(param3 / param5));
			}
			return (param5 * (Math.pow(2, -10 * param1))) * (Math.sin((param1 * param4) - _loc_7 * _2PI / param6)) + param3 + param2;
		}

		public function Elastic()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	import flash.display.*;

	public class ElasticEase extends Sprite
	{
		public function ElasticEase()
		{
			var _loc_1:* = undefined;
			super();
			_loc_1 = new Elastic();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Exponential extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return param1 == param4 ? param2 + param3 : (param3 * (-(Math.pow(2, (-10 * param1) / param4))) + 1) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return param1 == 0 ? param2 : (param3 * (Math.pow(2, 10 * (param1 / param4) - 1))) + param2 - (param3 * 0.00);
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			if(param1 == 0)
			{
				return param2;
			}
			if(param1 == param4)
			{
				return param2 + param3;
			}
			var _loc_5:int = param1 / (param4 / 2);
			param1 = _loc_5;
			if(_loc_5 < 1)
			{
				return (param3 / 2) * (Math.pow(2, 10 * (param1 - 1))) + param2;
			}
			param1 = param1 - 1;
			return (param3 / 2) * (-(Math.pow(2, -10 * (param1 - 1)))) + 2 + param2;
		}

		public function Exponential()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Linear extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return (param3 * param1) / param4 + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return (param3 * param1) / param4 + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return (param3 * param1) / param4 + param2;
		}

		final public static function easeNone(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return (param3 * param1) / param4 + param2;
		}

		public function Linear()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Quadratic extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = param1 / param4;
			param1 = _loc_5;
			return (-param3 * _loc_5) * (param1 - 2) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = param1 / param4;
			param1 = _loc_5;
			return (param3 * _loc_5) * param1 + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:int = param1 / (param4 / 2);
			param1 = _loc_5;
			if(_loc_5 < 1)
			{
				return (param3 / 2) * param1 * param1 + param2;
			}
			param1 = param1 - 1;
			return (-param3 / 2) * (param1 - 1) * (param1 - 2) - 1 + param2;
		}

		public function Quadratic()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Quartic extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = (param1 / param4) - 1;
			param1 = _loc_5;
			return (-param3 * (_loc_5 * param1) * param1 * param1 - 1) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = param1 / param4;
			param1 = _loc_5;
			return (param3 * _loc_5) * param1 * param1 * param1 + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:int = param1 / (param4 / 2);
			param1 = _loc_5;
			if(_loc_5 < 1)
			{
				return (param3 / 2) * param1 * param1 * param1 * param1 + param2;
			}
			var _loc_5:int = param1 - 2;
			param1 = _loc_5;
			return (-param3 / 2) * (_loc_5 * param1) * param1 * param1 - 2 + param2;
		}

		public function Quartic()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Quintic extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = (param1 / param4) - 1;
			param1 = _loc_5;
			return (param3 * (_loc_5 * param1) * param1 * param1 * param1 + 1) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = param1 / param4;
			param1 = _loc_5;
			return (param3 * _loc_5) * param1 * param1 * param1 * param1 + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:int = param1 / (param4 / 2);
			param1 = _loc_5;
			if(_loc_5 < 1)
			{
				return (param3 / 2) * param1 * param1 * param1 * param1 * param1 + param2;
			}
			var _loc_5:int = param1 - 2;
			param1 = _loc_5;
			return (param3 / 2) * (_loc_5 * param1) * param1 * param1 * param1 + 2 + param2;
		}

		public function Quintic()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Sine extends Object
	{
		private static const _HALF_PI:Number = Math.PI / 2;

		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return (param3 * (Math.sin((param1 / param4) * _HALF_PI))) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return (-param3 * (Math.cos((param1 / param4) * _HALF_PI))) + param3 + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			return (-param3 / 2) * (Math.cos((Math.PI * param1) / param4)) - 1 + param2;
		}

		public function Sine()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.easing
{
	public class Strong extends Object
	{
		final public static function easeOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = (param1 / param4) - 1;
			param1 = _loc_5;
			return (param3 * (_loc_5 * param1) * param1 * param1 * param1 + 1) + param2;
		}

		final public static function easeIn(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:Number = param1 / param4;
			param1 = _loc_5;
			return (param3 * _loc_5) * param1 * param1 * param1 * param1 + param2;
		}

		final public static function easeInOut(param1:Number, param2:Number, param3:Number, param4:Number) : Number
		{
			var _loc_5:int = param1 / (param4 / 2);
			param1 = _loc_5;
			if(_loc_5 < 1)
			{
				return (param3 / 2) * param1 * param1 * param1 * param1 * param1 + param2;
			}
			var _loc_5:int = param1 - 2;
			param1 = _loc_5;
			return (param3 / 2) * (_loc_5 * param1) * param1 * param1 * param1 + 2 + param2;
		}

		public function Strong()
		{
			super();
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.*;
	import flash.filters.*;

	public class BevelFilterPlugin extends FilterPlugin
	{
		public static const VERSION:Number = 1;
		public static const API:Number = 1;

		public function BevelFilterPlugin()
		{
			super();
			this.propName = "bevelFilter";
			this.overwriteProps = ["bevelFilter"];
		}

		override public function onInitTween(param1:Object, param2:*, param3:TweenLite) : Boolean
		{
			_target = param1;
			_type = BevelFilter;
			param2.quality;
			initFilter(param2, new BevelFilter(0, 0, 16777215, 0.50, 0, 0.50, 2, 2, 0, 2));
			return true;
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.*;
	import flash.filters.*;

	public class BlurFilterPlugin extends FilterPlugin
	{
		public static const VERSION:Number = 1;
		public static const API:Number = 1;

		public function BlurFilterPlugin()
		{
			super();
			this.propName = "blurFilter";
			this.overwriteProps = ["blurFilter"];
		}

		override public function onInitTween(param1:Object, param2:*, param3:TweenLite) : Boolean
		{
			_target = param1;
			_type = BlurFilter;
			param2.quality;
			initFilter(param2, new BlurFilter(0, 0, 2));
			return true;
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.*;
	import flash.filters.*;

	public class ColorMatrixFilterPlugin extends FilterPlugin
	{
		public static const API:Number = 1;
		public static var _lumG:Number = 0.72;
		public static var _lumR:Number = 0.21;
		public static const VERSION:Number = 1.01;
		public static var _idMatrix:Array = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
		public static var _lumB:Number = 0.07;
		protected var _matrix:Array;
		protected var _matrixTween:EndArrayPlugin;

		final public static function setSaturation(param1:Array, param2:Number) : Array
		{
			if(ColorMatrixFilterPlugin.isNaN(param2))
			{
				return param1;
			}
			var _loc_3:Number = 1 - param2;
			var _loc_4:Number = _loc_3 * _lumR;
			var _loc_5:Number = _loc_3 * _lumG;
			var _loc_6:Number = _loc_3 * _lumB;
			var _loc_7:Array = [_loc_4 + param2, _loc_5, _loc_6, 0, 0, _loc_4, _loc_5 + param2, _loc_6, 0, 0, _loc_4, _loc_5, _loc_6 + param2, 0, 0, 0, 0, 0, 1, 0];
			return ColorMatrixFilterPlugin.applyMatrix(_loc_7, param1);
		}

		final public static function setHue(param1:Array, param2:Number) : Array
		{
			if(ColorMatrixFilterPlugin.isNaN(param2))
			{
				return param1;
			}
			param2 = param2 * (Math.PI / 180);
			var _loc_3:Number = Math.cos(param2);
			var _loc_4:Number = Math.sin(param2);
			var _loc_5:Array = [(_lumR + (_loc_3 * (1 - _lumR))) + (_loc_4 * -_lumR), (_lumG + (_loc_3 * -_lumG)) + (_loc_4 * -_lumG), (_lumB + (_loc_3 * -_lumB)) + (_loc_4 * (1 - _lumB)), 0, 0, (_lumR + (_loc_3 * -_lumR)) + (_loc_4 * 0.14), (_lumG + (_loc_3 * (1 - _lumG))) + (_loc_4 * 0.14), (_lumB + (_loc_3 * -_lumB)) + (_loc_4 * -0.28), 0, 0, (_lumR + (_loc_3 * -_lumR)) + (_loc_4 * (-(1 - _lumR))), (_lumG + (_loc_3 * -_lumG)) + (_loc_4 * _lumG), (_lumB + (_loc_3 * (1 - _lumB))) + (_loc_4 * _lumB), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
			return ColorMatrixFilterPlugin.applyMatrix(_loc_5, param1);
		}

		final public static function setThreshold(param1:Array, param2:Number) : Array
		{
			if(ColorMatrixFilterPlugin.isNaN(param2))
			{
				return param1;
			}
			var _loc_3:Array = [_lumR * 256, _lumG * 256, _lumB * 256, 0, -256 * param2, _lumR * 256, _lumG * 256, _lumB * 256, 0, -256 * param2, _lumR * 256, _lumG * 256, _lumB * 256, 0, -256 * param2, 0, 0, 0, 1, 0];
			return ColorMatrixFilterPlugin.applyMatrix(_loc_3, param1);
		}

		final public static function applyMatrix(param1:Array, param2:Array) : Array
		{
			var _loc_6:int = 0;
			var _loc_7:int = 0;
			if((param1 is Array) || param2 is Array)
			{
				return param2;
			}
			var _loc_3:Array = [];
			var _loc_4:int = 0;
			var _loc_5:int = 0;
			_loc_6 = 0;
			while(_loc_6 < 4)
			{
				_loc_7 = 0;
				while(_loc_7 < 5)
				{
					if(_loc_7 == 4)
					{
						_loc_5 = param1[_loc_4 + 4];
					}
					else
					{
						_loc_5 = 0;
					}
					_loc_3[_loc_4 + _loc_7] = (param1[_loc_4] * param2[_loc_7]) + (param1[_loc_4 + 1]) * (param2[_loc_7 + 5]) + (param1[_loc_4 + 2]) * (param2[_loc_7 + 10]) + (param1[_loc_4 + 3]) * (param2[_loc_7 + 15]) + _loc_5;
					_loc_7++;
				}
				_loc_4 = _loc_4 + 5;
				_loc_6++;
			}
			return _loc_3;
		}

		final public static function colorize(param1:Array, param2:Number, param3:Number = 1) : Array
		{
			if(ColorMatrixFilterPlugin.isNaN(param2))
			{
				return param1;
			}
			if(ColorMatrixFilterPlugin.isNaN(param3))
			{
				param3 = 1;
			}
			var _loc_4:Number = (param2 >> 16) & 255 / 255;
			var _loc_5:Number = (param2 >> 8) & 255 / 255;
			var _loc_6:Number = (param2 & 255) / 255;
			var _loc_7:Number = 1 - param3;
			var _loc_8:Array = [_loc_7 + (param3 * _loc_4) * _lumR, (param3 * _loc_4) * _lumG, (param3 * _loc_4) * _lumB, 0, 0, (param3 * _loc_5) * _lumR, _loc_7 + (param3 * _loc_5) * _lumG, (param3 * _loc_5) * _lumB, 0, 0, (param3 * _loc_6) * _lumR, (param3 * _loc_6) * _lumG, _loc_7 + (param3 * _loc_6) * _lumB, 0, 0, 0, 0, 0, 1, 0];
			return ColorMatrixFilterPlugin.applyMatrix(_loc_8, param1);
		}

		final public static function setBrightness(param1:Array, param2:Number) : Array
		{
			if(ColorMatrixFilterPlugin.isNaN(param2))
			{
				return param1;
			}
			param2 = (param2 * 100) - 100;
			return ColorMatrixFilterPlugin.applyMatrix([1, 0, 0, 0, param2, 0, 1, 0, 0, param2, 0, 0, 1, 0, param2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], param1);
		}

		final public static function setContrast(param1:Array, param2:Number) : Array
		{
			if(ColorMatrixFilterPlugin.isNaN(param2))
			{
				return param1;
			}
			param2 = param2 + 0.01;
			var _loc_3:Array = [param2, 0, 0, 0, 128 * (1 - param2), 0, param2, 0, 0, 128 * (1 - param2), 0, 0, param2, 0, 128 * (1 - param2), 0, 0, 0, 1, 0];
			return ColorMatrixFilterPlugin.applyMatrix(_loc_3, param1);
		}

		public function ColorMatrixFilterPlugin()
		{
			super();
			this.propName = "colorMatrixFilter";
			this.overwriteProps = ["colorMatrixFilter"];
		}

		override public function onInitTween(param1:Object, param2:*, param3:TweenLite) : Boolean
		{
			_target = param1;
			_type = ColorMatrixFilter;
			var _loc_4:Object = param2;
			initFilter({}, new ColorMatrixFilter(_idMatrix.slice()));
			_matrix = ColorMatrixFilter(_filter).matrix;
			var _loc_5:Array = [];
			if(!(_loc_4.matrix == null) && _loc_4.matrix is Array)
			{
				_loc_5 = _loc_4.matrix;
			}
			else
			{
				if(_loc_4.relative == true)
				{
					_loc_5 = _matrix.slice();
				}
				else
				{
					_loc_5 = _idMatrix.slice();
				}
				_loc_5 = setBrightness(_loc_5, _loc_4.brightness);
				_loc_5 = setContrast(_loc_5, _loc_4.contrast);
				_loc_5 = setHue(_loc_5, _loc_4.hue);
				_loc_5 = setSaturation(_loc_5, _loc_4.saturation);
				_loc_5 = setThreshold(_loc_5, _loc_4.threshold);
				if(!isNaN(_loc_4.colorize))
				{
					_loc_5 = colorize(_loc_5, _loc_4.colorize, _loc_4.amount);
				}
			}
			_matrixTween = new EndArrayPlugin();
			_matrixTween.init(_matrix, _loc_5);
			return true;
		}

		override public function set changeFactor(param1:Number) : void
		{
			_matrixTween.changeFactor = param1;
			ColorMatrixFilter(_filter).matrix = _matrix;
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.*;
	import com.jumpeye.transitions.utils.tween.*;
	import fl.motion.*;
	import flash.display.*;
	import flash.geom.*;

	public class CustomTintPlugin extends TweenPlugin
	{
		public static var _props:Array = ["redMultiplier", "greenMultiplier", "blueMultiplier", "alphaMultiplier", "redOffset", "greenOffset", "blueOffset", "alphaOffset"];
		public static const VERSION:Number = 1;
		public static const API:Number = 1;
		protected var _color:Color;
		protected var _matrixTween:EndArrayPlugin;
		protected var _matrix:Array;
		protected var _target:DisplayObject;
		protected var _tintMultiplier:Number = 0;

		public function CustomTintPlugin()
		{
			super();
			this.propName = "customTint";
			this.overwriteProps = ["customTint"];
		}

		public function init(param1:DisplayObject, param2:Color) : void
		{
			var _loc_3:int = 0;
			var _loc_4:String = null;
			_target = param1;
			_loc_3 = _props.length - 1;
			while(_loc_3 > -1)
			{
				_loc_4 = _props[_loc_3];
				if(_color[_loc_4] != param2[_loc_4])
				{
					_tweens[_tweens.length] = new TweenInfo(_color, _loc_4, _color[_loc_4], param2[_loc_4] - _color[_loc_4], "customTint", true);
				}
				_loc_3 = _loc_3 - 1;
			}
		}

		override public function onInitTween(param1:Object, param2:*, param3:TweenLite) : Boolean
		{
			if(!(param1 is DisplayObject))
			{
				return false;
			}
			var _loc_4:Object = param2;
			var _loc_5:Color = new Color();
			var _loc_6:ColorTransform = param1.transform.colorTransform;
			_color = new Color(_loc_6.redMultiplier, _loc_6.greenMultiplier, _loc_6.blueMultiplier, _loc_6.alphaMultiplier, _loc_6.redOffset, _loc_6.greenOffset, _loc_6.blueOffset, _loc_6.alphaOffset);
			var _loc_7:Number = _loc_4.amount;
			if(isNaN(_loc_7))
			{
				_loc_7 = 1;
			}
			_loc_4.tintColor;
			_loc_5.setTint(_color.tintColor, _loc_7);
			init(param1, _loc_5);
			return true;
		}

		override public function set changeFactor(param1:Number) : void
		{
			updateTweens(param1);
			_target.transform.colorTransform = _color;
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.*;
	import flash.filters.*;

	public class DropShadowFilterPlugin extends FilterPlugin
	{
		public static const VERSION:Number = 1;
		public static const API:Number = 1;

		public function DropShadowFilterPlugin()
		{
			super();
			this.propName = "dropShadowFilter";
			this.overwriteProps = ["dropShadowFilter"];
		}

		override public function onInitTween(param1:Object, param2:*, param3:TweenLite) : Boolean
		{
			_target = param1;
			_type = DropShadowFilter;
			param2.quality;
			initFilter(param2, new DropShadowFilter(0, 45, 0, 0, 0, 0, 1, 2, param2.inner, param2.knockout, param2.hideObject));
			return true;
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.*;
	import com.jumpeye.transitions.utils.tween.*;

	public class EndArrayPlugin extends TweenPlugin
	{
		public static const VERSION:Number = 1.01;
		public static const API:Number = 1;
		protected var _a:Array;
		protected var _info:Array;

		public function EndArrayPlugin()
		{
			_info = [];
			super();
			this.propName = "endArray";
			this.overwriteProps = ["endArray"];
		}

		public function init(param1:Array, param2:Array) : void
		{
			_a = param1;
			var _loc_3:int = param2.length - 1;
			while(_loc_3 > -1)
			{
				if((param1[_loc_3] == param2[_loc_3]) && param1[_loc_3] == null)
				{
					_info[_info.length] = new ArrayTweenInfo(_loc_3, _a[_loc_3], param2[_loc_3] - _a[_loc_3]);
				}
				_loc_3 = _loc_3 - 1;
			}
		}

		override public function onInitTween(param1:Object, param2:*, param3:TweenLite) : Boolean
		{
			if((param1 is Array) || param2 is Array)
			{
				return false;
			}
			init(param1, param2);
			return true;
		}

		override public function set changeFactor(param1:Number) : void
		{
			var _loc_2:int = 0;
			var _loc_3:ArrayTweenInfo = null;
			var _loc_4:int = NaN;
			var _loc_5:int = 0;
			if(this.round)
			{
				_loc_2 = _info.length - 1;
				while(_loc_2 > -1)
				{
					_loc_3 = _info[_loc_2];
					_loc_4 = _loc_3.start + (_loc_3.change * param1);
					_loc_5 = _loc_4 < 0 ? -1 : 1;
					_a[_loc_3.index] = (_loc_4 % 1) * _loc_5 > 0.50 ? int(_loc_4) + _loc_5 : int(_loc_4);
					_loc_2 = _loc_2 - 1;
				}
			}
			else
			{
				_loc_2 = _info.length - 1;
				while(_loc_2 > -1)
				{
					_loc_3 = _info[_loc_2];
					_a[_loc_3.index] = _loc_3.start + (_loc_3.change * param1);
					_loc_2 = _loc_2 - 1;
				}
			}
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.utils.tween.*;
	import flash.filters.*;

	public class FilterPlugin extends TweenPlugin
	{
		public static const VERSION:Number = 1.03;
		public static const API:Number = 1;
		protected var _remove:Boolean;
		protected var _target:Object;
		protected var _index:int;
		protected var _filter:BitmapFilter;
		protected var _type:Class;

		public function FilterPlugin()
		{
			super();
		}

		public function onCompleteTween() : void
		{
			var _loc_1:int = 0;
			var _loc_2:Array = null;
			if(_remove)
			{
				_loc_2 = _target.filters;
				if(!(_loc_2[_index] is _type))
				{
					_loc_1 = _loc_2.length - 1;
					while(_loc_1 > -1)
					{
						if(_loc_2[_loc_1] is _type)
						{
							_loc_2.splice(_loc_1, 1);
							break;
						}
						_loc_1 = _loc_1 - 1;
					}
				}
				else
				{
					_loc_2.splice(_index, 1);
				}
				_target.filters = _loc_2;
			}
		}

		protected function initFilter(param1:Object, param2:BitmapFilter) : void
		{
			var _loc_4:String = null;
			var _loc_5:int = 0;
			var _loc_6:HexColorsPlugin = null;
			var _loc_3:Array = _target.filters;
			_index = -1;
			if(param1.index != null)
			{
				_index = param1.index;
			}
			else
			{
				_loc_5 = _loc_3.length - 1;
				while(_loc_5 > -1)
				{
					if(_loc_3[_loc_5] is _type)
					{
						_index = _loc_5;
						break;
					}
					_loc_5 = _loc_5 - 1;
				}
			}
			if(_index == -1 || _loc_3[_index] == null || param1.addFilter == true)
			{
				_index = param1.index != null ? param1.index : _loc_3.length;
				_loc_3[_index] = param2;
				_target.filters = _loc_3;
			}
			_filter = _loc_3[_index];
			_remove = Boolean(param1.remove == true);
			if(_remove)
			{
				this.onComplete = onCompleteTween;
			}
			var _loc_7:Object = param1.isTV == true ? param1.exposedVars : param1;
			var _loc_8:int = 0;
			var _loc_9:* = _loc_7;
			for each(_loc_4 in _loc_9)
			{
				if(!(_loc_4 in _filter) || _filter[_loc_4] == _loc_9[_loc_4] || _loc_4 == "remove" || _loc_4 == "index" || _loc_4 == "addFilter")
				{
					continue;
				}
				if(_loc_4 == "color" || _loc_4 == "highlightColor" || _loc_4 == "shadowColor")
				{
					_loc_6 = new HexColorsPlugin();
					_loc_6.initColor(_filter, _loc_4, _filter[_loc_4], _loc_9[_loc_4]);
					_tweens[_tweens.length] = new TweenInfo(_loc_6, "changeFactor", 0, 1, _loc_4, false);
					continue;
				}
				if(_loc_4 == "quality" || _loc_4 == "inner" || _loc_4 == "knockout" || _loc_4 == "hideObject")
				{
					_filter[_loc_4] = _loc_9[_loc_4];
					continue;
				}
				addTween(_filter, _loc_4, _filter[_loc_4], _loc_9[_loc_4], _loc_4);
			}
		}

		override public function set changeFactor(param1:Number) : void
		{
			var _loc_2:int = 0;
			var _loc_3:TweenInfo = null;
			var _loc_4:Array = _target.filters;
			_loc_2 = _tweens.length - 1;
			while(_loc_2 > -1)
			{
				_loc_3 = _tweens[_loc_2];
				_loc_3.target[_loc_3.property] = _loc_3.start + (_loc_3.change * param1);
				_loc_2 = _loc_2 - 1;
			}
			if(!(_loc_4[_index] is _type))
			{
				_index = _loc_4.length - 1;
				_loc_2 = _loc_4.length - 1;
				while(_loc_2 > -1)
				{
					if(_loc_4[_loc_2] is _type)
					{
						_index = _loc_2;
						break;
					}
					_loc_2 = _loc_2 - 1;
				}
			}
			_loc_4[_index] = _filter;
			_target.filters = _loc_4;
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.*;
	import flash.filters.*;

	public class GlowFilterPlugin extends FilterPlugin
	{
		public static const VERSION:Number = 1;
		public static const API:Number = 1;

		public function GlowFilterPlugin()
		{
			super();
			this.propName = "glowFilter";
			this.overwriteProps = ["glowFilter"];
		}

		override public function onInitTween(param1:Object, param2:*, param3:TweenLite) : Boolean
		{
			_target = param1;
			_type = GlowFilter;
			param2.quality;
			initFilter(param2, new GlowFilter(16777215, 0, 0, 0, 1, 2, param2.inner, param2.knockout));
			return true;
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.*;

	public class HexColorsPlugin extends TweenPlugin
	{
		public static const VERSION:Number = 1.01;
		public static const API:Number = 1;
		protected var _colors:Array;

		public function HexColorsPlugin()
		{
			super();
			this.propName = "hexColors";
			this.overwriteProps = [];
			_colors = [];
		}

		override public function killProps(param1:Object) : void
		{
			var _loc_2:int = _colors.length - 1;
			while(_loc_2 > -1)
			{
				if(param1[_colors[_loc_2][1]] != undefined)
				{
					_colors.splice(_loc_2, 1);
				}
				_loc_2 = _loc_2 - 1;
			}
			super.killProps(param1);
		}

		public function initColor(param1:Object, param2:String, param3:uint, param4:uint) : void
		{
			var _loc_5:int = NaN;
			var _loc_6:int = NaN;
			var _loc_7:int = NaN;
			if(param3 != param4)
			{
				_loc_5 = param3 >> 16;
				_loc_6 = (param3 >> 8) & 255;
				_loc_7 = param3 & 255;
				_colors[_colors.length] = [param1, param2, _loc_5, (param4 >> 16) - _loc_5, _loc_6, (param4 >> 8) & 255 - _loc_6, _loc_7, (param4 & 255) - _loc_7];
				this.overwriteProps[this.overwriteProps.length] = param2;
			}
		}

		override public function set changeFactor(param1:Number) : void
		{
			var _loc_2:int = 0;
			var _loc_3:Array = null;
			_loc_2 = _colors.length - 1;
			while(_loc_2 > -1)
			{
				_loc_3 = _colors[_loc_2];
				_loc_3[0][_loc_3[1]] = (_loc_3[2] + (param1 * _loc_3[3])) << 16 | (_loc_3[4] + (param1 * _loc_3[5])) << 8 | (_loc_3[6] + (param1 * _loc_3[7]));
				_loc_2 = _loc_2 - 1;
			}
		}

		override public function onInitTween(param1:Object, param2:*, param3:TweenLite) : Boolean
		{
			var _loc_4:String = null;
			var _loc_5:int = 0;
			var _loc_6:* = param2;
			for each(_loc_4 in _loc_6)
			{
				initColor(param1, _loc_4, uint(param1[_loc_4]), uint(_loc_6[_loc_4]));
			}
			return true;
		}
	}
}
package com.jumpeye.transitions.plugins
{
	import com.jumpeye.transitions.*;
	import com.jumpeye.transitions.utils.tween.*;

	public class TweenPlugin extends Object
	{
		public static const VERSION:Number = 1.03;
		public static const API:Number = 1;
		public var overwriteProps:Array;
		protected var _tweens:Array;
		public var propName:String;
		public var onComplete:Function;
		public var round:Boolean;
		protected var _changeFactor:Number = 0;

		final public static function activate(param1:Array) : Boolean
		{
			var _loc_2:int = 0;
			var _loc_3:Object = null;
			_loc_2 = param1.length - 1;
			while(_loc_2 > -1)
			{
				_loc_3 = ();
				TweenLite.plugins[_loc_3.propName] = param1[_loc_2];
				_loc_2 = _loc_2 - 1;
			}
			return true;
		}

		public function TweenPlugin()
		{
			_tweens = [];
			super();
		}

		protected function updateTweens(param1:Number) : void
		{
			var _loc_2:int = 0;
			var _loc_3:TweenInfo = null;
			var _loc_4:int = NaN;
			var _loc_5:int = 0;
			if(this.round)
			{
				_loc_2 = _tweens.length - 1;
				while(_loc_2 > -1)
				{
					_loc_3 = _tweens[_loc_2];
					_loc_4 = _loc_3.start + (_loc_3.change * param1);
					_loc_5 = _loc_4 < 0 ? -1 : 1;
					_loc_3.target[_loc_3.property] = (_loc_4 % 1) * _loc_5 > 0.50 ? int(_loc_4) + _loc_5 : int(_loc_4);
					_loc_2 = _loc_2 - 1;
				}
			}
			else
			{
				_loc_2 = _tweens.length - 1;
				while(_loc_2 > -1)
				{
					_loc_3 = _tweens[_loc_2];
					_loc_3.target[_loc_3.property] = _loc_3.start + (_loc_3.change * param1);
					_loc_2 = _loc_2 - 1;
				}
			}
		}

		public function set changeFactor(param1:Number) : void
		{
			updateTweens(param1);
			_changeFactor = param1;
		}

		protected function addTween(param1:Object, param2:String, param3:Number, param4:*, param5:String = null) : void
		{
			var _loc_6:int = NaN;
			if(param4 != null)
			{
				_loc_6 = typeof(param4) == "number" ? param4 - param3 : Number(param4);
				if(_loc_6 != 0)
				{
					_tweens[_tweens.length] = param5 || new TweenInfo(param1, param2, param3, _loc_6, param2, false);
				}
			}
		}

		public function killProps(param1:Object) : void
		{
			var _loc_2:int = 0;
			_loc_2 = this.overwriteProps.length - 1;
			while(_loc_2 > -1)
			{
				if(this.overwriteProps[_loc_2] in param1)
				{
					this.overwriteProps.splice(_loc_2, 1);
				}
				_loc_2 = _loc_2 - 1;
			}
			_loc_2 = _tweens.length - 1;
			while(_loc_2 > -1)
			{
				if(_tweens[_loc_2].name in param1)
				{
					_tweens.splice(_loc_2, 1);
				}
				_loc_2 = _loc_2 - 1;
			}
		}

		public function onInitTween(param1:Object, param2:*, param3:TweenLite) : Boolean
		{
			addTween(param1, this.propName, param1[this.propName], param2, this.propName);
			return true;
		}

		public function get changeFactor() : Number
		{
			return _changeFactor;
		}
	}
}
package com.jumpeye.transitions.utils.tween
{
	public class ArrayTweenInfo extends Object
	{
		public var change:Number;
		public var start:Number;
		public var index:uint;

		public function ArrayTweenInfo(param1:uint, param2:Number, param3:Number)
		{
			super();
			this.index = param1;
			this.start = param2;
			this.change = param3;
		}
	}
}
package com.jumpeye.transitions.utils.tween
{
	public class TweenInfo extends Object
	{
		public var start:Number;
		public var name:String;
		public var change:Number;
		public var target:Object;
		public var property:String;
		public var isPlugin:Boolean;

		public function TweenInfo(param1:Object, param2:String, param3:Number, param4:Number, param5:String, param6:Boolean)
		{
			super();
			this.target = param1;
			this.property = param2;
			this.start = param3;
			this.change = param4;
			this.name = param5;
			this.isPlugin = param6;
		}
	}
}
package fl.containers
{
	import fl.controls.*;
	import fl.core.*;
	import fl.events.*;
	import flash.display.*;
	import flash.events.*;
	import flash.geom.*;

	public class BaseScrollPane extends UIComponent
	{
		public static const SCROLL_BAR_STYLES:Object = {upArrowDisabledSkin:"upArrowDisabledSkin", upArrowDownSkin:"upArrowDownSkin", upArrowOverSkin:"upArrowOverSkin", upArrowUpSkin:"upArrowUpSkin", downArrowDisabledSkin:"downArrowDisabledSkin", downArrowDownSkin:"downArrowDownSkin", downArrowOverSkin:"downArrowOverSkin", downArrowUpSkin:"downArrowUpSkin", thumbDisabledSkin:"thumbDisabledSkin", thumbDownSkin:"thumbDownSkin", thumbOverSkin:"thumbOverSkin", thumbUpSkin:"thumbUpSkin", thumbIcon:"thumbIcon", trackDisabledSkin:"trackDisabledSkin", trackDownSkin:"trackDownSkin", trackOverSkin:"trackOverSkin", trackUpSkin:"trackUpSkin", repeatDelay:"repeatDelay", repeatInterval:"repeatInterval"};
		private static var defaultStyles:Object = {repeatDelay:500, repeatInterval:35, skin:"ScrollPane_upSkin", contentPadding:0, disabledAlpha:0.50};
		protected var defaultLineScrollSize:Number = 4;
		protected var _maxHorizontalScrollPosition:Number = 0;
		protected var vScrollBar:Boolean;
		protected var disabledOverlay:Shape;
		protected var hScrollBar:Boolean;
		protected var availableWidth:Number;
		protected var _verticalPageScrollSize:Number = 0;
		protected var vOffset:Number = 0;
		protected var _verticalScrollBar:ScrollBar;
		protected var useFixedHorizontalScrolling:Boolean = false;
		protected var contentWidth:Number = 0;
		protected var contentHeight:Number = 0;
		protected var _horizontalPageScrollSize:Number = 0;
		protected var background:DisplayObject;
		protected var _useBitmpScrolling:Boolean = false;
		protected var contentPadding:Number = 0;
		protected var availableHeight:Number;
		protected var _horizontalScrollBar:ScrollBar;
		protected var contentScrollRect:Rectangle;
		protected var _horizontalScrollPolicy:String;
		protected var _verticalScrollPolicy:String;

		final public static function getStyleDefinition() : Object
		{
			return BaseScrollPane.mergeStyles(defaultStyles, ScrollBar.getStyleDefinition());
		}

		public function BaseScrollPane()
		{
			contentWidth = 0;
			contentHeight = 0;
			contentPadding = 0;
			vOffset = 0;
			_maxHorizontalScrollPosition = 0;
			_horizontalPageScrollSize = 0;
			_verticalPageScrollSize = 0;
			defaultLineScrollSize = 4;
			useFixedHorizontalScrolling = false;
			_useBitmpScrolling = false;
			super();
		}

		protected function handleWheel(param1:MouseEvent) : void
		{
			if(!enabled || !_verticalScrollBar.visible || contentHeight <= availableHeight)
			{
				return;
			}
			_verticalScrollBar.scrollPosition = _verticalScrollBar.scrollPosition - (param1.delta * verticalLineScrollSize);
			setVerticalScrollPosition(_verticalScrollBar.scrollPosition);
			dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, param1.delta, horizontalScrollPosition));
		}

		public function get verticalScrollPosition() : Number
		{
			return _verticalScrollBar.scrollPosition;
		}

		protected function drawDisabledOverlay() : void
		{
			if(enabled)
			{
				if(contains(disabledOverlay))
				{
					removeChild(disabledOverlay);
				}
			}
			else
			{
				var _loc_1:contentPadding = contentPadding;
				disabledOverlay.y = _loc_1;
				disabledOverlay.x = _loc_1;
				disabledOverlay.width = availableWidth;
				disabledOverlay.height = availableHeight;
				disabledOverlay.alpha = getStyleValue("disabledAlpha");
				addChild(disabledOverlay);
			}
		}

		public function set verticalScrollPosition(param1:Number) : void
		{
			drawNow();
			_verticalScrollBar.scrollPosition = param1;
			setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
		}

		protected function setContentSize(param1:Number, param2:Number) : void
		{
			if(contentWidth == param1 || useFixedHorizontalScrolling && contentHeight == param2)
			{
				return;
			}
			contentWidth = param1;
			contentHeight = param2;
			invalidate(InvalidationType.SIZE);
		}

		public function get horizontalScrollPosition() : Number
		{
			return _horizontalScrollBar.scrollPosition;
		}

		public function get horizontalScrollBar() : ScrollBar
		{
			return _horizontalScrollBar;
		}

		override public function set enabled(param1:Boolean) : void
		{
			if(enabled == param1)
			{
				return;
			}
			_verticalScrollBar.enabled = param1;
			_horizontalScrollBar.enabled = param1;
		}

		public function get verticalLineScrollSize() : Number
		{
			return _verticalScrollBar.lineScrollSize;
		}

		public function get horizontalScrollPolicy() : String
		{
			return _horizontalScrollPolicy;
		}

		protected function calculateAvailableSize() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			var _loc_4:int = NaN;
			var _loc_5:int = NaN;
			_loc_1 = ScrollBar.WIDTH;
			var _loc_6:Number = Number(getStyleValue("contentPadding"));
			contentPadding = _loc_6;
			_loc_2 = _loc_6;
			_loc_3 = (height - (2 * _loc_2)) - vOffset;
			vScrollBar = _verticalScrollPolicy == ScrollPolicy.ON || _verticalScrollPolicy == ScrollPolicy.AUTO && contentHeight > _loc_3;
			_loc_4 = (width - (vScrollBar ? _loc_1 : 0)) - (2 * _loc_2);
			_loc_5 = useFixedHorizontalScrolling ? _maxHorizontalScrollPosition : contentWidth - _loc_4;
			hScrollBar = _horizontalScrollPolicy == ScrollPolicy.ON || _horizontalScrollPolicy == ScrollPolicy.AUTO && _loc_5 > 0;
			if(hScrollBar)
			{
				_loc_3 = _loc_3 - _loc_1;
			}
			if(hScrollBar && !vScrollBar && _verticalScrollPolicy == ScrollPolicy.AUTO && contentHeight > _loc_3)
			{
				vScrollBar = true;
				_loc_4 = _loc_4 - _loc_1;
			}
			availableHeight = _loc_3 + vOffset;
			availableWidth = _loc_4;
		}

		public function get maxVerticalScrollPosition() : Number
		{
			drawNow();
			return Math.max(0, contentHeight - availableHeight);
		}

		public function set horizontalScrollPosition(param1:Number) : void
		{
			drawNow();
			_horizontalScrollBar.scrollPosition = param1;
			setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
		}

		public function get horizontalLineScrollSize() : Number
		{
			return _horizontalScrollBar.lineScrollSize;
		}

		public function set verticalPageScrollSize(param1:Number) : void
		{
			_verticalPageScrollSize = param1;
			invalidate(InvalidationType.SIZE);
		}

		public function get verticalScrollPolicy() : String
		{
			return _verticalScrollPolicy;
		}

		protected function setHorizontalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
		}

		public function get useBitmapScrolling() : Boolean
		{
			return _useBitmpScrolling;
		}

		protected function handleScroll(param1:ScrollEvent) : void
		{
			if(param1.target == _verticalScrollBar)
			{
				setVerticalScrollPosition(param1.position);
			}
			else
			{
				setHorizontalScrollPosition(param1.position);
			}
		}

		public function set verticalLineScrollSize(param1:Number) : void
		{
			_verticalScrollBar.lineScrollSize = param1;
		}

		public function get verticalScrollBar() : ScrollBar
		{
			return _verticalScrollBar;
		}

		protected function setVerticalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
		}

		public function set horizontalPageScrollSize(param1:Number) : void
		{
			_horizontalPageScrollSize = param1;
			invalidate(InvalidationType.SIZE);
		}

		override protected function draw() : void
		{
			if(isInvalid(InvalidationType.STYLES))
			{
				setStyles();
				drawBackground();
				if(contentPadding != getStyleValue("contentPadding"))
				{
					invalidate(InvalidationType.SIZE, false);
				}
			}
			if(isInvalid(InvalidationType.SIZE, InvalidationType.STATE))
			{
				drawLayout();
			}
			updateChildren();
			super.draw();
		}

		public function set horizontalScrollPolicy(param1:String) : void
		{
			_horizontalScrollPolicy = param1;
			invalidate(InvalidationType.SIZE);
		}

		override protected function configUI() : void
		{
			var _loc_1:Graphics = null;
			super.configUI();
			contentScrollRect = new Rectangle(0, 0, 85, 85);
			_verticalScrollBar = new ScrollBar();
			_verticalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
			_verticalScrollBar.visible = false;
			_verticalScrollBar.lineScrollSize = defaultLineScrollSize;
			addChild(_verticalScrollBar);
			copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
			_horizontalScrollBar = new ScrollBar();
			_horizontalScrollBar.direction = ScrollBarDirection.HORIZONTAL;
			_horizontalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
			_horizontalScrollBar.visible = false;
			_horizontalScrollBar.lineScrollSize = defaultLineScrollSize;
			addChild(_horizontalScrollBar);
			copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
			disabledOverlay = new Shape();
			_loc_1 = disabledOverlay.graphics;
			_loc_1.beginFill(16777215);
			_loc_1.drawRect(0, 0, width, height);
			_loc_1.endFill();
			addEventListener(MouseEvent.MOUSE_WHEEL, handleWheel, false, 0, true);
		}

		protected function calculateContentWidth() : void
		{
		}

		public function get verticalPageScrollSize() : Number
		{
			if(isNaN(availableHeight))
			{
				drawNow();
			}
			return _verticalPageScrollSize == 0 && !isNaN(availableHeight) ? availableHeight : _verticalPageScrollSize;
		}

		protected function drawLayout() : void
		{
			calculateAvailableSize();
			calculateContentWidth();
			background.width = width;
			background.height = height;
			if(vScrollBar)
			{
				_verticalScrollBar.visible = true;
				_verticalScrollBar.x = (width - ScrollBar.WIDTH) - contentPadding;
				_verticalScrollBar.y = contentPadding;
				_verticalScrollBar.height = availableHeight;
			}
			else
			{
				_verticalScrollBar.visible = false;
			}
			_verticalScrollBar.setScrollProperties(availableHeight, 0, contentHeight - availableHeight, verticalPageScrollSize);
			setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
			if(hScrollBar)
			{
				_horizontalScrollBar.visible = true;
				_horizontalScrollBar.x = contentPadding;
				_horizontalScrollBar.y = (height - ScrollBar.WIDTH) - contentPadding;
				_horizontalScrollBar.width = availableWidth;
			}
			else
			{
				_horizontalScrollBar.visible = false;
			}
			_horizontalScrollBar.setScrollProperties(availableWidth, 0, useFixedHorizontalScrolling ? _maxHorizontalScrollPosition : contentWidth - availableWidth, horizontalPageScrollSize);
			setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
			drawDisabledOverlay();
		}

		protected function drawBackground() : void
		{
			var _loc_1:DisplayObject = null;
			_loc_1 = background;
			background = getDisplayObjectInstance(getStyleValue("skin"));
			background.width = width;
			background.height = height;
			addChildAt(background, 0);
			if((_loc_1 == null) && _loc_1 == background)
			{
				removeChild(_loc_1);
			}
		}

		public function set horizontalLineScrollSize(param1:Number) : void
		{
			_horizontalScrollBar.lineScrollSize = param1;
		}

		public function get horizontalPageScrollSize() : Number
		{
			if(isNaN(availableWidth))
			{
				drawNow();
			}
			return _horizontalPageScrollSize == 0 && !isNaN(availableWidth) ? availableWidth : _horizontalPageScrollSize;
		}

		public function get maxHorizontalScrollPosition() : Number
		{
			drawNow();
			return Math.max(0, contentWidth - availableWidth);
		}

		protected function setStyles() : void
		{
			copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
			copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
		}

		protected function updateChildren() : void
		{
			var _loc_1:enabled = enabled;
			_horizontalScrollBar.enabled = _loc_1;
			_verticalScrollBar.enabled = _loc_1;
			_verticalScrollBar.drawNow();
			_horizontalScrollBar.drawNow();
		}

		public function set verticalScrollPolicy(param1:String) : void
		{
			_verticalScrollPolicy = param1;
			invalidate(InvalidationType.SIZE);
		}

		public function set useBitmapScrolling(param1:Boolean) : void
		{
			_useBitmpScrolling = param1;
			invalidate(InvalidationType.STATE);
		}
	}
}
package fl.containers
{
	import fl.controls.*;
	import fl.core.*;
	import fl.events.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.net.*;
	import flash.system.*;
	import flash.ui.*;

	public class ScrollPane extends BaseScrollPane implements IFocusManagerComponent
	{
		private static var defaultStyles:Object = {upSkin:"ScrollPane_upSkin", disabledSkin:"ScrollPane_disabledSkin", focusRectSkin:null, focusRectPadding:null, contentPadding:0};
		protected var scrollDragHPos:Number;
		protected var loader:Loader;
		protected var yOffset:Number;
		protected var currentContent:Object;
		protected var xOffset:Number;
		protected var _source:Object = "";
		protected var scrollDragVPos:Number;
		protected var _scrollDrag:Boolean = false;
		protected var contentClip:Sprite;

		final public static function getStyleDefinition() : Object
		{
			return ScrollPane.mergeStyles(defaultStyles, BaseScrollPane.getStyleDefinition());
		}

		public function ScrollPane()
		{
			_source = "";
			_scrollDrag = false;
			super();
		}

		public function get source() : Object
		{
			return _source;
		}

		public function set source(param1:Object) : void
		{
			var _loc_2:* = undefined;
			clearContent();
			if(isLivePreview)
			{
				return;
			}
			_source = param1;
			if(_source == "" || _source == null)
			{
				return;
			}
			currentContent = getDisplayObjectInstance(param1);
			if(currentContent != null)
			{
				_loc_2 = contentClip.addChild(currentContent);
				dispatchEvent(new Event(Event.INIT));
				update();
			}
			else
			{
				load(new URLRequest(_source.toString()));
			}
		}

		public function get bytesLoaded() : Number
		{
			return loader == null || loader.contentLoaderInfo == null ? 0 : loader.contentLoaderInfo.bytesLoaded;
		}

		protected function doDrag(param1:MouseEvent) : void
		{
			var _loc_2:* = undefined;
			var _loc_3:* = undefined;
			_loc_2 = scrollDragVPos - (mouseY - yOffset);
			_verticalScrollBar.setScrollPosition(_loc_2);
			setVerticalScrollPosition(_verticalScrollBar.scrollPosition, true);
			_loc_3 = scrollDragHPos - (mouseX - xOffset);
			_horizontalScrollBar.setScrollPosition(_loc_3);
			setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, true);
		}

		override protected function keyDownHandler(param1:KeyboardEvent) : void
		{
			var _loc_2:int = 0;
			_loc_2 = calculateAvailableHeight();
			switch(param1.keyCode)
			{
			case Keyboard.DOWN:
				var _loc_4:* = this.verticalScrollPosition + 1;
				this.verticalScrollPosition = _loc_4;
				break;
			case Keyboard.UP:
				var _loc_4:* = this.verticalScrollPosition - 1;
				this.verticalScrollPosition = _loc_4;
				break;
			case Keyboard.RIGHT:
				var _loc_4:* = this.horizontalScrollPosition + 1;
				this.horizontalScrollPosition = _loc_4;
				break;
			case Keyboard.LEFT:
				var _loc_4:* = this.horizontalScrollPosition - 1;
				this.horizontalScrollPosition = _loc_4;
				break;
			case Keyboard.END:
				verticalScrollPosition = maxVerticalScrollPosition;
				break;
			case Keyboard.HOME:
				verticalScrollPosition = 0;
				break;
			case Keyboard.PAGE_UP:
				verticalScrollPosition = verticalScrollPosition - _loc_2;
				break;
			case Keyboard.PAGE_DOWN:
				verticalScrollPosition = verticalScrollPosition + _loc_2;
				break;
			default:
				break;
			}
		}

		protected function doStartDrag(param1:MouseEvent) : void
		{
			if(!enabled)
			{
				return;
			}
			xOffset = mouseX;
			yOffset = mouseY;
			scrollDragHPos = horizontalScrollPosition;
			scrollDragVPos = verticalScrollPosition;
			stage.addEventListener(MouseEvent.MOUSE_MOVE, doDrag, false, 0, true);
		}

		public function get content() : DisplayObject
		{
			var _loc_1:Object = null;
			_loc_1 = currentContent;
			if(_loc_1 is URLRequest)
			{
				_loc_1 = loader.content;
			}
			return _loc_1;
		}

		public function get percentLoaded() : Number
		{
			if(loader != null)
			{
				return Math.round((bytesLoaded / bytesTotal) * 100);
			}
			return 0;
		}

		protected function endDrag(param1:MouseEvent) : void
		{
			stage.removeEventListener(MouseEvent.MOUSE_MOVE, doDrag);
		}

		public function update() : void
		{
			var _loc_1:DisplayObject = null;
			_loc_1 = contentClip.getChildAt(0);
			setContentSize(_loc_1.width, _loc_1.height);
		}

		override protected function setHorizontalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
			var _loc_3:* = undefined;
			_loc_3 = contentClip.scrollRect;
			_loc_3.x = param1;
			contentClip.scrollRect = _loc_3;
		}

		public function refreshPane() : void
		{
			if(_source is URLRequest)
			{
				_source = _source.url;
			}
			source = _source;
		}

		protected function passEvent(param1:Event) : void
		{
			dispatchEvent(param1);
		}

		protected function calculateAvailableHeight() : Number
		{
			var _loc_1:int = NaN;
			_loc_1 = Number(getStyleValue("contentPadding"));
			return (height - (_loc_1 * 2)) - (_horizontalScrollPolicy == ScrollPolicy.ON || _horizontalScrollPolicy == ScrollPolicy.AUTO && _maxHorizontalScrollPosition > 0 ? 15 : 0);
		}

		public function load(param1:URLRequest, param2:LoaderContext = null) : void
		{
			if(param2 == null)
			{
				param2 = new LoaderContext(false, ApplicationDomain.currentDomain);
			}
			clearContent();
			initLoader();
			var _loc_3:URLRequest = param1;
			_source = _loc_3;
			currentContent = _loc_3;
			loader.load(_loc_3, param2);
		}

		override protected function handleScroll(param1:ScrollEvent) : void
		{
			passEvent(param1);
			super.handleScroll(param1);
		}

		override protected function setVerticalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
			var _loc_3:* = undefined;
			_loc_3 = contentClip.scrollRect;
			_loc_3.y = param1;
			contentClip.scrollRect = _loc_3;
		}

		protected function initLoader() : void
		{
			loader = new Loader();
			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, passEvent, false, 0, true);
			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onContentLoad, false, 0, true);
			loader.contentLoaderInfo.addEventListener(Event.INIT, passEvent, false, 0, true);
			contentClip.addChild(loader);
		}

		override protected function draw() : void
		{
			if(isInvalid(InvalidationType.STYLES))
			{
				drawBackground();
			}
			if(isInvalid(InvalidationType.STATE))
			{
				setScrollDrag();
			}
			super.draw();
		}

		override protected function configUI() : void
		{
			super.configUI();
			contentClip = new Sprite();
			addChild(contentClip);
			contentClip.scrollRect = contentScrollRect;
			_horizontalScrollPolicy = ScrollPolicy.AUTO;
			_verticalScrollPolicy = ScrollPolicy.AUTO;
		}

		public function set scrollDrag(param1:Boolean) : void
		{
			_scrollDrag = param1;
			invalidate(InvalidationType.STATE);
		}

		protected function clearContent() : void
		{
			if(contentClip.numChildren == 0)
			{
				return;
			}
			contentClip.removeChildAt(0);
			currentContent = null;
			if(loader != null)
			{
				try
				{
					loader.close();
				}
				catch(e:*)
				{
				}
				try
				{
					loader.unload();
				}
				catch(e:*)
				{
				}
				loader = null;
			}
		}

		override protected function drawLayout() : void
		{
			super.drawLayout();
			contentScrollRect = contentClip.scrollRect;
			contentScrollRect.width = availableWidth;
			contentScrollRect.height = availableHeight;
			contentClip.cacheAsBitmap = useBitmapScrolling;
			contentClip.scrollRect = contentScrollRect;
			var _loc_1:contentPadding = contentPadding;
			contentClip.y = _loc_1;
			contentClip.x = _loc_1;
		}

		override protected function drawBackground() : void
		{
			var _loc_1:DisplayObject = null;
			_loc_1 = background;
			background = getDisplayObjectInstance(getStyleValue(enabled ? "upSkin" : "disabledSkin"));
			background.width = width;
			background.height = height;
			addChildAt(background, 0);
			if((_loc_1 == null) && _loc_1 == background)
			{
				removeChild(_loc_1);
			}
		}

		public function get bytesTotal() : Number
		{
			return loader == null || loader.contentLoaderInfo == null ? 0 : loader.contentLoaderInfo.bytesTotal;
		}

		protected function onContentLoad(param1:Event) : void
		{
			var _loc_2:* = undefined;
			update();
			_loc_2 = calculateAvailableHeight();
			calculateAvailableSize();
			horizontalScrollBar.setScrollProperties(availableWidth, 0, useFixedHorizontalScrolling ? _maxHorizontalScrollPosition : contentWidth - availableWidth, availableWidth);
			verticalScrollBar.setScrollProperties(_loc_2, 0, contentHeight - _loc_2, _loc_2);
			passEvent(param1);
		}

		public function get scrollDrag() : Boolean
		{
			return _scrollDrag;
		}

		protected function setScrollDrag() : void
		{
			if(_scrollDrag)
			{
				contentClip.addEventListener(MouseEvent.MOUSE_DOWN, doStartDrag, false, 0, true);
				stage.addEventListener(MouseEvent.MOUSE_UP, endDrag, false, 0, true);
			}
			else
			{
				contentClip.removeEventListener(MouseEvent.MOUSE_DOWN, doStartDrag);
				stage.removeEventListener(MouseEvent.MOUSE_UP, endDrag);
				removeEventListener(MouseEvent.MOUSE_MOVE, doDrag);
			}
			contentClip.buttonMode = _scrollDrag;
		}
	}
}
package fl.controls
{
	import fl.core.*;
	import fl.events.*;
	import flash.display.*;
	import flash.events.*;
	import flash.utils.*;

	public class BaseButton extends UIComponent
	{
		private static var defaultStyles:Object = {upSkin:"Button_upSkin", downSkin:"Button_downSkin", overSkin:"Button_overSkin", disabledSkin:"Button_disabledSkin", selectedDisabledSkin:"Button_selectedDisabledSkin", selectedUpSkin:"Button_selectedUpSkin", selectedDownSkin:"Button_selectedDownSkin", selectedOverSkin:"Button_selectedOverSkin", focusRectSkin:null, focusRectPadding:null, repeatDelay:500, repeatInterval:35};
		protected var _selected:Boolean = false;
		private var unlockedMouseState:String;
		protected var pressTimer:Timer;
		protected var mouseState:String;
		protected var background:DisplayObject;
		private var _mouseStateLocked:Boolean = false;
		protected var _autoRepeat:Boolean = false;

		final public static function getStyleDefinition() : Object
		{
			return defaultStyles;
		}

		public function BaseButton()
		{
			_selected = false;
			_autoRepeat = false;
			_mouseStateLocked = false;
			super();
			buttonMode = true;
			mouseChildren = false;
			useHandCursor = false;
			setupMouseEvents();
			setMouseState("up");
			pressTimer = new Timer(1, 0);
			pressTimer.addEventListener(TimerEvent.TIMER, buttonDown, false, 0, true);
		}

		protected function endPress() : void
		{
			pressTimer.reset();
		}

		public function set mouseStateLocked(param1:Boolean) : void
		{
			_mouseStateLocked = param1;
			if(param1 == false)
			{
				setMouseState(unlockedMouseState);
			}
			else
			{
				unlockedMouseState = mouseState;
			}
		}

		public function get autoRepeat() : Boolean
		{
			return _autoRepeat;
		}

		public function set autoRepeat(param1:Boolean) : void
		{
			_autoRepeat = param1;
		}

		override public function set enabled(param1:Boolean) : void
		{
			mouseEnabled = param1;
		}

		public function get selected() : Boolean
		{
			return _selected;
		}

		protected function mouseEventHandler(param1:MouseEvent) : void
		{
			if(param1.type == MouseEvent.MOUSE_DOWN)
			{
				setMouseState("down");
				startPress();
			}
			else
			{
				if(param1.type == MouseEvent.ROLL_OVER || param1.type == MouseEvent.MOUSE_UP)
				{
					setMouseState("over");
					endPress();
				}
				else
				{
					if(param1.type == MouseEvent.ROLL_OUT)
					{
						setMouseState("up");
						endPress();
					}
				}
			}
		}

		public function setMouseState(param1:String) : void
		{
			if(_mouseStateLocked)
			{
				unlockedMouseState = param1;
				return;
			}
			if(mouseState == param1)
			{
				return;
			}
			mouseState = param1;
			invalidate(InvalidationType.STATE);
		}

		protected function startPress() : void
		{
			if(_autoRepeat)
			{
				pressTimer.delay = Number(getStyleValue("repeatDelay"));
				pressTimer.start();
			}
			dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
		}

		protected function buttonDown(param1:TimerEvent) : void
		{
			if(!_autoRepeat)
			{
				endPress();
				return;
			}
			if(pressTimer.currentCount == 1)
			{
				pressTimer.delay = Number(getStyleValue("repeatInterval"));
			}
			dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
		}

		public function set selected(param1:Boolean) : void
		{
			if(_selected == param1)
			{
				return;
			}
			_selected = param1;
			invalidate(InvalidationType.STATE);
		}

		override public function get enabled() : Boolean
		{
			return super.enabled;
		}

		override protected function draw() : void
		{
			if(isInvalid(InvalidationType.STYLES, InvalidationType.STATE))
			{
				drawBackground();
				invalidate(InvalidationType.SIZE, false);
			}
			if(isInvalid(InvalidationType.SIZE))
			{
				drawLayout();
			}
			super.draw();
		}

		protected function setupMouseEvents() : void
		{
			addEventListener(MouseEvent.ROLL_OVER, mouseEventHandler, false, 0, true);
			addEventListener(MouseEvent.MOUSE_DOWN, mouseEventHandler, false, 0, true);
			addEventListener(MouseEvent.MOUSE_UP, mouseEventHandler, false, 0, true);
			addEventListener(MouseEvent.ROLL_OUT, mouseEventHandler, false, 0, true);
		}

		protected function drawLayout() : void
		{
			background.width = width;
			background.height = height;
		}

		protected function drawBackground() : void
		{
			var _loc_1:String = null;
			var _loc_2:DisplayObject = null;
			_loc_1 = enabled ? mouseState : "disabled";
			if(selected)
			{
				_loc_1 = "selected" + (_loc_1.substr(0, 1)).toUpperCase() + _loc_1.substr(1);
			}
			_loc_1 = _loc_1 + "Skin";
			_loc_2 = background;
			background = getDisplayObjectInstance(getStyleValue(_loc_1));
			addChildAt(background, 0);
			if((_loc_2 == null) && _loc_2 == background)
			{
				removeChild(_loc_2);
			}
		}
	}
}
package fl.controls
{
	import fl.core.*;
	import fl.managers.*;
	import flash.display.*;

	public class Button extends LabelButton implements IFocusManagerComponent
	{
		private static var defaultStyles:Object = {emphasizedSkin:"Button_emphasizedSkin", emphasizedPadding:2};
		public static var createAccessibilityImplementation:Function;
		protected var emphasizedBorder:DisplayObject;
		protected var _emphasized:Boolean = false;

		final public static function getStyleDefinition() : Object
		{
			return UIComponent.mergeStyles(LabelButton.getStyleDefinition(), defaultStyles);
		}

		public function Button()
		{
			_emphasized = false;
			super();
		}

		override public function drawFocus(param1:Boolean) : void
		{
			var _loc_2:int = NaN;
			var _loc_3:* = undefined;
			super.drawFocus(param1);
			if(param1)
			{
				_loc_2 = Number(getStyleValue("emphasizedPadding"));
				if(_loc_2 < 0 || !_emphasized)
				{
					_loc_2 = 0;
				}
				_loc_3 = getStyleValue("focusRectPadding");
				_loc_3 = _loc_3 == null ? 2 : _loc_3;
				_loc_3 = _loc_3 + _loc_2;
				uiFocusRect.x = -_loc_3;
				uiFocusRect.y = -_loc_3;
				uiFocusRect.width = width + (_loc_3 * 2);
				uiFocusRect.height = height + (_loc_3 * 2);
			}
		}

		public function set emphasized(param1:Boolean) : void
		{
			_emphasized = param1;
			invalidate(InvalidationType.STYLES);
		}

		override protected function draw() : void
		{
			if(isInvalid(InvalidationType.STYLES) || isInvalid(InvalidationType.SIZE))
			{
				drawEmphasized();
			}
			super.draw();
			if(emphasizedBorder != null)
			{
				setChildIndex(emphasizedBorder, numChildren - 1);
			}
		}

		public function get emphasized() : Boolean
		{
			return _emphasized;
		}

		override protected function initializeAccessibility() : void
		{
			if(Button.createAccessibilityImplementation != null)
			{
				Button.createAccessibilityImplementation(this);
			}
		}

		protected function drawEmphasized() : void
		{
			var _loc_1:Object = null;
			var _loc_2:int = NaN;
			if(emphasizedBorder != null)
			{
				removeChild(emphasizedBorder);
			}
			emphasizedBorder = null;
			if(!_emphasized)
			{
				return;
			}
			_loc_1 = getStyleValue("emphasizedSkin");
			if(_loc_1 != null)
			{
				emphasizedBorder = getDisplayObjectInstance(_loc_1);
			}
			if(emphasizedBorder != null)
			{
				addChildAt(emphasizedBorder, 0);
				_loc_2 = Number(getStyleValue("emphasizedPadding"));
				var _loc_3:int = -_loc_2;
				emphasizedBorder.y = _loc_3;
				emphasizedBorder.x = _loc_3;
				emphasizedBorder.width = width + (_loc_2 * 2);
				emphasizedBorder.height = height + (_loc_2 * 2);
			}
		}
	}
}
package fl.controls
{
	public class ButtonLabelPlacement extends Object
	{
		public static const TOP:String = "top";
		public static const LEFT:String = "left";
		public static const BOTTOM:String = "bottom";
		public static const RIGHT:String = "right";

		public function ButtonLabelPlacement()
		{
			super();
		}
	}
}
package fl.controls
{
	import flash.display.*;

	public class CheckBox extends LabelButton
	{
		private static var defaultStyles:Object = {icon:null, upIcon:"CheckBox_upIcon", downIcon:"CheckBox_downIcon", overIcon:"CheckBox_overIcon", disabledIcon:"CheckBox_disabledIcon", selectedDisabledIcon:"CheckBox_selectedDisabledIcon", focusRectSkin:null, focusRectPadding:null, selectedUpIcon:"CheckBox_selectedUpIcon", selectedDownIcon:"CheckBox_selectedDownIcon", selectedOverIcon:"CheckBox_selectedOverIcon", textFormat:null, disabledTextFormat:null, embedFonts:null, textPadding:5};
		public static var createAccessibilityImplementation:Function;

		final public static function getStyleDefinition() : Object
		{
			return defaultStyles;
		}

		public function CheckBox()
		{
			super();
		}

		override public function drawFocus(param1:Boolean) : void
		{
			var _loc_2:int = NaN;
			super.drawFocus(param1);
			if(param1)
			{
				_loc_2 = Number(getStyleValue("focusRectPadding"));
				uiFocusRect.x = background.x - _loc_2;
				uiFocusRect.y = background.y - _loc_2;
				uiFocusRect.width = background.width + (_loc_2 << 1);
				uiFocusRect.height = background.height + (_loc_2 << 1);
			}
		}

		override public function get autoRepeat() : Boolean
		{
			return false;
		}

		override public function set autoRepeat(param1:Boolean) : void
		{
		}

		override public function set toggle(param1:Boolean) : void
		{
			throw new Error("Warning: You cannot change a CheckBox's toggle.");
		}

		override public function get toggle() : Boolean
		{
			return true;
		}

		override protected function configUI() : void
		{
			var _loc_1:Shape = null;
			var _loc_2:Graphics = null;
			super.configUI();
			_loc_1 = new Shape();
			_loc_2 = _loc_1.graphics;
			_loc_2.beginFill(0, 0);
			_loc_2.drawRect(0, 0, 100, 100);
			_loc_2.endFill();
			background = _loc_1;
			addChildAt(background, 0);
		}

		override protected function drawLayout() : void
		{
			var _loc_1:int = NaN;
			super.drawLayout();
			_loc_1 = Number(getStyleValue("textPadding"));
			switch(_labelPlacement)
			{
			case ButtonLabelPlacement.RIGHT:
				icon.x = _loc_1;
				textField.x = icon.x + (icon.width + _loc_1);
				background.width = (textField.x + textField.width) + _loc_1;
				background.height = (Math.max(textField.height, icon.height)) + (_loc_1 * 2);
				break;
			case ButtonLabelPlacement.LEFT:
				icon.x = (width - icon.width) - _loc_1;
				textField.x = (width - icon.width) - (_loc_1 * 2) - textField.width;
				background.width = (textField.width + icon.width) + (_loc_1 * 3);
				background.height = (Math.max(textField.height, icon.height)) + (_loc_1 * 2);
				break;
			case ButtonLabelPlacement.TOP:
				background.width = (Math.max(textField.width, icon.width)) + (_loc_1 * 2);
				background.height = (textField.height + icon.height) + (_loc_1 * 3);
				break;
			case ButtonLabelPlacement.BOTTOM:
				background.width = (Math.max(textField.width, icon.width)) + (_loc_1 * 2);
				background.height = (textField.height + icon.height) + (_loc_1 * 3);
				break;
			default:
				break;
			}
			background.x = Math.min(icon.x - _loc_1, textField.x - _loc_1);
			background.y = Math.min(icon.y - _loc_1, textField.y - _loc_1);
		}

		override protected function drawBackground() : void
		{
		}

		override protected function initializeAccessibility() : void
		{
			if(CheckBox.createAccessibilityImplementation != null)
			{
				CheckBox.createAccessibilityImplementation(this);
			}
		}
	}
}
package fl.controls
{
	import fl.controls.listClasses.*;
	import fl.core.*;
	import fl.data.*;
	import fl.events.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.geom.*;
	import flash.text.*;
	import flash.ui.*;

	public class ComboBox extends UIComponent implements IFocusManagerComponent
	{
		private static var defaultStyles:Object = {upSkin:"ComboBox_upSkin", downSkin:"ComboBox_downSkin", overSkin:"ComboBox_overSkin", disabledSkin:"ComboBox_disabledSkin", focusRectSkin:null, focusRectPadding:null, textFormat:null, disabledTextFormat:null, textPadding:3, buttonWidth:24, disabledAlpha:null, listSkin:null};
		public static var createAccessibilityImplementation:Function;
		public static const BACKGROUND_STYLES:Object = {overSkin:"overSkin", downSkin:"downSkin", upSkin:"upSkin", disabledSkin:"disabledSkin", repeatInterval:"repeatInterval"};
		public static const LIST_STYLES:Object = {upSkin:"comboListUpSkin", overSkin:"comboListOverSkin", downSkin:"comobListDownSkin", disabledSkin:"comboListDisabledSkin", downArrowDisabledSkin:"downArrowDisabledSkin", downArrowDownSkin:"downArrowDownSkin", downArrowOverSkin:"downArrowOverSkin", downArrowUpSkin:"downArrowUpSkin", upArrowDisabledSkin:"upArrowDisabledSkin", upArrowDownSkin:"upArrowDownSkin", upArrowOverSkin:"upArrowOverSkin", upArrowUpSkin:"upArrowUpSkin", thumbDisabledSkin:"thumbDisabledSkin", thumbDownSkin:"thumbDownSkin", thumbOverSkin:"thumbOverSkin", thumbUpSkin:"thumbUpSkin", thumbIcon:"thumbIcon", trackDisabledSkin:"trackDisabledSkin", trackDownSkin:"trackDownSkin", trackOverSkin:"trackOverSkin", trackUpSkin:"trackUpSkin", repeatDelay:"repeatDelay", repeatInterval:"repeatInterval", textFormat:"textFormat", disabledAlpha:"disabledAlpha", skin:"listSkin"};
		protected var _dropdownWidth:Number;
		protected var highlightedCell:int = -1;
		protected var _prompt:String;
		protected var isOpen:Boolean = false;
		protected var list:List;
		protected var _rowCount:uint = 5;
		protected var currentIndex:int;
		protected var isKeyDown:Boolean = false;
		protected var _labels:Array;
		protected var background:BaseButton;
		protected var inputField:TextInput;
		protected var listOverIndex:uint;
		protected var editableValue:String;
		protected var _editable:Boolean = false;
		private var collectionItemImport:SimpleCollectionItem;

		final public static function getStyleDefinition() : Object
		{
			return ComboBox.mergeStyles(defaultStyles, List.getStyleDefinition());
		}

		public function ComboBox()
		{
			_rowCount = 5;
			_editable = false;
			isOpen = false;
			highlightedCell = -1;
			isKeyDown = false;
			super();
		}

		protected function drawList() : void
		{
			list.rowCount = Math.max(0, Math.min(_rowCount, list.dataProvider.length));
		}

		public function set imeMode(param1:String) : void
		{
			inputField.imeMode = param1;
		}

		public function get dropdown() : List
		{
			return list;
		}

		public function get dropdownWidth() : Number
		{
			return list.width;
		}

		public function sortItemsOn(param1:String, param2:Object = null)
		{
			return list.sortItemsOn(param1, param2);
		}

		protected function onEnter(param1:ComponentEvent) : void
		{
			param1.stopPropagation();
		}

		public function removeItemAt(param1:uint) : void
		{
			list.removeItemAt(param1);
			invalidate(InvalidationType.DATA);
		}

		public function open() : void
		{
			currentIndex = selectedIndex;
			if(isOpen || length == 0)
			{
				return;
			}
			dispatchEvent(new Event(Event.OPEN));
			isOpen = true;
			addEventListener(Event.ENTER_FRAME, addCloseListener, false, 0, true);
			positionList();
			list.scrollToSelected();
			stage.addChild(list);
		}

		public function get selectedItem() : Object
		{
			return list.selectedItem;
		}

		public function set text(param1:String) : void
		{
			if(!editable)
			{
				return;
			}
			inputField.text = param1;
		}

		public function get labelField() : String
		{
			return list.labelField;
		}

		override protected function keyDownHandler(param1:KeyboardEvent) : void
		{
			var _loc_2:int = 0;
			var _loc_3:uint = 0;
			var _loc_4:int = NaN;
			var _loc_5:int = 0;
			isKeyDown = true;
			if(param1.ctrlKey)
			{
				switch(param1.keyCode)
				{
				case Keyboard.UP:
					if(highlightedCell > -1)
					{
						selectedIndex = highlightedCell;
						dispatchEvent(new Event(Event.CHANGE));
					}
					close();
					break;
				case Keyboard.DOWN:
					open();
					break;
				default:
					break;
				}
				return;
			}
			param1.stopPropagation();
			_loc_2 = Math.max((calculateAvailableHeight() / list.rowHeight) << 0, 1);
			_loc_3 = selectedIndex;
			_loc_4 = highlightedCell == -1 ? selectedIndex : highlightedCell;
			_loc_5 = -1;
			switch(param1.keyCode)
			{
			case Keyboard.SPACE:
				if(isOpen)
				{
					close();
				}
				else
				{
					open();
				}
				return;
			case Keyboard.ESCAPE:
				if(isOpen)
				{
					if(highlightedCell > -1)
					{
						selectedIndex = selectedIndex;
					}
					close();
				}
				return;
			case Keyboard.UP:
				_loc_5 = Math.max(0, _loc_4 - 1);
				break;
			case Keyboard.DOWN:
				_loc_5 = Math.min(length - 1, _loc_4 + 1);
				break;
			case Keyboard.PAGE_UP:
				_loc_5 = Math.max(_loc_4 - _loc_2, 0);
				break;
			case Keyboard.PAGE_DOWN:
				_loc_5 = Math.min(_loc_4 + _loc_2, length - 1);
				break;
			case Keyboard.HOME:
				_loc_5 = 0;
				break;
			case Keyboard.END:
				_loc_5 = length - 1;
				break;
			case Keyboard.ENTER:
				if(_editable && highlightedCell == -1)
				{
					editableValue = inputField.text;
					selectedIndex = -1;
				}
				else
				{
					if(isOpen && highlightedCell > -1)
					{
						editableValue = null;
						selectedIndex = highlightedCell;
						dispatchEvent(new Event(Event.CHANGE));
					}
				}
				dispatchEvent(new ComponentEvent(ComponentEvent.ENTER));
				close();
				return;
			default:
				if(editable)
				{
				}
				else
				{
					_loc_5 = list.getNextIndexAtLetter(String.fromCharCode(param1.keyCode), _loc_4);
					var _loc_6:* = param1.keyCode;
					_loc_5 = 0;
						if(_loc_5 > -1)
						{
							if(isOpen)
							{
								highlightCell(_loc_5);
								inputField.text = list.itemToLabel(getItemAt(_loc_5));
								break;
							}
							highlightCell();
							selectedIndex = _loc_5;
							dispatchEvent(new Event(Event.CHANGE));
						}
					}
				}
			}
		}

		public function set dropdownWidth(param1:Number) : void
		{
			_dropdownWidth = param1;
			invalidate(InvalidationType.SIZE);
		}

		public function get editable() : Boolean
		{
			return _editable;
		}

		override protected function focusInHandler(param1:FocusEvent) : void
		{
			super.focusInHandler(param1);
			if(editable)
			{
				stage.focus = inputField.textField;
			}
		}

		protected function onStageClick(param1:MouseEvent) : void
		{
			if(!isOpen)
			{
				return;
			}
			if(!contains(param1.target) && !list.contains(param1.target))
			{
				if(highlightedCell != -1)
				{
					selectedIndex = highlightedCell;
					dispatchEvent(new Event(Event.CHANGE));
				}
				close();
			}
		}

		protected function handleDataChange(param1:DataChangeEvent) : void
		{
			invalidate(InvalidationType.DATA);
		}

		override protected function keyUpHandler(param1:KeyboardEvent) : void
		{
			isKeyDown = false;
		}

		protected function onListItemUp(param1:MouseEvent) : void
		{
			var _loc_2:* = undefined;
			stage.removeEventListener(MouseEvent.MOUSE_UP, onListItemUp);
			if(!(param1.target is ICellRenderer) || !list.contains(param1.target))
			{
				return;
			}
			editableValue = null;
			_loc_2 = selectedIndex;
			selectedIndex = param1.target.listData.index;
			if(_loc_2 != selectedIndex)
			{
				dispatchEvent(new Event(Event.CHANGE));
			}
			close();
		}

		public function removeAll() : void
		{
			list.removeAll();
			inputField.text = "";
			invalidate(InvalidationType.DATA);
		}

		public function set selectedItem(param1:Object) : void
		{
			list.selectedItem = param1;
			invalidate(InvalidationType.SELECTED);
		}

		protected function highlightCell(param1:int = -1) : void
		{
			var _loc_2:ICellRenderer = null;
			if(highlightedCell > -1)
			{
				_loc_2 = list.itemToCellRenderer(getItemAt(highlightedCell));
				if(_loc_2 != null)
				{
					_loc_2.setMouseState("up");
				}
			}
			if(param1 == -1)
			{
				return;
			}
			list.scrollToIndex(param1);
			list.drawNow();
			_loc_2 = list.itemToCellRenderer(getItemAt(param1));
			if(_loc_2 != null)
			{
				_loc_2.setMouseState("over");
				highlightedCell = param1;
			}
		}

		public function itemToLabel(param1:Object) : String
		{
			if(param1 == null)
			{
				return "";
			}
			return list.itemToLabel(param1);
		}

		public function addItemAt(param1:Object, param2:uint) : void
		{
			list.addItemAt(param1, param2);
			invalidate(InvalidationType.DATA);
		}

		public function replaceItemAt(param1:Object, param2:uint) : Object
		{
			return list.replaceItemAt(param1, param2);
		}

		protected function showPrompt() : void
		{
			inputField.text = _prompt;
		}

		public function set rowCount(param1:uint) : void
		{
			_rowCount = param1;
			invalidate(InvalidationType.SIZE);
		}

		public function get restrict() : String
		{
			return inputField.restrict;
		}

		protected function setEmbedFonts() : void
		{
			var _loc_1:Object = null;
			_loc_1 = getStyleValue("embedFonts");
			if(_loc_1 != null)
			{
				inputField.textField.embedFonts = _loc_1;
			}
		}

		public function sortItems(...restArguments)
		{
			return list.sortItems.apply(list, restArguments);
		}

		public function set labelField(param1:String) : void
		{
			list.labelField = param1;
			invalidate(InvalidationType.DATA);
		}

		public function set editable(param1:Boolean) : void
		{
			_editable = param1;
			drawTextField();
		}

		public function set prompt(param1:String) : void
		{
			if(param1 == "")
			{
				_prompt = null;
			}
			else
			{
				_prompt = param1;
			}
			invalidate(InvalidationType.STATE);
		}

		public function get length() : int
		{
			return list.length;
		}

		protected function drawTextField() : void
		{
			inputField.setStyle("upSkin", "");
			inputField.setStyle("disabledSkin", "");
			inputField.enabled = enabled;
			inputField.editable = _editable;
			inputField.textField.selectable = enabled && _editable;
			var _loc_1:Boolean = enabled && _editable;
			inputField.mouseChildren = _loc_1;
			inputField.mouseEnabled = _loc_1;
			inputField.focusEnabled = false;
			if(_editable)
			{
				inputField.addEventListener(FocusEvent.FOCUS_IN, onInputFieldFocus, false, 0, true);
				inputField.addEventListener(FocusEvent.FOCUS_OUT, onInputFieldFocusOut, false, 0, true);
			}
			else
			{
				inputField.removeEventListener(FocusEvent.FOCUS_IN, onInputFieldFocus);
				inputField.removeEventListener(FocusEvent.FOCUS_OUT, onInputFieldFocusOut);
			}
		}

		protected function onInputFieldFocusOut(param1:FocusEvent) : void
		{
			inputField.removeEventListener(ComponentEvent.ENTER, onEnter);
			selectedIndex = selectedIndex;
		}

		protected function passEvent(param1:Event) : void
		{
			dispatchEvent(param1);
		}

		public function get imeMode() : String
		{
			return inputField.imeMode;
		}

		public function get labelFunction() : Function
		{
			return list.labelFunction;
		}

		protected function calculateAvailableHeight() : Number
		{
			var _loc_1:int = NaN;
			_loc_1 = Number(getStyleValue("contentPadding"));
			return list.height - (_loc_1 * 2);
		}

		public function get selectedIndex() : int
		{
			return list.selectedIndex;
		}

		override protected function focusOutHandler(param1:FocusEvent) : void
		{
			isKeyDown = false;
			if(isOpen)
			{
				if(!param1.relatedObject || !list.contains(param1.relatedObject))
				{
					if((highlightedCell == -1) && highlightedCell == selectedIndex)
					{
						selectedIndex = highlightedCell;
						dispatchEvent(new Event(Event.CHANGE));
					}
					close();
				}
			}
			super.focusOutHandler(param1);
		}

		public function get selectedLabel() : String
		{
			if(editableValue != null)
			{
				return editableValue;
			}
			if(selectedIndex == -1)
			{
				return null;
			}
			return itemToLabel(selectedItem);
		}

		public function get text() : String
		{
			return inputField.text;
		}

		protected function onListChange(param1:Event) : void
		{
			editableValue = null;
			dispatchEvent(param1);
			invalidate(InvalidationType.SELECTED);
			if(isKeyDown)
			{
				return;
			}
			close();
		}

		protected function onToggleListVisibility(param1:MouseEvent) : void
		{
			param1.stopPropagation();
			dispatchEvent(param1);
			if(isOpen)
			{
				close();
			}
			else
			{
				open();
				stage.addEventListener(MouseEvent.MOUSE_UP, onListItemUp, false, 0, true);
			}
		}

		override protected function draw() : void
		{
			var _loc_1:* = undefined;
			_loc_1 = selectedIndex;
			if(!(_loc_1 == -1 && prompt == null) || editable || length == 0)
			{
				_loc_1 = Math.max(-1, Math.min(_loc_1, length - 1));
			}
			else
			{
				editableValue = null;
				_loc_1 = Math.max(0, Math.min(_loc_1, length - 1));
			}
			if(list.selectedIndex != _loc_1)
			{
				list.selectedIndex = _loc_1;
				invalidate(InvalidationType.SELECTED, false);
			}
			if(isInvalid(InvalidationType.STYLES))
			{
				setStyles();
				setEmbedFonts();
				invalidate(InvalidationType.SIZE, false);
			}
			if(isInvalid(InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.STATE))
			{
				drawTextFormat();
				drawLayout();
				invalidate(InvalidationType.DATA);
			}
			if(isInvalid(InvalidationType.DATA))
			{
				drawList();
				invalidate(InvalidationType.SELECTED, true);
			}
			if(isInvalid(InvalidationType.SELECTED))
			{
				if(!(_loc_1 == -1 && editableValue == null))
				{
					inputField.text = editableValue;
				}
				else
				{
					if(_loc_1 > -1)
					{
						if(length > 0)
						{
							inputField.horizontalScrollPosition = 0;
							inputField.text = itemToLabel(list.selectedItem);
						}
					}
					else
					{
						if(!(_loc_1 == -1 && _prompt == null))
						{
							showPrompt();
						}
						else
						{
							inputField.text = "";
						}
					}
				}
				if(editable && selectedIndex > -1 && stage.focus == inputField.textField)
				{
					inputField.setSelection(0, inputField.length);
				}
			}
			drawTextField();
			super.draw();
		}

		public function addItem(param1:Object) : void
		{
			list.addItem(param1);
			invalidate(InvalidationType.DATA);
		}

		public function get rowCount() : uint
		{
			return _rowCount;
		}

		override protected function configUI() : void
		{
			super.configUI();
			background = new BaseButton();
			background.focusEnabled = false;
			copyStylesToChild(background, BACKGROUND_STYLES);
			background.addEventListener(MouseEvent.MOUSE_DOWN, onToggleListVisibility, false, 0, true);
			addChild(background);
			inputField = new TextInput();
			inputField.focusTarget = this;
			inputField.focusEnabled = false;
			inputField.addEventListener(Event.CHANGE, onTextInput, false, 0, true);
			addChild(inputField);
			list = new List();
			list.focusEnabled = false;
			copyStylesToChild(list, LIST_STYLES);
			list.addEventListener(Event.CHANGE, onListChange, false, 0, true);
			list.addEventListener(ListEvent.ITEM_CLICK, onListChange, false, 0, true);
			list.addEventListener(ListEvent.ITEM_ROLL_OUT, passEvent, false, 0, true);
			list.addEventListener(ListEvent.ITEM_ROLL_OVER, passEvent, false, 0, true);
			list.verticalScrollBar.addEventListener(Event.SCROLL, passEvent, false, 0, true);
		}

		protected function positionList() : void
		{
			var _loc_1:Point = null;
			_loc_1 = localToGlobal(new Point(0, 0));
			list.x = _loc_1.x;
			if((_loc_1.y + height) + list.height > stage.stageHeight)
			{
				list.y = _loc_1.y - list.height;
			}
			else
			{
				list.y = _loc_1.y + height;
			}
		}

		public function get value() : String
		{
			var _loc_1:Object = null;
			if(editableValue != null)
			{
				return editableValue;
			}
			_loc_1 = selectedItem;
			if(_editable && _loc_1.data == null)
			{
				return _loc_1.data;
			}
			return itemToLabel(_loc_1);
		}

		public function get prompt() : String
		{
			return _prompt;
		}

		public function set dataProvider(param1:DataProvider) : void
		{
			param1.addEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange, false, 0, true);
			list.dataProvider = param1;
			invalidate(InvalidationType.DATA);
		}

		public function set restrict(param1:String) : void
		{
			if(componentInspectorSetting && param1 == "")
			{
				param1 = null;
			}
			if(!_editable)
			{
				return;
			}
			inputField.restrict = param1;
		}

		protected function onTextInput(param1:Event) : void
		{
			param1.stopPropagation();
			if(!_editable)
			{
				return;
			}
			editableValue = inputField.text;
			selectedIndex = -1;
			dispatchEvent(new Event(Event.CHANGE));
		}

		protected function onInputFieldFocus(param1:FocusEvent) : void
		{
			inputField.addEventListener(ComponentEvent.ENTER, onEnter, false, 0, true);
			close();
		}

		public function getItemAt(param1:uint) : Object
		{
			return list.getItemAt(param1);
		}

		override protected function initializeAccessibility() : void
		{
			if(ComboBox.createAccessibilityImplementation != null)
			{
				ComboBox.createAccessibilityImplementation(this);
			}
		}

		protected function drawLayout() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			_loc_1 = getStyleValue("buttonWidth");
			_loc_2 = getStyleValue("textPadding");
			background.setSize(width, height);
			var _loc_3:int = _loc_2;
			inputField.y = _loc_3;
			inputField.x = _loc_3;
			inputField.setSize((width - _loc_1) - _loc_3, height - _loc_3);
			list.width = isNaN(_dropdownWidth) ? width : _dropdownWidth;
			background.enabled = enabled;
			background.drawNow();
		}

		public function removeItem(param1:Object) : Object
		{
			return list.removeItem(param1);
		}

		private function addCloseListener(param1:Event)
		{
			removeEventListener(Event.ENTER_FRAME, addCloseListener);
			if(!isOpen)
			{
				return;
			}
			stage.addEventListener(MouseEvent.MOUSE_DOWN, onStageClick, false, 0, true);
		}

		public function get dataProvider() : DataProvider
		{
			return list.dataProvider;
		}

		public function get textField() : TextInput
		{
			return inputField;
		}

		protected function setStyles() : void
		{
			copyStylesToChild(background, BACKGROUND_STYLES);
			copyStylesToChild(list, LIST_STYLES);
		}

		public function set labelFunction(param1:Function) : void
		{
			list.labelFunction = param1;
			invalidate(InvalidationType.DATA);
		}

		protected function drawTextFormat() : void
		{
			var _loc_1:TextFormat = null;
			_loc_1 = getStyleValue(_enabled ? "textFormat" : "disabledTextFormat");
			if(_loc_1 == null)
			{
				_loc_1 = new TextFormat();
			}
			inputField.textField.defaultTextFormat = _loc_1;
			inputField.textField.setTextFormat(_loc_1);
			setEmbedFonts();
		}

		public function set selectedIndex(param1:int) : void
		{
			list.selectedIndex = param1;
			highlightCell();
			invalidate(InvalidationType.SELECTED);
		}

		public function close() : void
		{
			highlightCell();
			highlightedCell = -1;
			if(!isOpen)
			{
				return;
			}
			dispatchEvent(new Event(Event.CLOSE));
			stage.removeEventListener(MouseEvent.MOUSE_DOWN, onStageClick);
			isOpen = false;
			stage.removeChild(list);
		}
	}
}
package fl.controls
{
	import fl.controls.dataGridClasses.*;
	import fl.controls.listClasses.*;
	import fl.core.*;
	import fl.data.*;
	import fl.events.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.geom.*;
	import flash.ui.*;
	import flash.utils.*;

	public class DataGrid extends SelectableList implements IFocusManagerComponent
	{
		private static var defaultStyles:Object = {headerUpSkin:"HeaderRenderer_upSkin", headerDownSkin:"HeaderRenderer_downSkin", headerOverSkin:"HeaderRenderer_overSkin", headerDisabledSkin:"HeaderRenderer_disabledSkin", headerSortArrowDescSkin:"HeaderSortArrow_descIcon", headerSortArrowAscSkin:"HeaderSortArrow_ascIcon", columnStretchCursorSkin:"ColumnStretch_cursor", columnDividerSkin:null, headerTextFormat:null, headerDisabledTextFormat:null, headerTextPadding:5, headerRenderer:HeaderRenderer, focusRectSkin:null, focusRectPadding:null, skin:"DataGrid_skin"};
		public static const HEADER_STYLES:Object = {disabledSkin:"headerDisabledSkin", downSkin:"headerDownSkin", overSkin:"headerOverSkin", upSkin:"headerUpSkin", textFormat:"headerTextFormat", disabledTextFormat:"headerDisabledTextFormat", textPadding:"headerTextPadding"};
		public static var createAccessibilityImplementation:Function;
		protected var _showHeaders:Boolean = true;
		protected var _sortIndex:int = -1;
		protected var _minColumnWidth:Number;
		protected var _headerRenderer:Object;
		public var sortableColumns:Boolean = true;
		protected var activeCellRenderersMap:Dictionary;
		protected var _labelFunction:Function;
		protected var headerSortArrow:Sprite;
		protected var _sortDescending:Boolean = false;
		protected var losingFocus:Boolean = false;
		protected var maxHeaderHeight:Number = 25;
		protected var minColumnWidthInvalid:Boolean = false;
		protected var _rowHeight:Number = 20;
		protected var _cellRenderer:Object;
		protected var proposedEditedItemPosition:*;
		public var editable:Boolean = false;
		protected var dragHandlesMap:Dictionary;
		protected var header:Sprite;
		protected var availableCellRenderersMap:Dictionary;
		protected var _columns:Array;
		public var resizableColumns:Boolean = true;
		protected var columnStretchStartWidth:Number;
		protected var actualRowIndex:int;
		protected var _editedItemPosition:Object;
		protected var editedItemPositionChanged:Boolean = false;
		protected var actualColIndex:int;
		protected var columnStretchCursor:Sprite;
		protected var visibleColumns:Array;
		protected var headerMask:Sprite;
		public var itemEditorInstance:Object;
		protected var displayableColumns:Array;
		protected var columnStretchIndex:Number = -1;
		protected var columnsInvalid:Boolean = true;
		protected var currentHoveredRow:int = -1;
		protected var isPressed:Boolean = false;
		protected var lastSortIndex:int = -1;
		protected var columnStretchStartX:Number;
		protected var _headerHeight:Number = 25;

		final public static function getStyleDefinition() : Object
		{
			return DataGrid.mergeStyles(defaultStyles, SelectableList.getStyleDefinition(), ScrollBar.getStyleDefinition());
		}

		public function DataGrid()
		{
			_rowHeight = 20;
			_headerHeight = 25;
			_showHeaders = true;
			columnsInvalid = true;
			minColumnWidthInvalid = false;
			columnStretchIndex = -1;
			_sortIndex = -1;
			lastSortIndex = -1;
			_sortDescending = false;
			editedItemPositionChanged = false;
			isPressed = false;
			losingFocus = false;
			maxHeaderHeight = 25;
			currentHoveredRow = -1;
			editable = false;
			resizableColumns = true;
			sortableColumns = true;
			super();
			if(_columns == null)
			{
				_columns = [];
			}
			_horizontalScrollPolicy = ScrollPolicy.OFF;
			activeCellRenderersMap = new Dictionary(true);
			availableCellRenderersMap = new Dictionary(true);
			addEventListener(DataGridEvent.ITEM_EDIT_BEGINNING, itemEditorItemEditBeginningHandler, false, -50);
			addEventListener(DataGridEvent.ITEM_EDIT_BEGIN, itemEditorItemEditBeginHandler, false, -50);
			addEventListener(DataGridEvent.ITEM_EDIT_END, itemEditorItemEditEndHandler, false, -50);
			addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
			addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
		}

		override protected function drawList() : void
		{
			var _loc_1:uint = 0;
			var _loc_2:uint = 0;
			var _loc_3:int = NaN;
			var _loc_4:int = NaN;
			var _loc_5:uint = 0;
			var _loc_6:Object = null;
			var _loc_7:ICellRenderer = null;
			var _loc_8:Array = null;
			var _loc_9:DataGridColumn = null;
			var _loc_10:Boolean = false;
			var _loc_11:Dictionary = null;
			var _loc_12:DataGridColumn = null;
			var _loc_13:Sprite = null;
			var _loc_14:UIComponent = null;
			var _loc_15:Array = null;
			var _loc_16:uint = 0;
			var _loc_17:uint = 0;
			var _loc_18:int = NaN;
			var _loc_19:DataGridColumn = null;
			var _loc_20:Object = null;
			var _loc_21:Array = null;
			var _loc_22:Dictionary = null;
			var _loc_23:Object = null;
			var _loc_24:HeaderRenderer = null;
			var _loc_25:Sprite = null;
			var _loc_26:Graphics = null;
			var _loc_27:Boolean = false;
			var _loc_28:String = null;
			if(showHeaders)
			{
				header.visible = true;
				header.x = contentPadding - _horizontalScrollPosition;
				header.y = contentPadding;
				listHolder.y = contentPadding + headerHeight;
				_loc_18 = Math.floor(availableHeight - headerHeight);
				_verticalScrollBar.setScrollProperties(_loc_18, 0, contentHeight - _loc_18, _verticalScrollBar.pageScrollSize);
			}
			else
			{
				header.visible = false;
				listHolder.y = contentPadding;
			}
			listHolder.x = contentPadding;
			contentScrollRect = listHolder.scrollRect;
			contentScrollRect.x = _horizontalScrollPosition;
			contentScrollRect.y = vOffset + (Math.floor(_verticalScrollPosition) % rowHeight);
			listHolder.scrollRect = contentScrollRect;
			listHolder.cacheAsBitmap = useBitmapScrolling;
			_loc_1 = Math.min(Math.max(length - 1, 0), Math.floor(_verticalScrollPosition / rowHeight));
			_loc_2 = Math.min(Math.max(length - 1, 0), (_loc_1 + rowCount) + 1);
			_loc_10 = list.hitTestPoint(stage.mouseX, stage.mouseY);
			calculateColumnSizes();
			var _loc_29:Dictionary = new Dictionary(true);
			renderedItems = _loc_29;
			_loc_11 = _loc_29;
			if(length > 0)
			{
				_loc_5 = _loc_1;
				while(_loc_5 <= _loc_2)
				{
					_loc_11[_dataProvider.getItemAt(_loc_5)] = true;
					_loc_5 = _loc_5 + 1;
				}
			}
			_loc_3 = 0;
			_loc_12 = visibleColumns[0];
			_loc_5 = 0;
			while(_loc_5 < displayableColumns.length)
			{
				_loc_19 = displayableColumns[_loc_5];
				if(_loc_19 != _loc_12)
				{
					_loc_3 = _loc_3 + _loc_19.width;
				}
				else
				{
					break;
				}
				_loc_5 = _loc_5 + 1;
			}
			while(header.numChildren > 0)
			{
				header.removeChildAt(0);
			}
			dragHandlesMap = new Dictionary(true);
			_loc_15 = [];
			_loc_16 = visibleColumns.length;
			_loc_17 = 0;
			while(_loc_17 < _loc_16)
			{
				_loc_9 = visibleColumns[_loc_17];
				_loc_15.push(_loc_9.colNum);
				if(showHeaders)
				{
					_loc_23 = _loc_9.headerRenderer != null ? _loc_9.headerRenderer : _headerRenderer;
					_loc_24 = getDisplayObjectInstance(_loc_23);
					if(_loc_24 != null)
					{
						_loc_24.addEventListener(MouseEvent.CLICK, handleHeaderRendererClick, false, 0, true);
						_loc_24.x = _loc_3;
						_loc_24.y = 0;
						_loc_24.setSize(_loc_9.width, headerHeight);
						_loc_24.column = _loc_9.colNum;
						_loc_24.label = _loc_9.headerText;
						header.addChildAt(_loc_24, _loc_17);
						copyStylesToChild(_loc_24, HEADER_STYLES);
						if(!(sortIndex == -1 && lastSortIndex == -1 || _loc_9.colNum == sortIndex))
						{
							_loc_24.setStyle("icon", null);
						}
						else
						{
							_loc_24.setStyle("icon", sortDescending ? getStyleValue("headerSortArrowAscSkin") : getStyleValue("headerSortArrowDescSkin"));
						}
						if(_loc_17 < (_loc_16 - 1) && resizableColumns && _loc_9.resizable)
						{
							_loc_25 = new Sprite();
							_loc_26 = _loc_25.graphics;
							_loc_26.beginFill(0, 0);
							_loc_26.drawRect(0, 0, 3, headerHeight);
							_loc_26.endFill();
							_loc_25.x = (_loc_3 + _loc_9.width) - 2;
							_loc_25.y = 0;
							_loc_25.alpha = 0;
							_loc_25.addEventListener(MouseEvent.MOUSE_OVER, handleHeaderResizeOver, false, 0, true);
							_loc_25.addEventListener(MouseEvent.MOUSE_OUT, handleHeaderResizeOut, false, 0, true);
							_loc_25.addEventListener(MouseEvent.MOUSE_DOWN, handleHeaderResizeDown, false, 0, true);
							header.addChild(_loc_25);
							dragHandlesMap[_loc_25] = _loc_9.colNum;
						}
						if(_loc_17 == (_loc_16 - 1) && _horizontalScrollPosition == 0 && availableWidth > (_loc_3 + _loc_9.width))
						{
							_loc_4 = Math.floor(availableWidth - _loc_3);
							_loc_24.setSize(_loc_4, headerHeight);
						}
						else
						{
							_loc_4 = _loc_9.width;
						}
						_loc_24.drawNow();
					}
				}
				_loc_20 = _loc_9.cellRenderer != null ? _loc_9.cellRenderer : _cellRenderer;
				_loc_21 = availableCellRenderersMap[_loc_9];
				_loc_8 = activeCellRenderersMap[_loc_9];
				if(_loc_8 == null)
				{
					var _loc_29:Array = [];
					_loc_8 = _loc_29;
					activeCellRenderersMap[_loc_9] = _loc_8;
				}
				if(_loc_21 == null)
				{
					var _loc_29:Array = [];
					_loc_21 = _loc_29;
					availableCellRenderersMap[_loc_9] = _loc_21;
				}
				_loc_22 = new Dictionary(true);
				while(_loc_8.length > 0)
				{
					_loc_7 = _loc_8.pop();
					_loc_6 = _loc_7.data;
					if(_loc_11[_loc_6] == null || invalidItems[_loc_6] == true)
					{
						_loc_21.push(_loc_7);
					}
					else
					{
						_loc_22[_loc_6] = _loc_7;
						invalidItems[_loc_6] = true;
					}
					list.removeChild(_loc_7);
				}
				if(length > 0)
				{
					_loc_5 = _loc_5;
					while(_loc_5 <= _loc_2)
					{
						_loc_27 = false;
						_loc_6 = _dataProvider.getItemAt(_loc_5);
						if(_loc_22[_loc_6] != null)
						{
							_loc_27 = true;
							_loc_7 = _loc_22[_loc_6];
						}
						else
						{
							if(_loc_21.length > 0)
							{
								_loc_7 = _loc_21.pop();
							}
							else
							{
								_loc_7 = getDisplayObjectInstance(_loc_20);
								_loc_13 = _loc_7;
								if(_loc_13 != null)
								{
									_loc_13.addEventListener(MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
									_loc_13.addEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
									_loc_13.addEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
									_loc_13.addEventListener(Event.CHANGE, handleCellRendererChange, false, 0, true);
									_loc_13.doubleClickEnabled = true;
									_loc_13.addEventListener(MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
									if(_loc_13["setStyle"] != null)
									{
										var _loc_29:int = 0;
										var _loc_30:* = rendererStyles;
										for each(_loc_28 in _loc_30)
										{
											var _loc_31:Sprite = _loc_13;
											_loc_31["setStyle"](_loc_28, rendererStyles[_loc_28]);
										}
									}
								}
							}
						}
						list.addChild(_loc_7);
						_loc_8.push(_loc_7);
						_loc_7.x = _loc_3;
						_loc_7.y = rowHeight * (_loc_5 - _loc_5);
						_loc_7.setSize(_loc_17 == (_loc_16 - 1) ? _loc_4 : _loc_9.width, rowHeight);
						if(!_loc_27)
						{
							_loc_7.data = _loc_6;
						}
						_loc_7.listData = new ListData(columnItemToLabel(_loc_9.colNum, _loc_6), null, this, _loc_5, _loc_5, _loc_17);
						_loc_7.setMouseState("up");
						_loc_7.selected = !(_selectedIndices.indexOf(_loc_5) == -1);
						if(_loc_7 is UIComponent)
						{
							_loc_14 = _loc_7;
							_loc_14.drawNow();
						}
						_loc_5 = _loc_5 + 1;
					}
				}
				_loc_3 = _loc_3 + _loc_9.width;
				_loc_17 = _loc_17 + 1;
			}
			_loc_5 = 0;
			while(_loc_5 < _columns.length)
			{
				if(_loc_15.indexOf(_loc_5) == -1)
				{
					removeCellRenderersByColumn(_columns[_loc_5]);
				}
				_loc_5 = _loc_5 + 1;
			}
			if(editedItemPositionChanged)
			{
				editedItemPositionChanged = false;
				commitEditedItemPosition(proposedEditedItemPosition);
				proposedEditedItemPosition = undefined;
			}
			invalidItems = new Dictionary(true);
		}

		protected function itemEditorItemEditBeginningHandler(param1:DataGridEvent) : void
		{
			if(!param1.isDefaultPrevented())
			{
				setEditedItemPosition({columnIndex:param1.columnIndex, rowIndex:uint(param1.rowIndex)});
			}
			else
			{
				if(!itemEditorInstance)
				{
					_editedItemPosition = null;
					editable = false;
					setFocus();
					editable = true;
				}
			}
		}

		protected function itemEditorItemEditEndHandler(param1:DataGridEvent) : void
		{
			var _loc_2:Boolean = false;
			var _loc_3:Object = null;
			var _loc_4:String = null;
			var _loc_5:Object = null;
			var _loc_6:String = null;
			var _loc_7:XML = null;
			var _loc_8:IFocusManager = null;
			if(!param1.isDefaultPrevented())
			{
				_loc_2 = false;
				if(!(itemEditorInstance && param1.reason == DataGridEventReason.CANCELLED))
				{
					_loc_3 = itemEditorInstance[_columns[param1.columnIndex].editorDataField];
					_loc_4 = _columns[param1.columnIndex].dataField;
					_loc_5 = param1.itemRenderer.data;
					_loc_6 = "";
					var _loc_9:int = 0;
					var _loc_10:* = describeType(_loc_5).variable;
					for each(_loc_7 in _loc_10)
					{
						if(_loc_4 == _loc_7.@name.toString())
						{
							_loc_6 = _loc_7.@type.toString();
							break;
						}
					}
					switch(_loc_6)
					{
					case "String":
						if(!(_loc_3 is String))
						{
							_loc_3 = _loc_3.toString();
						}
						break;
					case "uint":
						if(!(_loc_3 is uint))
						{
							_loc_3 = uint(_loc_3);
						}
						break;
					case "int":
						if(!(_loc_3 is int))
						{
							_loc_3 = int(_loc_3);
						}
						break;
					case "Number":
						if(!(_loc_3 is Number))
						{
							_loc_3 = Number(_loc_3);
						}
						break;
					default:
						break;
					}
					if(_loc_5[_loc_4] != _loc_3)
					{
						_loc_2 = true;
						_loc_5[_loc_4] = _loc_3;
					}
					param1.itemRenderer.data = _loc_5;
				}
			}
			else
			{
				if(param1.reason != DataGridEventReason.OTHER)
				{
					if(itemEditorInstance && _editedItemPosition)
					{
						if(selectedIndex != _editedItemPosition.rowIndex)
						{
							selectedIndex = _editedItemPosition.rowIndex;
						}
						_loc_8 = focusManager;
						if(itemEditorInstance is IFocusManagerComponent)
						{
							_loc_8.setFocus(InteractiveObject(itemEditorInstance));
						}
					}
				}
			}
			if(param1.reason == DataGridEventReason.OTHER || !param1.isDefaultPrevented())
			{
				destroyItemEditor();
			}
		}

		public function get editedItemPosition() : Object
		{
			if(_editedItemPosition)
			{
				return {rowIndex:_editedItemPosition.rowIndex, columnIndex:_editedItemPosition.columnIndex};
			}
			return _editedItemPosition;
		}

		protected function setEditedItemPosition(param1:Object) : void
		{
			editedItemPositionChanged = true;
			proposedEditedItemPosition = param1;
			if(!(param1 && param1.rowIndex == selectedIndex))
			{
				selectedIndex = param1.rowIndex;
			}
			invalidate(InvalidationType.DATA);
		}

		public function set headerHeight(param1:Number) : void
		{
			maxHeaderHeight = param1;
			_headerHeight = Math.max(0, param1);
			invalidate(InvalidationType.SIZE);
		}

		protected function handleHeaderResizeDown(param1:MouseEvent) : void
		{
			var _loc_2:Sprite = null;
			var _loc_3:int = NaN;
			var _loc_4:DataGridColumn = null;
			_loc_2 = param1.currentTarget;
			_loc_3 = dragHandlesMap[_loc_2];
			_loc_4 = getColumnAt(_loc_3);
			columnStretchIndex = _loc_3;
			columnStretchStartX = param1.stageX;
			columnStretchStartWidth = _loc_4.width;
			stage.addEventListener(MouseEvent.MOUSE_MOVE, handleHeaderResizeMove, false, 0, true);
			stage.addEventListener(MouseEvent.MOUSE_UP, handleHeaderResizeUp, false, 0, true);
		}

		protected function deactivateHandler(param1:Event) : void
		{
			if(itemEditorInstance)
			{
				endEdit(DataGridEventReason.OTHER);
				losingFocus = true;
				setFocus();
			}
		}

		protected function keyFocusChangeHandler(param1:FocusEvent) : void
		{
			if(param1.keyCode == Keyboard.TAB && !param1.isDefaultPrevented() && findNextItemRenderer(param1.shiftKey))
			{
				param1.preventDefault();
			}
		}

		override protected function handleDataChange(param1:DataChangeEvent) : void
		{
			super.handleDataChange(param1);
			if(_columns == null)
			{
				_columns = [];
			}
			if(_columns.length == 0)
			{
				createColumnsFromDataProvider();
			}
		}

		public function set editedItemPosition(param1:Object) : void
		{
			var _loc_2:Object = null;
			_loc_2 = {rowIndex:param1.rowIndex, columnIndex:param1.columnIndex};
			setEditedItemPosition(_loc_2);
		}

		override public function itemToCellRenderer(param1:Object) : ICellRenderer
		{
			return null;
		}

		public function getCellRendererAt(param1:uint, param2:uint) : ICellRenderer
		{
			var _loc_3:DataGridColumn = null;
			var _loc_4:Array = null;
			var _loc_5:uint = 0;
			var _loc_6:ICellRenderer = null;
			_loc_3 = _columns[param2];
			if(_loc_3 != null)
			{
				_loc_4 = activeCellRenderersMap[_loc_3];
				if(_loc_4 != null)
				{
					_loc_5 = 0;
					while(_loc_5 < _loc_4.length)
					{
						_loc_6 = _loc_4[_loc_5];
						if(_loc_6.listData.row == param1)
						{
							return _loc_6;
						}
						_loc_5 = _loc_5 + 1;
					}
				}
			}
			return null;
		}

		override protected function keyDownHandler(param1:KeyboardEvent) : void
		{
			if(!selectable || itemEditorInstance)
			{
				return;
			}
			switch(param1.keyCode)
			{
			case Keyboard.UP:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.DOWN:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.END:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.HOME:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.PAGE_UP:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.PAGE_DOWN:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.LEFT:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionHorizontally(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.RIGHT:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionHorizontally(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.SPACE:
				if(caretIndex == -1)
				{
					caretIndex = param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && 0;
				}
				scrollToIndex(caretIndex);
				doKeySelection(caretIndex, param1.shiftKey, param1.ctrlKey);
				break;
			default:
				break;
			}
			param1.stopPropagation();
		}

		protected function handleHeaderResizeUp(param1:MouseEvent) : void
		{
			var _loc_2:Sprite = null;
			var _loc_3:DataGridColumn = null;
			var _loc_4:HeaderRenderer = null;
			var _loc_5:uint = 0;
			var _loc_6:DataGridEvent = null;
			_loc_2 = param1.currentTarget;
			_loc_3 = _columns[columnStretchIndex];
			_loc_5 = 0;
			while(_loc_5 < header.numChildren)
			{
				_loc_4 = header.getChildAt(_loc_5);
				if(_loc_4 && _loc_4.column == columnStretchIndex)
				{
					break;
				}
				_loc_5 = _loc_5 + 1;
			}
			_loc_6 = new DataGridEvent(DataGridEvent.COLUMN_STRETCH, false, true, columnStretchIndex, -1, _loc_4, _loc_3 ? _loc_3.dataField : null);
			dispatchEvent(_loc_6);
			columnStretchIndex = -1;
			showColumnStretchCursor(false);
			stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleHeaderResizeMove, false);
			stage.removeEventListener(MouseEvent.MOUSE_UP, handleHeaderResizeUp, false);
		}

		protected function handleHeaderResizeOver(param1:MouseEvent) : void
		{
			if(columnStretchIndex == -1)
			{
				showColumnStretchCursor();
			}
		}

		override protected function focusInHandler(param1:FocusEvent) : void
		{
			var _loc_2:Boolean = false;
			var _loc_3:DataGridColumn = null;
			if(param1.target != this)
			{
				return;
			}
			if(losingFocus)
			{
				losingFocus = false;
				return;
			}
			setIMEMode(true);
			super.focusInHandler(param1);
			if(editable && !isPressed)
			{
				_loc_2 = !(editedItemPosition == null);
				if(!_editedItemPosition)
				{
					_editedItemPosition = {rowIndex:0, columnIndex:0};
					while(_editedItemPosition.columnIndex < _columns.length)
					{
						_loc_3 = _columns[_editedItemPosition.columnIndex];
						_loc_3.editable;
						if(_loc_3.editable && _loc_3.visible)
						{
							_loc_2 = true;
							break;
						}
						var _loc_4:_editedItemPosition = _editedItemPosition;
						var _loc_5:* = _loc_4.columnIndex + 1;
						_loc_4.columnIndex = _loc_5;
					}
				}
			}
			if(editable)
			{
				addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
				addEventListener(MouseEvent.MOUSE_DOWN, mouseFocusChangeHandler);
			}
		}

		public function createItemEditor(param1:uint, param2:uint) : void
		{
			var _loc_3:DataGridColumn = null;
			var _loc_4:ICellRenderer = null;
			var _loc_5:Sprite = null;
			var _loc_6:int = 0;
			if(displayableColumns.length != _columns.length)
			{
				_loc_6 = 0;
				while(_loc_6 < displayableColumns.length)
				{
					if(displayableColumns[_loc_6].colNum >= param1)
					{
						param1 = displayableColumns[_loc_6].colNum;
						break;
					}
					_loc_6++;
				}
				if(_loc_6 == displayableColumns.length)
				{
					param1 = 0;
				}
			}
			_loc_3 = _columns[param1];
			_loc_4 = getCellRendererAt(param2, param1);
			if(!itemEditorInstance)
			{
				itemEditorInstance = getDisplayObjectInstance(_loc_3.itemEditor);
				itemEditorInstance.tabEnabled = false;
				list.addChild(DisplayObject(itemEditorInstance));
			}
			list.setChildIndex(DisplayObject(itemEditorInstance), list.numChildren - 1);
			_loc_5 = _loc_4;
			itemEditorInstance.visible = true;
			itemEditorInstance.move(_loc_5.x, _loc_5.y);
			itemEditorInstance.setSize(_loc_3.width, rowHeight);
			itemEditorInstance.drawNow();
			DisplayObject(itemEditorInstance).addEventListener(FocusEvent.FOCUS_OUT, itemEditorFocusOutHandler);
			_loc_5.visible = false;
			DisplayObject(itemEditorInstance).addEventListener(KeyboardEvent.KEY_DOWN, editorKeyDownHandler);
			stage.addEventListener(MouseEvent.MOUSE_DOWN, editorMouseDownHandler, true, 0, true);
		}

		private function itemEditorFocusOutHandler(param1:FocusEvent) : void
		{
			param1.relatedObject;
			if(param1.relatedObject && contains(param1.relatedObject))
			{
				return;
			}
			if(!param1.relatedObject)
			{
				return;
			}
			if(itemEditorInstance)
			{
				endEdit(DataGridEventReason.OTHER);
			}
		}

		override public function get horizontalScrollPolicy() : String
		{
			return _horizontalScrollPolicy;
		}

		override protected function updateRendererStyles() : void
		{
			var _loc_1:Array = null;
			var _loc_2:Object = null;
			var _loc_3:uint = 0;
			var _loc_4:uint = 0;
			var _loc_5:String = null;
			_loc_1 = [];
			var _loc_6:int = 0;
			var _loc_7:* = availableCellRenderersMap;
			for each(_loc_2 in _loc_7)
			{
				_loc_1 = _loc_1.concat(availableCellRenderersMap[_loc_2]);
			}
			var _loc_6:int = 0;
			var _loc_7:* = activeCellRenderersMap;
			for each(_loc_2 in _loc_7)
			{
				_loc_1 = _loc_1.concat(activeCellRenderersMap[_loc_2]);
			}
			_loc_3 = _loc_1.length;
			_loc_4 = 0;
			while(_loc_4 < _loc_3)
			{
				if(_loc_1[_loc_4]["setStyle"] == null)
				{
				}
				else
				{
					var _loc_6:int = 0;
					var _loc_7:* = updatedRendererStyles;
					for each(_loc_5 in _loc_7)
					{
						_loc_1[_loc_4].setStyle(_loc_5, updatedRendererStyles[_loc_5]);
					}
					_loc_1[_loc_4].drawNow();
				}
				_loc_4 = _loc_4 + 1;
			}
			updatedRendererStyles = {};
		}

		public function set minColumnWidth(param1:Number) : void
		{
			_minColumnWidth = param1;
			columnsInvalid = true;
			minColumnWidthInvalid = true;
			invalidate(InvalidationType.SIZE);
		}

		protected function showColumnStretchCursor(param1:Boolean = true) : void
		{
			if(columnStretchCursor == null)
			{
				columnStretchCursor = getDisplayObjectInstance(getStyleValue("columnStretchCursorSkin"));
				columnStretchCursor.mouseEnabled = false;
			}
			if(param1)
			{
				Mouse.hide();
				stage.addChild(columnStretchCursor);
				stage.addEventListener(MouseEvent.MOUSE_MOVE, positionColumnStretchCursor, false, 0, true);
				columnStretchCursor.x = stage.mouseX;
				columnStretchCursor.y = stage.mouseY;
			}
			else
			{
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, positionColumnStretchCursor, false);
				if(stage.contains(columnStretchCursor))
				{
					stage.removeChild(columnStretchCursor);
				}
				Mouse.show();
			}
		}

		protected function findNextEnterItemRenderer(param1:KeyboardEvent) : void
		{
			var _loc_2:int = 0;
			var _loc_3:int = 0;
			var _loc_4:int = 0;
			var _loc_5:DataGridEvent = null;
			if(proposedEditedItemPosition !== undefined)
			{
				return;
			}
			_loc_2 = _editedItemPosition.rowIndex;
			_loc_3 = _editedItemPosition.columnIndex;
			_loc_4 = _editedItemPosition.rowIndex + (param1.shiftKey ? -1 : 1);
			if(_loc_4 >= 0 && _loc_4 < length)
			{
				_loc_2 = _loc_4;
			}
			_loc_5 = new DataGridEvent(DataGridEvent.ITEM_EDIT_BEGINNING, false, true, _loc_3, _loc_2);
			_loc_5.dataField = _columns[_loc_3].dataField;
			dispatchEvent(_loc_5);
		}

		protected function mouseFocusChangeHandler(param1:MouseEvent) : void
		{
			if(itemEditorInstance && !param1.isDefaultPrevented() && itemRendererContains(itemEditorInstance, DisplayObject(param1.target)))
			{
				param1.preventDefault();
			}
		}

		public function get imeMode() : String
		{
			return _imeMode;
		}

		public function editField(param1:uint, param2:String, param3:Object) : void
		{
			var _loc_4:Object = null;
			_loc_4 = getItemAt(param1);
			_loc_4[param2] = param3;
			replaceItemAt(_loc_4, param1);
		}

		protected function calculateAvailableHeight() : Number
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			_loc_1 = Number(getStyleValue("contentPadding"));
			_loc_2 = _horizontalScrollPolicy == ScrollPolicy.ON || _horizontalScrollPolicy == ScrollPolicy.AUTO && _maxHorizontalScrollPosition > 0 ? 15 : 0;
			return (height - (_loc_1 * 2)) - _loc_2 - (showHeaders ? headerHeight : 0);
		}

		protected function mouseUpHandler(param1:MouseEvent) : void
		{
			if(!enabled || !selectable)
			{
				return;
			}
			isPressed = false;
		}

		override protected function moveSelectionHorizontally(param1:uint, param2:Boolean, param3:Boolean) : void
		{
		}

		public function resizeColumn(param1:int, param2:Number) : void
		{
			var _loc_3:DataGridColumn = null;
			var _loc_4:int = 0;
			var _loc_5:int = NaN;
			var _loc_6:int = 0;
			var _loc_7:DataGridColumn = null;
			var _loc_8:DataGridColumn = null;
			var _loc_9:int = 0;
			var _loc_10:int = NaN;
			var _loc_11:int = NaN;
			var _loc_12:int = NaN;
			if(_columns.length == 0)
			{
				return;
			}
			_loc_3 = _columns[param1];
			if(!_loc_3)
			{
				return;
			}
			if(!visibleColumns || visibleColumns.length == 0)
			{
				_loc_3.setWidth(param2);
				return;
			}
			if(param2 < _loc_3.minWidth)
			{
				param2 = _loc_3.minWidth;
			}
			if(_horizontalScrollPolicy == ScrollPolicy.ON || _horizontalScrollPolicy == ScrollPolicy.AUTO)
			{
				_loc_3.setWidth(param2);
				_loc_3.explicitWidth = param2;
			}
			else
			{
				_loc_4 = getVisibleColumnIndex(_loc_3);
				if(_loc_4 != -1)
				{
					_loc_5 = 0;
					_loc_6 = visibleColumns.length;
					_loc_9 = _loc_4 + 1;
					while(_loc_9 < _loc_6)
					{
						_loc_7 = visibleColumns[_loc_9];
						_loc_7;
						if(_loc_7 && _loc_7.resizable)
						{
							_loc_5 = _loc_5 + _loc_7.width;
						}
						_loc_9++;
					}
					_loc_11 = (_loc_3.width - param2) + _loc_5;
					if(_loc_5)
					{
						_loc_3.setWidth(param2);
						_loc_3.explicitWidth = param2;
					}
					_loc_12 = 0;
					_loc_9 = _loc_4 + 1;
					while(_loc_9 < _loc_6)
					{
						_loc_7 = visibleColumns[_loc_9];
						if(_loc_7.resizable)
						{
							_loc_10 = (_loc_7.width * _loc_11) / _loc_5;
							if(_loc_10 < _loc_7.minWidth)
							{
								_loc_10 = _loc_7.minWidth;
							}
							_loc_7.setWidth(_loc_10);
							_loc_12 = _loc_12 + _loc_7.width;
							_loc_8 = _loc_7;
						}
						_loc_9++;
					}
					if(_loc_12 > _loc_11)
					{
						_loc_10 = (_loc_3.width - _loc_12) + _loc_11;
						if(_loc_10 < _loc_3.minWidth)
						{
							_loc_10 = _loc_3.minWidth;
						}
						_loc_3.setWidth(_loc_10);
					}
					else
					{
						if(_loc_8)
						{
							_loc_8.setWidth((_loc_8.width - _loc_12) + _loc_11);
						}
					}
				}
				else
				{
					_loc_3.setWidth(param2);
					_loc_3.explicitWidth = param2;
				}
			}
			columnsInvalid = true;
			invalidate(InvalidationType.SIZE);
		}

		protected function itemEditorItemEditBeginHandler(param1:DataGridEvent) : void
		{
			var _loc_2:IFocusManager = null;
			if(stage)
			{
				stage.addEventListener(Event.DEACTIVATE, deactivateHandler, false, 0, true);
			}
			if(!param1.isDefaultPrevented())
			{
				createItemEditor(param1.columnIndex, uint(param1.rowIndex));
				ICellRenderer(itemEditorInstance).listData = ICellRenderer(editedItemRenderer).listData;
				ICellRenderer(itemEditorInstance).data = editedItemRenderer.data;
				itemEditorInstance.imeMode = columns[param1.columnIndex].imeMode == null ? _imeMode : columns[param1.columnIndex].imeMode;
				_loc_2 = focusManager;
				if(itemEditorInstance is IFocusManagerComponent)
				{
					_loc_2.setFocus(InteractiveObject(itemEditorInstance));
				}
				_loc_2.defaultButtonEnabled = false;
				param1 = new DataGridEvent(DataGridEvent.ITEM_FOCUS_IN, false, false, _editedItemPosition.columnIndex, _editedItemPosition.rowIndex, itemEditorInstance);
				dispatchEvent(param1);
			}
		}

		override protected function draw() : void
		{
			var _loc_1:Boolean = false;
			_loc_1 = !(contentHeight == (rowHeight * length));
			contentHeight = rowHeight * length;
			if(isInvalid(InvalidationType.STYLES))
			{
				setStyles();
				drawBackground();
				if(contentPadding != getStyleValue("contentPadding"))
				{
					invalidate(InvalidationType.SIZE, false);
				}
				if((_cellRenderer == getStyleValue("cellRenderer")) || _headerRenderer == getStyleValue("headerRenderer"))
				{
					_invalidateList();
					_cellRenderer = getStyleValue("cellRenderer");
					_headerRenderer = getStyleValue("headerRenderer");
				}
			}
			if(isInvalid(InvalidationType.SIZE))
			{
				columnsInvalid = true;
			}
			if(isInvalid(InvalidationType.SIZE, InvalidationType.STATE) || isInvalid(InvalidationType.RENDERER_STYLES))
			{
				updateRendererStyles();
			}
			if(isInvalid(InvalidationType.STYLES, InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.SCROLL, InvalidationType.SELECTED))
			{
				drawList();
			}
			updateChildren();
			validate();
		}

		override public function set horizontalScrollPolicy(param1:String) : void
		{
			columnsInvalid = true;
		}

		protected function getVisibleColumnIndex(param1:DataGridColumn) : int
		{
			var _loc_2:uint = 0;
			_loc_2 = 0;
			while(_loc_2 < visibleColumns.length)
			{
				if(param1 == visibleColumns[_loc_2])
				{
					return _loc_2;
				}
				_loc_2 = _loc_2 + 1;
			}
			return -1;
		}

		protected function itemRendererContains(param1:Object, param2:DisplayObject) : Boolean
		{
			if(param2 || !param1 || param1 is DisplayObjectContainer)
			{
				return false;
			}
			return DisplayObjectContainer(param1).contains(param2);
		}

		override protected function configUI() : void
		{
			var _loc_1:Graphics = null;
			useFixedHorizontalScrolling = false;
			super.configUI();
			headerMask = new Sprite();
			_loc_1 = headerMask.graphics;
			_loc_1.beginFill(0, 0.30);
			_loc_1.drawRect(0, 0, 100, 100);
			_loc_1.endFill();
			headerMask.visible = false;
			addChild(headerMask);
			header = new Sprite();
			addChild(header);
			header.mask = headerMask;
			_horizontalScrollPolicy = ScrollPolicy.OFF;
			_verticalScrollPolicy = ScrollPolicy.AUTO;
		}

		public function columnItemToLabel(param1:uint, param2:Object) : String
		{
			var _loc_3:DataGridColumn = null;
			_loc_3 = _columns[param1];
			if(_loc_3 != null)
			{
				return _loc_3.itemToLabel(param2);
			}
			return " ";
		}

		protected function endEdit(param1:String) : Boolean
		{
			var _loc_2:DataGridEvent = null;
			if(!editedItemRenderer)
			{
				return true;
			}
			_loc_2 = new DataGridEvent(DataGridEvent.ITEM_EDIT_END, false, true, editedItemPosition.columnIndex, editedItemPosition.rowIndex, editedItemRenderer, _columns[editedItemPosition.columnIndex].dataField, param1);
			dispatchEvent(_loc_2);
			return !_loc_2.isDefaultPrevented();
		}

		override protected function drawLayout() : void
		{
			vOffset = showHeaders ? headerHeight : 0;
			super.drawLayout();
			contentScrollRect = listHolder.scrollRect;
			if(showHeaders)
			{
				headerHeight = maxHeaderHeight;
				if((Math.floor(availableHeight - headerHeight)) <= 0)
				{
					_headerHeight = availableHeight;
				}
				list.y = headerHeight;
				contentScrollRect = listHolder.scrollRect;
				contentScrollRect.y = contentPadding + headerHeight;
				contentScrollRect.height = availableHeight - headerHeight;
				listHolder.y = contentPadding + headerHeight;
				headerMask.x = contentPadding;
				headerMask.y = contentPadding;
				headerMask.width = availableWidth;
				headerMask.height = headerHeight;
			}
			else
			{
				contentScrollRect.y = contentPadding;
				listHolder.y = 0;
			}
			listHolder.scrollRect = contentScrollRect;
		}

		protected function commitEditedItemPosition(param1:Object) : void
		{
			var _loc_2:ICellRenderer = null;
			var _loc_3:DataGridEvent = null;
			var _loc_4:String = null;
			var _loc_5:int = 0;
			if(!enabled || !editable)
			{
				return;
			}
			if(itemEditorInstance && param1 && itemEditorInstance is IFocusManagerComponent && _editedItemPosition.rowIndex == param1.rowIndex && _editedItemPosition.columnIndex == param1.columnIndex)
			{
				IFocusManagerComponent(itemEditorInstance).setFocus();
				return;
			}
			if(itemEditorInstance)
			{
				if(!param1)
				{
					_loc_4 = DataGridEventReason.OTHER;
				}
				else
				{
					if(!editedItemPosition || param1.rowIndex == editedItemPosition.rowIndex)
					{
						_loc_4 = DataGridEventReason.NEW_COLUMN;
					}
					else
					{
						_loc_4 = DataGridEventReason.NEW_ROW;
					}
				}
				if(endEdit(_loc_4) && _loc_4 == DataGridEventReason.OTHER)
				{
					return;
				}
			}
			_editedItemPosition = param1;
			if(!param1)
			{
				return;
			}
			actualRowIndex = param1.rowIndex;
			actualColIndex = param1.columnIndex;
			if(displayableColumns.length != _columns.length)
			{
				_loc_5 = 0;
				while(_loc_5 < displayableColumns.length)
				{
					if(displayableColumns[_loc_5].colNum >= actualColIndex)
					{
						actualColIndex = displayableColumns[_loc_5].colNum;
						break;
					}
					_loc_5++;
				}
				if(_loc_5 == displayableColumns.length)
				{
					actualColIndex = 0;
				}
			}
			scrollToPosition(actualRowIndex, actualColIndex);
			_loc_2 = getCellRendererAt(actualRowIndex, actualColIndex);
			_loc_3 = new DataGridEvent(DataGridEvent.ITEM_EDIT_BEGIN, false, true, actualColIndex, actualRowIndex, _loc_2);
			dispatchEvent(_loc_3);
			if(editedItemPositionChanged)
			{
				editedItemPositionChanged = false;
				commitEditedItemPosition(proposedEditedItemPosition);
				proposedEditedItemPosition = undefined;
			}
			if(!itemEditorInstance)
			{
				commitEditedItemPosition(null);
			}
		}

		protected function handleHeaderRendererClick(param1:MouseEvent) : void
		{
			var _loc_2:HeaderRenderer = null;
			var _loc_3:uint = 0;
			var _loc_4:DataGridColumn = null;
			var _loc_5:uint = 0;
			var _loc_6:DataGridEvent = null;
			if(!_enabled)
			{
				return;
			}
			_loc_2 = param1.currentTarget;
			_loc_3 = _loc_2.column;
			_loc_4 = _columns[_loc_3];
			if(sortableColumns && _loc_4.sortable)
			{
				_loc_5 = _sortIndex;
				_sortIndex = _loc_3;
				_loc_6 = new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, _loc_3, -1, _loc_2, _loc_4 ? _loc_4.dataField : null);
				if(!dispatchEvent(_loc_6) || !_selectable)
				{
					_sortIndex = lastSortIndex;
					return;
				}
				lastSortIndex = _loc_5;
				sortByColumn(_loc_3);
				invalidate(InvalidationType.DATA);
			}
		}

		public function get showHeaders() : Boolean
		{
			return _showHeaders;
		}

		public function get sortIndex() : int
		{
			return _sortIndex;
		}

		public function set labelFunction(param1:Function) : void
		{
			if(_labelFunction == param1)
			{
				return;
			}
			_labelFunction = param1;
			invalidate(InvalidationType.DATA);
		}

		public function getColumnIndex(param1:String) : int
		{
			var _loc_2:uint = 0;
			var _loc_3:DataGridColumn = null;
			_loc_2 = 0;
			while(_loc_2 < _columns.length)
			{
				_loc_3 = _columns[_loc_2];
				if(_loc_3.dataField == param1)
				{
					return _loc_2;
				}
				_loc_2 = _loc_2 + 1;
			}
			return -1;
		}

		protected function createColumnsFromDataProvider() : void
		{
			var _loc_1:Object = null;
			var _loc_2:String = null;
			_columns = [];
			if(length > 0)
			{
				_loc_1 = _dataProvider.getItemAt(0);
				var _loc_3:int = 0;
				var _loc_4:* = _loc_1;
				for each(_loc_2 in _loc_4)
				{
					addColumn(_loc_2);
				}
			}
		}

		protected function editorMouseDownHandler(param1:MouseEvent) : void
		{
			var _loc_2:ICellRenderer = null;
			var _loc_3:uint = 0;
			if(!(itemRendererContains(itemEditorInstance, DisplayObject(param1.target))))
			{
				if(param1.target is ICellRenderer && contains(DisplayObject(param1.target)))
				{
					_loc_2 = param1.target;
					_loc_3 = _loc_2.listData.row;
					if(_editedItemPosition.rowIndex == _loc_3)
					{
						endEdit(DataGridEventReason.NEW_COLUMN);
					}
					else
					{
						endEdit(DataGridEventReason.NEW_ROW);
					}
				}
				else
				{
					endEdit(DataGridEventReason.OTHER);
				}
			}
		}

		public function addColumnAt(param1:*, param2:uint) : DataGridColumn
		{
			var _loc_3:DataGridColumn = null;
			var _loc_4:* = undefined;
			var _loc_5:uint = 0;
			if(param2 < _columns.length)
			{
				_columns.splice(param2, 0, "");
				_loc_5 = param2 + 1;
				while(_loc_5 < _columns.length)
				{
					_loc_3 = _columns[_loc_5];
					_loc_3.colNum = _loc_5;
					_loc_5 = _loc_5 + 1;
				}
			}
			_loc_4 = param1;
			if(!(_loc_4 is DataGridColumn))
			{
				if(_loc_4 is String)
				{
					_loc_4 = new DataGridColumn(_loc_4);
				}
				else
				{
					_loc_4 = new DataGridColumn();
				}
			}
			_loc_3 = _loc_4;
			_loc_3.owner = this;
			_loc_3.colNum = param2;
			_columns[param2] = _loc_3;
			invalidate(InvalidationType.SIZE);
			columnsInvalid = true;
			return _loc_3;
		}

		public function destroyItemEditor() : void
		{
			var _loc_1:DataGridEvent = null;
			if(itemEditorInstance)
			{
				DisplayObject(itemEditorInstance).removeEventListener(KeyboardEvent.KEY_DOWN, editorKeyDownHandler);
				stage.removeEventListener(MouseEvent.MOUSE_DOWN, editorMouseDownHandler, true);
				_loc_1 = new DataGridEvent(DataGridEvent.ITEM_FOCUS_OUT, false, false, _editedItemPosition.columnIndex, _editedItemPosition.rowIndex, itemEditorInstance);
				dispatchEvent(_loc_1);
				if(itemEditorInstance && itemEditorInstance is UIComponent)
				{
					UIComponent(itemEditorInstance).drawFocus(false);
				}
				list.removeChild(DisplayObject(itemEditorInstance));
				DisplayObject(editedItemRenderer).visible = true;
				itemEditorInstance = null;
			}
		}

		public function set imeMode(param1:String) : void
		{
			_imeMode = param1;
		}

		protected function doKeySelection(param1:int, param2:Boolean, param3:Boolean) : void
		{
			var _loc_4:Boolean = false;
			var _loc_5:int = 0;
			var _loc_6:Array = null;
			var _loc_7:int = 0;
			var _loc_8:int = 0;
			_loc_4 = false;
			if(param2)
			{
				_loc_6 = [];
				_loc_7 = lastCaretIndex;
				_loc_8 = param1;
				if(_loc_7 == -1)
				{
					_loc_7 = caretIndex != -1 ? caretIndex : _loc_8;
				}
				if(_loc_7 > _loc_8)
				{
					_loc_8 = _loc_7;
					_loc_8 = _loc_8;
				}
				_loc_5 = _loc_8;
				while(_loc_5 <= _loc_8)
				{
					_loc_6.push(_loc_5);
					_loc_5++;
				}
				selectedIndices = _loc_6;
				caretIndex = _loc_8;
				_loc_4 = true;
			}
			else
			{
				if(param3)
				{
					caretIndex = _loc_8;
				}
				else
				{
					selectedIndex = _loc_8;
					var _loc_9:int = _loc_8;
					lastCaretIndex = _loc_9;
					caretIndex = _loc_9;
					_loc_4 = true;
				}
			}
			invalidate(InvalidationType.DATA);
		}

		public function get headerHeight() : Number
		{
			return _headerHeight;
		}

		public function getColumnCount() : uint
		{
			return _columns.length;
		}

		protected function sortByColumn(param1:int) : void
		{
			var _loc_2:DataGridColumn = null;
			var _loc_3:Boolean = false;
			var _loc_4:uint = 0;
			_loc_2 = columns[param1];
			if(!enabled || !_loc_2 || !_loc_2.sortable)
			{
				return;
			}
			_loc_3 = _loc_2.sortDescending;
			_loc_4 = _loc_2.sortOptions;
			_loc_4 = _loc_4 & ~Array.DESCENDING;
			if(_loc_2.sortCompareFunction != null)
			{
				sortItems(_loc_2.sortCompareFunction, _loc_4);
			}
			else
			{
				sortItemsOn(_loc_2.dataField, _loc_4);
			}
			var _loc_5:Boolean = !_loc_3;
			_loc_2.sortDescending = _loc_5;
			_sortDescending = _loc_5;
			if(!(lastSortIndex >= 0 && lastSortIndex == sortIndex))
			{
				_loc_2 = columns[lastSortIndex];
				if(_loc_2 != null)
				{
					_loc_2.sortDescending = false;
				}
			}
		}

		public function get minColumnWidth() : Number
		{
			return _minColumnWidth;
		}

		protected function isHovered(param1:ICellRenderer) : Boolean
		{
			var _loc_2:uint = 0;
			var _loc_3:int = NaN;
			var _loc_4:Point = null;
			_loc_2 = Math.min(Math.max(length - 1, 0), Math.floor(_verticalScrollPosition / rowHeight));
			_loc_3 = (param1.listData.row - _loc_2) * rowHeight;
			_loc_4 = list.globalToLocal(new Point(0, stage.mouseY));
			return _loc_4.y > _loc_3 && _loc_4.y < (_loc_3 + rowHeight);
		}

		protected function mouseDownHandler(param1:MouseEvent) : void
		{
			if(!enabled || !selectable)
			{
				return;
			}
			isPressed = true;
		}

		override public function set enabled(param1:Boolean) : void
		{
			header.mouseChildren = _enabled;
		}

		override protected function moveSelectionVertically(param1:uint, param2:Boolean, param3:Boolean) : void
		{
			var _loc_4:int = 0;
			var _loc_5:int = 0;
			var _loc_6:int = 0;
			_loc_4 = Math.max(Math.floor(calculateAvailableHeight() / rowHeight), 1);
			_loc_5 = -1;
			_loc_6 = 0;
			switch(param1)
			{
			case Keyboard.UP:
				if(caretIndex > 0)
				{
					_loc_5 = caretIndex - 1;
				}
				break;
			case Keyboard.DOWN:
				if(caretIndex < (length - 1))
				{
					_loc_5 = caretIndex + 1;
				}
				break;
			case Keyboard.PAGE_UP:
				if(caretIndex > 0)
				{
					_loc_5 = Math.max(caretIndex - _loc_4, 0);
				}
				break;
			case Keyboard.PAGE_DOWN:
				if(caretIndex < (length - 1))
				{
					_loc_5 = Math.min(caretIndex + _loc_4, length - 1);
				}
				break;
			case Keyboard.HOME:
				if(caretIndex > 0)
				{
					_loc_5 = 0;
				}
				break;
			case Keyboard.END:
				if(caretIndex < (length - 1))
				{
					_loc_5 = length - 1;
				}
				break;
			default:
				break;
			}
			if(_loc_5 >= 0)
			{
				doKeySelection(_loc_5, param2, param3);
				scrollToSelected();
			}
		}

		protected function handleHeaderResizeOut(param1:MouseEvent) : void
		{
			if(columnStretchIndex == -1)
			{
				showColumnStretchCursor(false);
			}
		}

		public function removeAllColumns() : void
		{
			if(_columns.length > 0)
			{
				removeCellRenderers();
				_columns = [];
				invalidate(InvalidationType.SIZE);
				columnsInvalid = true;
			}
		}

		public function set rowCount(param1:uint) : void
		{
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			_loc_2 = Number(getStyleValue("contentPadding"));
			_loc_3 = _horizontalScrollPolicy == ScrollPolicy.ON || _horizontalScrollPolicy == ScrollPolicy.AUTO && hScrollBar ? 15 : 0;
			height = (rowHeight * param1) + (2 * _loc_2) + _loc_3 + (showHeaders ? headerHeight : 0);
		}

		protected function removeCellRenderers() : void
		{
			var _loc_1:uint = 0;
			_loc_1 = 0;
			while(_loc_1 < _columns.length)
			{
				removeCellRenderersByColumn(_columns[_loc_1]);
				_loc_1 = _loc_1 + 1;
			}
		}

		public function removeColumnAt(param1:uint) : DataGridColumn
		{
			var _loc_2:DataGridColumn = null;
			var _loc_3:uint = 0;
			_loc_2 = _columns[param1];
			if(_loc_2 != null)
			{
				removeCellRenderersByColumn(_loc_2);
				_columns.splice(param1, 1);
				_loc_3 = param1;
				while(_loc_3 < _columns.length)
				{
					_loc_2 = _columns[_loc_3];
					if(_loc_2)
					{
						_loc_2.colNum = _loc_3;
					}
					_loc_3 = _loc_3 + 1;
				}
				invalidate(InvalidationType.SIZE);
				columnsInvalid = true;
			}
			return _loc_2;
		}

		override protected function setHorizontalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
			if(param1 == _horizontalScrollPosition)
			{
				return;
			}
			contentScrollRect = listHolder.scrollRect;
			contentScrollRect.x = param1;
			listHolder.scrollRect = contentScrollRect;
			list.x = 0;
			header.x = -param1;
			super.setHorizontalScrollPosition(param1, true);
			invalidate(InvalidationType.SCROLL);
			columnsInvalid = true;
		}

		public function get labelFunction() : Function
		{
			return _labelFunction;
		}

		override protected function handleCellRendererClick(param1:MouseEvent) : void
		{
			var _loc_2:ICellRenderer = null;
			var _loc_3:DataGridColumn = null;
			var _loc_4:DataGridEvent = null;
			super.handleCellRendererClick(param1);
			_loc_2 = param1.currentTarget;
			_loc_2.data;
			if(!(_loc_2 && _loc_2.data && _loc_2 == itemEditorInstance))
			{
				_loc_3 = _columns[_loc_2.listData.column];
				if(editable && _loc_3 && _loc_3.editable)
				{
					_loc_4 = new DataGridEvent(DataGridEvent.ITEM_EDIT_BEGINNING, false, true, _loc_2.listData.column, _loc_2.listData.row, _loc_2, _loc_3.dataField);
					dispatchEvent(_loc_4);
				}
			}
		}

		override protected function focusOutHandler(param1:FocusEvent) : void
		{
			setIMEMode(false);
			if(param1.target == this)
			{
				super.focusOutHandler(param1);
			}
			if(param1.relatedObject == this && itemRendererContains(itemEditorInstance, DisplayObject(param1.target)))
			{
				return;
			}
			if(param1.relatedObject == null && itemRendererContains(editedItemRenderer, DisplayObject(param1.target)))
			{
				return;
			}
			if(param1.relatedObject == null && itemRendererContains(itemEditorInstance, DisplayObject(param1.target)))
			{
				return;
			}
			if(itemEditorInstance && !param1.relatedObject || !(itemRendererContains(itemEditorInstance, param1.relatedObject)))
			{
				endEdit(DataGridEventReason.OTHER);
				removeEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
				removeEventListener(MouseEvent.MOUSE_DOWN, mouseFocusChangeHandler);
			}
		}

		protected function positionColumnStretchCursor(param1:MouseEvent) : void
		{
			columnStretchCursor.x = param1.stageX;
			columnStretchCursor.y = param1.stageY;
		}

		override protected function setVerticalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
			if(itemEditorInstance)
			{
				endEdit(DataGridEventReason.OTHER);
			}
			invalidate(InvalidationType.SCROLL);
			super.setVerticalScrollPosition(param1, true);
		}

		public function get sortDescending() : Boolean
		{
			return _sortDescending;
		}

		protected function editorKeyDownHandler(param1:KeyboardEvent) : void
		{
			if(param1.keyCode == Keyboard.ESCAPE)
			{
				endEdit(DataGridEventReason.CANCELLED);
			}
			else
			{
				param1.ctrlKey;
				if(param1.ctrlKey && param1.charCode == 46)
				{
					endEdit(DataGridEventReason.CANCELLED);
				}
				else
				{
					if(!(param1.charCode == Keyboard.ENTER && param1.keyCode == 229))
					{
						if(endEdit(DataGridEventReason.NEW_ROW))
						{
							findNextEnterItemRenderer(param1);
						}
					}
				}
			}
		}

		override protected function calculateContentWidth() : void
		{
			var _loc_1:int = 0;
			var _loc_2:int = 0;
			var _loc_3:DataGridColumn = null;
			if(_columns.length == 0)
			{
				contentWidth = 0;
				return;
			}
			if(minColumnWidthInvalid)
			{
				_loc_1 = _columns.length;
				_loc_2 = 0;
				while(_loc_2 < _loc_1)
				{
					_loc_3 = _columns[_loc_2];
					_loc_3.minWidth = minColumnWidth;
					_loc_2++;
				}
				minColumnWidthInvalid = false;
			}
			if(horizontalScrollPolicy == ScrollPolicy.OFF)
			{
				contentWidth = availableWidth;
			}
			else
			{
				contentWidth = 0;
				_loc_1 = _columns.length;
				_loc_2 = 0;
				while(_loc_2 < _loc_1)
				{
					_loc_3 = _columns[_loc_2];
					if(_loc_3.visible)
					{
						contentWidth = contentWidth + _loc_3.width;
					}
					_loc_2++;
				}
				if(!isNaN(_horizontalScrollPosition) && (_horizontalScrollPosition + availableWidth) > contentWidth)
				{
					setHorizontalScrollPosition(contentWidth - availableWidth);
				}
			}
		}

		override public function get rowCount() : uint
		{
			return Math.ceil(calculateAvailableHeight() / rowHeight);
		}

		public function addColumn(param1:*) : DataGridColumn
		{
			return addColumnAt(param1, _columns.length);
		}

		protected function removeCellRenderersByColumn(param1:DataGridColumn) : void
		{
			var _loc_2:Array = null;
			if(param1 == null)
			{
				return;
			}
			_loc_2 = activeCellRenderersMap[param1];
			if(_loc_2 != null)
			{
				while(_loc_2.length > 0)
				{
					list.removeChild(_loc_2.pop());
				}
			}
		}

		override protected function handleCellRendererMouseEvent(param1:MouseEvent) : void
		{
			var _loc_2:ICellRenderer = null;
			var _loc_3:int = 0;
			var _loc_4:String = null;
			var _loc_5:uint = 0;
			var _loc_6:DataGridColumn = null;
			var _loc_7:ICellRenderer = null;
			_loc_2 = param1.target;
			if(_loc_2)
			{
				_loc_3 = _loc_2.listData.row;
				if(param1.type == MouseEvent.ROLL_OVER)
				{
					_loc_4 = "over";
				}
				else
				{
					if(param1.type == MouseEvent.ROLL_OUT)
					{
						_loc_4 = "up";
					}
				}
				if(_loc_4)
				{
					_loc_5 = 0;
					while(_loc_5 < visibleColumns.length)
					{
						_loc_6 = visibleColumns[_loc_5];
						_loc_7 = getCellRendererAt(_loc_3, _loc_6.colNum);
						if(_loc_7)
						{
							_loc_7.setMouseState(_loc_4);
						}
						if(_loc_3 != currentHoveredRow)
						{
							_loc_7 = getCellRendererAt(currentHoveredRow, _loc_6.colNum);
							if(_loc_7)
							{
								_loc_7.setMouseState("up");
							}
						}
						_loc_5 = _loc_5 + 1;
					}
				}
			}
			super.handleCellRendererMouseEvent(param1);
		}

		protected function handleHeaderResizeMove(param1:MouseEvent) : void
		{
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			_loc_2 = param1.stageX - columnStretchStartX;
			_loc_3 = columnStretchStartWidth + _loc_2;
			resizeColumn(columnStretchIndex, _loc_3);
		}

		public function set rowHeight(param1:Number) : void
		{
			_rowHeight = Math.max(0, param1);
			invalidate(InvalidationType.SIZE);
		}

		protected function scrollToPosition(param1:int, param2:int) : void
		{
			var _loc_3:int = NaN;
			var _loc_4:int = NaN;
			var _loc_5:uint = 0;
			var _loc_6:int = NaN;
			var _loc_7:DataGridColumn = null;
			var _loc_8:DataGridColumn = null;
			_loc_3 = verticalScrollPosition;
			_loc_4 = horizontalScrollPosition;
			scrollToIndex(param1);
			_loc_6 = 0;
			_loc_7 = _columns[param2];
			_loc_5 = 0;
			while(_loc_5 < displayableColumns.length)
			{
				_loc_8 = displayableColumns[_loc_5];
				if(_loc_8 != _loc_7)
				{
					_loc_6 = _loc_6 + _loc_8.width;
				}
				else
				{
					break;
				}
				_loc_5 = _loc_5 + 1;
			}
			if(horizontalScrollPosition > _loc_6)
			{
				horizontalScrollPosition = _loc_6;
			}
			else
			{
				if((horizontalScrollPosition + availableWidth) < (_loc_6 + _loc_7.width))
				{
					horizontalScrollPosition = -(availableWidth - (_loc_6 + _loc_7.width));
				}
			}
			if((_loc_3 == verticalScrollPosition) || _loc_4 == horizontalScrollPosition)
			{
				drawNow();
			}
		}

		protected function findNextItemRenderer(param1:Boolean) : Boolean
		{
			var _loc_2:int = 0;
			var _loc_3:int = 0;
			var _loc_4:Boolean = false;
			var _loc_5:int = 0;
			var _loc_6:int = 0;
			var _loc_7:String = null;
			var _loc_8:DataGridEvent = null;
			if(!_editedItemPosition)
			{
				return false;
			}
			if(proposedEditedItemPosition !== undefined)
			{
				return false;
			}
			_loc_2 = _editedItemPosition.rowIndex;
			_loc_3 = _editedItemPosition.columnIndex;
			_loc_4 = false;
			_loc_5 = param1 ? -1 : 1;
			_loc_6 = length - 1;
			while(!_loc_4)
			{
				_loc_3 = _loc_3 + _loc_5;
				if(_loc_3 < 0 || _loc_3 >= _columns.length)
				{
					_loc_3 = _loc_3 < 0 ? _columns.length - 1 : 0;
					_loc_2 = _loc_2 + _loc_5;
					if(_loc_2 < 0 || _loc_2 > _loc_6)
					{
						setEditedItemPosition(null);
						losingFocus = true;
						setFocus();
						return false;
					}
				}
				_columns[_loc_3].editable;
				if(_columns[_loc_3].editable && _columns[_loc_3].visible)
				{
					_loc_4 = true;
					if(_loc_2 == _editedItemPosition.rowIndex)
					{
						_loc_7 = DataGridEventReason.NEW_COLUMN;
					}
					else
					{
						_loc_7 = DataGridEventReason.NEW_ROW;
					}
					if(!itemEditorInstance || endEdit(_loc_7))
					{
						_loc_8 = new DataGridEvent(DataGridEvent.ITEM_EDIT_BEGINNING, false, true, _loc_3, _loc_2);
						_loc_8.dataField = _columns[_loc_3].dataField;
						dispatchEvent(_loc_8);
					}
				}
			}
			return _loc_4;
		}

		override public function set dataProvider(param1:DataProvider) : void
		{
			if(_columns == null)
			{
				_columns = [];
			}
			if(_columns.length == 0)
			{
				createColumnsFromDataProvider();
			}
			removeCellRenderers();
		}

		override public function setSize(param1:Number, param2:Number) : void
		{
			super.setSize(param1, param2);
			columnsInvalid = true;
		}

		override public function scrollToIndex(param1:int) : void
		{
			var _loc_2:int = 0;
			var _loc_3:int = 0;
			var _loc_4:int = NaN;
			drawNow();
			_loc_2 = (Math.floor((_verticalScrollPosition + availableHeight) / rowHeight)) - 1;
			_loc_3 = Math.ceil(_verticalScrollPosition / rowHeight);
			if(param1 < _loc_3)
			{
				verticalScrollPosition = param1 * rowHeight;
			}
			else
			{
				if(param1 >= _loc_2)
				{
					_loc_4 = _horizontalScrollPolicy == ScrollPolicy.ON || _horizontalScrollPolicy == ScrollPolicy.AUTO && hScrollBar ? 15 : 0;
					verticalScrollPosition = (param1 + 1) * rowHeight - availableHeight + _loc_4 + (showHeaders ? headerHeight : 0);
				}
			}
		}

		protected function calculateColumnSizes() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = 0;
			var _loc_3:int = 0;
			var _loc_4:int = NaN;
			var _loc_5:DataGridColumn = null;
			var _loc_6:DataGridColumn = null;
			var _loc_7:int = NaN;
			var _loc_8:int = 0;
			var _loc_9:int = NaN;
			var _loc_10:int = 0;
			var _loc_11:int = NaN;
			var _loc_12:int = NaN;
			var _loc_13:int = NaN;
			var _loc_14:int = NaN;
			_loc_4 = 0;
			if(_columns.length == 0)
			{
				visibleColumns = [];
				displayableColumns = [];
				return;
			}
			if(columnsInvalid)
			{
				columnsInvalid = false;
				visibleColumns = [];
				if(minColumnWidthInvalid)
				{
					_loc_2 = _columns.length;
					_loc_3 = 0;
					while(_loc_3 < _loc_2)
					{
						_columns[_loc_3].minWidth = minColumnWidth;
						_loc_3++;
					}
					minColumnWidthInvalid = false;
				}
				displayableColumns = null;
				_loc_2 = _columns.length;
				_loc_3 = 0;
				while(_loc_3 < _loc_2)
				{
					if(displayableColumns && _columns[_loc_3].visible)
					{
						displayableColumns.push(_columns[_loc_3]);
					}
					else
					{
						if(!displayableColumns && !_columns[_loc_3].visible)
						{
							displayableColumns = new Array(_loc_3);
							_loc_8 = 0;
							while(_loc_8 < _loc_3)
							{
								displayableColumns[_loc_8] = _columns[_loc_8];
								_loc_8++;
							}
						}
					}
					_loc_3++;
				}
				if(!displayableColumns)
				{
					displayableColumns = _columns;
				}
				if(horizontalScrollPolicy == ScrollPolicy.OFF)
				{
					_loc_2 = displayableColumns.length;
					_loc_3 = 0;
					while(_loc_3 < _loc_2)
					{
						visibleColumns.push(displayableColumns[_loc_3]);
						_loc_3++;
					}
				}
				else
				{
					_loc_2 = displayableColumns.length;
					_loc_9 = 0;
					_loc_3 = 0;
					while(_loc_3 < _loc_2)
					{
						_loc_5 = displayableColumns[_loc_3];
						if((_loc_9 + _loc_5.width) > _horizontalScrollPosition && _loc_9 < (_horizontalScrollPosition + availableWidth))
						{
							visibleColumns.push(_loc_5);
						}
						_loc_9 = _loc_9 + _loc_5.width;
						_loc_3++;
					}
				}
			}
			if(horizontalScrollPolicy == ScrollPolicy.OFF)
			{
				_loc_10 = 0;
				_loc_11 = 0;
				_loc_2 = visibleColumns.length;
				_loc_3 = 0;
				while(_loc_3 < _loc_2)
				{
					_loc_5 = visibleColumns[_loc_3];
					if(_loc_5.resizable)
					{
						if(!isNaN(_loc_5.explicitWidth))
						{
							_loc_11 = _loc_11 + _loc_5.width;
						}
						else
						{
							_loc_10++;
							_loc_11 = _loc_11 + _loc_5.minWidth;
						}
					}
					else
					{
						_loc_11 = _loc_11 + _loc_5.width;
					}
					_loc_4 = _loc_4 + _loc_5.width;
					_loc_3++;
				}
				_loc_13 = availableWidth;
				_loc_2 = availableWidth > _loc_11 && visibleColumns.length;
				_loc_3 = 0;
				while(_loc_3 < _loc_2)
				{
					_loc_6 = visibleColumns[_loc_3];
					_loc_12 = _loc_6.width / _loc_4;
					_loc_7 = availableWidth * _loc_12;
					_loc_6.setWidth(_loc_7);
					_loc_6.explicitWidth = NaN;
					_loc_13 = _loc_13 - _loc_7;
					_loc_3++;
				}
				if(_loc_13 && _loc_6)
				{
					_loc_6.setWidth(_loc_6.width + _loc_13);
				}
			}
		}

		public function set showHeaders(param1:Boolean) : void
		{
			_showHeaders = param1;
			invalidate(InvalidationType.SIZE);
		}

		override protected function initializeAccessibility() : void
		{
			if(DataGrid.createAccessibilityImplementation != null)
			{
				DataGrid.createAccessibilityImplementation(this);
			}
		}

		public function getColumnAt(param1:uint) : DataGridColumn
		{
			return _columns[param1];
		}

		public function get rowHeight() : Number
		{
			return _rowHeight;
		}

		public function set columns(param1:Array) : void
		{
			var _loc_2:uint = 0;
			removeCellRenderers();
			_columns = [];
			_loc_2 = 0;
			while(_loc_2 < param1.length)
			{
				addColumn(param1[_loc_2]);
				_loc_2 = _loc_2 + 1;
			}
		}

		public function get editedItemRenderer() : ICellRenderer
		{
			if(!itemEditorInstance)
			{
				return null;
			}
			return getCellRendererAt(actualRowIndex, actualColIndex);
		}

		public function get columns() : Array
		{
			return _columns.slice(0);
		}

		public function spaceColumnsEqually() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = 0;
			var _loc_3:DataGridColumn = null;
			drawNow();
			if(displayableColumns.length > 0)
			{
				_loc_1 = availableWidth / displayableColumns.length;
				_loc_2 = 0;
				while(_loc_2 < displayableColumns.length)
				{
					_loc_3 = displayableColumns[_loc_2];
					_loc_3.width = _loc_1;
					_loc_2++;
				}
				invalidate(InvalidationType.SIZE);
				columnsInvalid = true;
			}
		}
	}
}
package fl.controls
{
	import fl.core.*;
	import fl.events.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import flash.ui.*;

	public class LabelButton extends BaseButton implements IFocusManagerComponent
	{
		private static var defaultStyles:Object = {icon:null, upIcon:null, downIcon:null, overIcon:null, disabledIcon:null, selectedDisabledIcon:null, selectedUpIcon:null, selectedDownIcon:null, selectedOverIcon:null, textFormat:null, disabledTextFormat:null, textPadding:5, embedFonts:false};
		public static var createAccessibilityImplementation:Function;
		protected var _labelPlacement:String = "right";
		protected var _toggle:Boolean = false;
		protected var icon:DisplayObject;
		protected var oldMouseState:String;
		protected var mode:String = "center";
		public var textField:TextField;
		protected var _label:String = "Label";

		final public static function getStyleDefinition() : Object
		{
			return LabelButton.mergeStyles(defaultStyles, BaseButton.getStyleDefinition());
		}

		public function LabelButton()
		{
			_labelPlacement = ButtonLabelPlacement.RIGHT;
			_toggle = false;
			_label = "Label";
			mode = "center";
			super();
		}

		protected function toggleSelected(param1:MouseEvent) : void
		{
			selected = !selected;
			dispatchEvent(new Event(Event.CHANGE, true));
		}

		public function get labelPlacement() : String
		{
			return _labelPlacement;
		}

		override protected function keyDownHandler(param1:KeyboardEvent) : void
		{
			if(!enabled)
			{
				return;
			}
			if(param1.keyCode == Keyboard.SPACE)
			{
				if(oldMouseState == null)
				{
					oldMouseState = mouseState;
				}
				setMouseState("down");
				startPress();
			}
		}

		protected function setEmbedFont()
		{
			var _loc_1:Object = null;
			_loc_1 = getStyleValue("embedFonts");
			if(_loc_1 != null)
			{
				textField.embedFonts = _loc_1;
			}
		}

		override protected function keyUpHandler(param1:KeyboardEvent) : void
		{
			if(!enabled)
			{
				return;
			}
			if(param1.keyCode == Keyboard.SPACE)
			{
				setMouseState(oldMouseState);
				oldMouseState = null;
				endPress();
				dispatchEvent(new MouseEvent(MouseEvent.CLICK));
			}
		}

		override public function get selected() : Boolean
		{
			return _toggle ? _selected : false;
		}

		public function set labelPlacement(param1:String) : void
		{
			_labelPlacement = param1;
			invalidate(InvalidationType.SIZE);
		}

		public function set toggle(param1:Boolean) : void
		{
			if(!param1 && super.selected)
			{
				selected = false;
			}
			_toggle = param1;
			if(_toggle)
			{
				addEventListener(MouseEvent.CLICK, toggleSelected, false, 0, true);
			}
			else
			{
				removeEventListener(MouseEvent.CLICK, toggleSelected);
			}
			invalidate(InvalidationType.STATE);
		}

		public function get label() : String
		{
			return _label;
		}

		override public function set selected(param1:Boolean) : void
		{
			_selected = param1;
			if(_toggle)
			{
				invalidate(InvalidationType.STATE);
			}
		}

		override protected function draw() : void
		{
			if(textField.text != _label)
			{
				label = _label;
			}
			if(isInvalid(InvalidationType.STYLES, InvalidationType.STATE))
			{
				drawBackground();
				drawIcon();
				drawTextFormat();
				invalidate(InvalidationType.SIZE, false);
			}
			if(isInvalid(InvalidationType.SIZE))
			{
				drawLayout();
			}
			if(isInvalid(InvalidationType.SIZE, InvalidationType.STYLES))
			{
				if(isFocused && focusManager.showFocusIndicator)
				{
					drawFocus(true);
				}
			}
			validate();
		}

		public function get toggle() : Boolean
		{
			return _toggle;
		}

		override protected function configUI() : void
		{
			super.configUI();
			textField = new TextField();
			textField.type = TextFieldType.DYNAMIC;
			textField.selectable = false;
			addChild(textField);
		}

		override protected function drawLayout() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:String = null;
			var _loc_3:int = NaN;
			var _loc_4:int = NaN;
			var _loc_5:int = NaN;
			var _loc_6:int = NaN;
			var _loc_7:int = NaN;
			var _loc_8:int = NaN;
			_loc_1 = Number(getStyleValue("textPadding"));
			_loc_2 = icon == null && mode == "center" ? ButtonLabelPlacement.TOP : _labelPlacement;
			textField.height = textField.textHeight + 4;
			_loc_3 = textField.textWidth + 4;
			_loc_4 = textField.textHeight + 4;
			_loc_5 = icon == null ? 0 : icon.width + _loc_1;
			_loc_6 = icon == null ? 0 : icon.height + _loc_1;
			textField.visible = label.length > 0;
			if(icon != null)
			{
				icon.x = Math.round((width - icon.width) / 2);
				icon.y = Math.round((height - icon.height) / 2);
			}
			if(textField.visible == false)
			{
				textField.width = 0;
				textField.height = 0;
			}
			else
			{
				if(_loc_2 == ButtonLabelPlacement.BOTTOM || _loc_2 == ButtonLabelPlacement.TOP)
				{
					_loc_7 = Math.max(0, Math.min(_loc_3, width - (2 * _loc_1)));
					if((height - 2) > _loc_4)
					{
						_loc_8 = _loc_4;
					}
					else
					{
						_loc_8 = height - 2;
					}
					var _loc_9:int = _loc_7;
					_loc_3 = _loc_9;
					textField.width = _loc_9;
					var _loc_9:int = _loc_8;
					_loc_4 = _loc_9;
					textField.height = _loc_9;
					textField.x = Math.round((width - _loc_3) / 2);
					textField.y = Math.round((height - textField.height) - _loc_6 / 2 + (_loc_2 == ButtonLabelPlacement.BOTTOM ? _loc_6 : 0));
					if(icon != null)
					{
						icon.y = Math.round(_loc_2 == ButtonLabelPlacement.BOTTOM ? textField.y - _loc_6 : (textField.y + textField.height) + _loc_1);
					}
				}
				else
				{
					_loc_9 = Math.max(0, Math.min(_loc_3, (width - _loc_5) - (2 * _loc_1)));
					var _loc_9:int = _loc_9;
					_loc_3 = _loc_9;
					textField.width = _loc_9;
					textField.x = Math.round((width - _loc_3) - _loc_5 / 2 + (_loc_2 != ButtonLabelPlacement.LEFT ? _loc_5 : 0));
					textField.y = Math.round((height - textField.height) / 2);
					if(icon != null)
					{
						icon.x = Math.round(_loc_2 != ButtonLabelPlacement.LEFT ? textField.x - _loc_5 : (textField.x + _loc_3) + _loc_1);
					}
				}
			}
			super.drawLayout();
		}

		override protected function initializeAccessibility() : void
		{
			if(LabelButton.createAccessibilityImplementation != null)
			{
				LabelButton.createAccessibilityImplementation(this);
			}
		}

		protected function drawIcon() : void
		{
			var _loc_1:DisplayObject = null;
			var _loc_2:String = null;
			var _loc_3:Object = null;
			_loc_1 = icon;
			_loc_2 = enabled ? mouseState : "disabled";
			if(selected)
			{
				_loc_2 = "selected" + (_loc_2.substr(0, 1)).toUpperCase() + _loc_2.substr(1);
			}
			_loc_2 = _loc_2 + "Icon";
			_loc_3 = getStyleValue(_loc_2);
			if(_loc_3 == null)
			{
				_loc_3 = getStyleValue("icon");
			}
			if(_loc_3 != null)
			{
				icon = getDisplayObjectInstance(_loc_3);
			}
			if(icon != null)
			{
				addChildAt(icon, 1);
			}
			if((_loc_1 == null) && _loc_1 == icon)
			{
				removeChild(_loc_1);
			}
		}

		public function set label(param1:String) : void
		{
			_label = param1;
			if(textField.text != _label)
			{
				textField.text = _label;
				dispatchEvent(new ComponentEvent(ComponentEvent.LABEL_CHANGE));
			}
			invalidate(InvalidationType.SIZE);
			invalidate(InvalidationType.STYLES);
		}

		protected function drawTextFormat() : void
		{
			var _loc_1:Object = null;
			var _loc_2:TextFormat = null;
			var _loc_3:TextFormat = null;
			_loc_1 = UIComponent.getStyleDefinition();
			_loc_2 = enabled ? _loc_1.defaultTextFormat : _loc_1.defaultDisabledTextFormat;
			textField.setTextFormat(_loc_2);
			_loc_3 = getStyleValue(enabled ? "textFormat" : "disabledTextFormat");
			if(_loc_3 != null)
			{
				textField.setTextFormat(_loc_3);
			}
			else
			{
				_loc_3 = _loc_2;
			}
			textField.defaultTextFormat = _loc_3;
			setEmbedFont();
		}
	}
}
package fl.controls
{
	import fl.controls.listClasses.*;
	import fl.core.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.geom.*;
	import flash.ui.*;
	import flash.utils.*;

	public class List extends SelectableList implements IFocusManagerComponent
	{
		private static var defaultStyles:Object = {focusRectSkin:null, focusRectPadding:null};
		public static var createAccessibilityImplementation:Function;
		protected var _labelField:String = "label";
		protected var _rowHeight:Number = 20;
		protected var _cellRenderer:Object;
		protected var _iconField:String = "icon";
		protected var _labelFunction:Function;
		protected var _iconFunction:Function;

		final public static function getStyleDefinition() : Object
		{
			return List.mergeStyles(defaultStyles, SelectableList.getStyleDefinition());
		}

		public function List()
		{
			_rowHeight = 20;
			_labelField = "label";
			_iconField = "icon";
			super();
		}

		public function get iconField() : String
		{
			return _iconField;
		}

		protected function doKeySelection(param1:int, param2:Boolean, param3:Boolean) : void
		{
			var _loc_4:Boolean = false;
			var _loc_5:int = 0;
			var _loc_6:Array = null;
			var _loc_7:int = 0;
			var _loc_8:int = 0;
			_loc_4 = false;
			if(param2)
			{
				_loc_6 = [];
				_loc_7 = lastCaretIndex;
				_loc_8 = param1;
				if(_loc_7 == -1)
				{
					_loc_7 = caretIndex != -1 ? caretIndex : _loc_8;
				}
				if(_loc_7 > _loc_8)
				{
					_loc_8 = _loc_7;
					_loc_8 = _loc_8;
				}
				_loc_5 = _loc_8;
				while(_loc_5 <= _loc_8)
				{
					_loc_6.push(_loc_5);
					_loc_5++;
				}
				selectedIndices = _loc_6;
				caretIndex = _loc_8;
				_loc_4 = true;
			}
			else
			{
				selectedIndex = _loc_8;
				var _loc_9:int = _loc_8;
				lastCaretIndex = _loc_9;
				caretIndex = _loc_9;
				_loc_4 = true;
			}
			invalidate(InvalidationType.DATA);
		}

		override protected function drawList() : void
		{
			var _loc_1:Rectangle = null;
			var _loc_2:uint = 0;
			var _loc_3:uint = 0;
			var _loc_4:uint = 0;
			var _loc_5:Object = null;
			var _loc_6:ICellRenderer = null;
			var _loc_7:Dictionary = null;
			var _loc_8:Dictionary = null;
			var _loc_9:Boolean = false;
			var _loc_10:String = null;
			var _loc_11:Object = null;
			var _loc_12:Sprite = null;
			var _loc_13:String = null;
			var _loc_14:contentPadding = contentPadding;
			listHolder.y = _loc_14;
			listHolder.x = _loc_14;
			_loc_1 = listHolder.scrollRect;
			_loc_1.x = _horizontalScrollPosition;
			_loc_1.y = Math.floor(_verticalScrollPosition) % rowHeight;
			listHolder.scrollRect = _loc_1;
			listHolder.cacheAsBitmap = useBitmapScrolling;
			_loc_2 = Math.floor(_verticalScrollPosition / rowHeight);
			_loc_3 = Math.min(length, (_loc_2 + rowCount) + 1);
			var _loc_14:Dictionary = new Dictionary(true);
			renderedItems = _loc_14;
			_loc_7 = _loc_14;
			_loc_4 = _loc_2;
			while(_loc_4 < _loc_3)
			{
				_loc_7[_dataProvider.getItemAt(_loc_4)] = true;
				_loc_4 = _loc_4 + 1;
			}
			_loc_8 = new Dictionary(true);
			while(activeCellRenderers.length > 0)
			{
				_loc_6 = activeCellRenderers.pop();
				_loc_5 = _loc_6.data;
				if(_loc_7[_loc_5] == null || invalidItems[_loc_5] == true)
				{
					availableCellRenderers.push(_loc_6);
				}
				else
				{
					_loc_8[_loc_5] = _loc_6;
					invalidItems[_loc_5] = true;
				}
				list.removeChild(_loc_6);
			}
			invalidItems = new Dictionary(true);
			_loc_4 = _loc_4;
			while(_loc_4 < _loc_3)
			{
				_loc_9 = false;
				_loc_5 = _dataProvider.getItemAt(_loc_4);
				if(_loc_8[_loc_5] != null)
				{
					_loc_9 = true;
					_loc_6 = _loc_8[_loc_5];
				}
				else
				{
					if(availableCellRenderers.length > 0)
					{
						_loc_6 = availableCellRenderers.pop();
					}
					else
					{
						_loc_6 = getDisplayObjectInstance(getStyleValue("cellRenderer"));
						_loc_12 = _loc_6;
						if(_loc_12 != null)
						{
							_loc_12.addEventListener(MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
							_loc_12.addEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
							_loc_12.addEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
							_loc_12.addEventListener(Event.CHANGE, handleCellRendererChange, false, 0, true);
							_loc_12.doubleClickEnabled = true;
							_loc_12.addEventListener(MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
							if(_loc_12["setStyle"] != null)
							{
								var _loc_14:int = 0;
								var _loc_15:* = rendererStyles;
								for each(_loc_13 in _loc_15)
								{
									var _loc_16:Sprite = _loc_12;
									_loc_16["setStyle"](_loc_13, rendererStyles[_loc_13]);
								}
							}
						}
					}
				}
				list.addChild(_loc_6);
				activeCellRenderers.push(_loc_6);
				_loc_6.y = rowHeight * (_loc_4 - _loc_4);
				_loc_6.setSize(availableWidth + _maxHorizontalScrollPosition, rowHeight);
				_loc_10 = itemToLabel(_loc_5);
				_loc_11 = null;
				if(_iconFunction != null)
				{
					_loc_11 = _iconFunction(_loc_5);
				}
				else
				{
					if(_iconField != null)
					{
						_loc_11 = _loc_5[_iconField];
					}
				}
				if(!_loc_9)
				{
					_loc_6.data = _loc_5;
				}
				_loc_6.listData = new ListData(_loc_10, _loc_11, this, _loc_4, _loc_4, 0);
				_loc_6.selected = !(_selectedIndices.indexOf(_loc_4) == -1);
				if(_loc_6 is UIComponent)
				{
					_loc_6.drawNow();
				}
				_loc_4 = _loc_4 + 1;
			}
		}

		public function get iconFunction() : Function
		{
			return _iconFunction;
		}

		public function set iconField(param1:String) : void
		{
			if(param1 == _iconField)
			{
				return;
			}
			_iconField = param1;
			invalidate(InvalidationType.DATA);
		}

		override protected function keyDownHandler(param1:KeyboardEvent) : void
		{
			var _loc_2:int = 0;
			if(!selectable)
			{
				return;
			}
			switch(param1.keyCode)
			{
			case Keyboard.UP:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.DOWN:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.END:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.HOME:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.PAGE_UP:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.PAGE_DOWN:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.LEFT:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionHorizontally(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.RIGHT:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionHorizontally(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				break;
			case Keyboard.SPACE:
				if(caretIndex == -1)
				{
					caretIndex = param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && param1.shiftKey && param1.ctrlKey && 0;
				}
				doKeySelection(caretIndex, param1.shiftKey, param1.ctrlKey);
				scrollToSelected();
				break;
			default:
				_loc_2 = getNextIndexAtLetter(String.fromCharCode(param1.keyCode), selectedIndex);
				if(_loc_2 > -1)
				{
					selectedIndex = _loc_2;
					scrollToSelected();
				}
				break;
			}
			param1.stopPropagation();
		}

		override public function itemToLabel(param1:Object) : String
		{
			if(_labelFunction != null)
			{
				return String(_labelFunction(param1));
			}
			return param1[_labelField] != null ? String(param1[_labelField]) : "";
		}

		public function get labelField() : String
		{
			return _labelField;
		}

		override protected function moveSelectionVertically(param1:uint, param2:Boolean, param3:Boolean) : void
		{
			var _loc_4:int = 0;
			var _loc_5:int = 0;
			var _loc_6:int = 0;
			_loc_4 = Math.max(Math.floor(calculateAvailableHeight() / rowHeight), 1);
			_loc_5 = -1;
			_loc_6 = 0;
			switch(param1)
			{
			case Keyboard.UP:
				if(caretIndex > 0)
				{
					_loc_5 = caretIndex - 1;
				}
				break;
			case Keyboard.DOWN:
				if(caretIndex < (length - 1))
				{
					_loc_5 = caretIndex + 1;
				}
				break;
			case Keyboard.PAGE_UP:
				if(caretIndex > 0)
				{
					_loc_5 = Math.max(caretIndex - _loc_4, 0);
				}
				break;
			case Keyboard.PAGE_DOWN:
				if(caretIndex < (length - 1))
				{
					_loc_5 = Math.min(caretIndex + _loc_4, length - 1);
				}
				break;
			case Keyboard.HOME:
				if(caretIndex > 0)
				{
					_loc_5 = 0;
				}
				break;
			case Keyboard.END:
				if(caretIndex < (length - 1))
				{
					_loc_5 = length - 1;
				}
				break;
			default:
				break;
			}
			if(_loc_5 >= 0)
			{
				doKeySelection(_loc_5, param2, param3);
				scrollToSelected();
			}
		}

		public function set labelField(param1:String) : void
		{
			if(param1 == _labelField)
			{
				return;
			}
			_labelField = param1;
			invalidate(InvalidationType.DATA);
		}

		public function set rowCount(param1:uint) : void
		{
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			_loc_2 = Number(getStyleValue("contentPadding"));
			_loc_3 = _horizontalScrollPolicy == ScrollPolicy.ON || _horizontalScrollPolicy == ScrollPolicy.AUTO && _maxHorizontalScrollPosition > 0 ? 15 : 0;
			height = (rowHeight * param1) + (2 * _loc_2) + _loc_3;
		}

		override protected function setHorizontalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
			list.x = -param1;
			super.setHorizontalScrollPosition(param1, true);
		}

		public function set iconFunction(param1:Function) : void
		{
			if(_iconFunction == param1)
			{
				return;
			}
			_iconFunction = param1;
			invalidate(InvalidationType.DATA);
		}

		public function get labelFunction() : Function
		{
			return _labelFunction;
		}

		override protected function moveSelectionHorizontally(param1:uint, param2:Boolean, param3:Boolean) : void
		{
		}

		override protected function setVerticalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
			invalidate(InvalidationType.SCROLL);
			super.setVerticalScrollPosition(param1, true);
		}

		protected function calculateAvailableHeight() : Number
		{
			var _loc_1:int = NaN;
			_loc_1 = Number(getStyleValue("contentPadding"));
			return (height - (_loc_1 * 2)) - (_horizontalScrollPolicy == ScrollPolicy.ON || _horizontalScrollPolicy == ScrollPolicy.AUTO && _maxHorizontalScrollPosition > 0 ? 15 : 0);
		}

		override protected function draw() : void
		{
			var _loc_1:Boolean = false;
			_loc_1 = !(contentHeight == (rowHeight * length));
			contentHeight = rowHeight * length;
			if(isInvalid(InvalidationType.STYLES))
			{
				setStyles();
				drawBackground();
				if(contentPadding != getStyleValue("contentPadding"))
				{
					invalidate(InvalidationType.SIZE, false);
				}
				if(_cellRenderer != getStyleValue("cellRenderer"))
				{
					_invalidateList();
					_cellRenderer = getStyleValue("cellRenderer");
				}
			}
			if(isInvalid(InvalidationType.SIZE, InvalidationType.STATE) || isInvalid(InvalidationType.RENDERER_STYLES))
			{
				updateRendererStyles();
			}
			if(isInvalid(InvalidationType.STYLES, InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.SCROLL, InvalidationType.SELECTED))
			{
				drawList();
			}
			updateChildren();
			validate();
		}

		override protected function configUI() : void
		{
			useFixedHorizontalScrolling = true;
			_horizontalScrollPolicy = ScrollPolicy.AUTO;
			_verticalScrollPolicy = ScrollPolicy.AUTO;
			super.configUI();
		}

		override public function get rowCount() : uint
		{
			return Math.ceil(calculateAvailableHeight() / rowHeight);
		}

		override protected function initializeAccessibility() : void
		{
			if(List.createAccessibilityImplementation != null)
			{
				List.createAccessibilityImplementation(this);
			}
		}

		override public function scrollToIndex(param1:int) : void
		{
			var _loc_2:uint = 0;
			var _loc_3:uint = 0;
			drawNow();
			_loc_2 = (Math.floor((_verticalScrollPosition + availableHeight) / rowHeight)) - 1;
			_loc_3 = Math.ceil(_verticalScrollPosition / rowHeight);
			if(param1 < _loc_3)
			{
				verticalScrollPosition = param1 * rowHeight;
			}
			else
			{
				if(param1 > _loc_2)
				{
					verticalScrollPosition = (param1 + 1) * rowHeight - availableHeight;
				}
			}
		}

		public function get rowHeight() : Number
		{
			return _rowHeight;
		}

		public function set labelFunction(param1:Function) : void
		{
			if(_labelFunction == param1)
			{
				return;
			}
			_labelFunction = param1;
			invalidate(InvalidationType.DATA);
		}

		public function set rowHeight(param1:Number) : void
		{
			_rowHeight = param1;
			invalidate(InvalidationType.SIZE);
		}
	}
}
package fl.controls
{
	import fl.core.*;
	import fl.events.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.ui.*;

	public class NumericStepper extends UIComponent implements IFocusManagerComponent
	{
		private static var defaultStyles:Object = {downArrowDisabledSkin:"NumericStepperDownArrow_disabledSkin", downArrowDownSkin:"NumericStepperDownArrow_downSkin", downArrowOverSkin:"NumericStepperDownArrow_overSkin", downArrowUpSkin:"NumericStepperDownArrow_upSkin", upArrowDisabledSkin:"NumericStepperUpArrow_disabledSkin", upArrowDownSkin:"NumericStepperUpArrow_downSkin", upArrowOverSkin:"NumericStepperUpArrow_overSkin", upArrowUpSkin:"NumericStepperUpArrow_upSkin", upSkin:"TextInput_upSkin", disabledSkin:"TextInput_disabledSkin", focusRect:null, focusRectSkin:null, focusRectPadding:null, repeatDelay:500, repeatInterval:35, embedFonts:false};
		public static const DOWN_ARROW_STYLES:Object = {disabledSkin:"downArrowDisabledSkin", downSkin:"downArrowDownSkin", overSkin:"downArrowOverSkin", upSkin:"downArrowUpSkin", repeatDelay:"repeatDelay", repeatInterval:"repeatInterval"};
		public static const TEXT_INPUT_STYLES:Object = {upSkin:"upSkin", disabledSkin:"disabledSkin", textPadding:"textPadding", textFormat:"textFormat", disabledTextFormat:"disabledTextFormat", embedFonts:"embedFonts"};
		public static const UP_ARROW_STYLES:Object = {disabledSkin:"upArrowDisabledSkin", downSkin:"upArrowDownSkin", overSkin:"upArrowOverSkin", upSkin:"upArrowUpSkin", repeatDelay:"repeatDelay", repeatInterval:"repeatInterval"};
		protected var upArrow:BaseButton;
		protected var _stepSize:Number = 1;
		protected var downArrow:BaseButton;
		protected var _value:Number = 1;
		protected var _minimum:Number = 0;
		protected var _maximum:Number = 10;
		protected var _precision:Number;
		protected var inputField:TextInput;

		final public static function getStyleDefinition() : Object
		{
			return defaultStyles;
		}

		public function NumericStepper()
		{
			_maximum = 10;
			_minimum = 0;
			_value = 1;
			_stepSize = 1;
			super();
			setStyles();
			stepSize = _stepSize;
		}

		override public function drawFocus(param1:Boolean) : void
		{
			var _loc_2:int = NaN;
			super.drawFocus(param1);
			if(param1)
			{
				_loc_2 = Number(getStyleValue("focusRectPadding"));
				uiFocusRect.width = width + (_loc_2 * 2);
				uiFocusRect.height = height + (_loc_2 * 2);
			}
		}

		public function get minimum() : Number
		{
			return _minimum;
		}

		public function set imeMode(param1:String) : void
		{
			inputField.imeMode = param1;
		}

		public function set minimum(param1:Number) : void
		{
			_minimum = param1;
			if(_value < _minimum)
			{
				setValue(_minimum, false);
			}
		}

		public function get maximum() : Number
		{
			return _maximum;
		}

		override protected function isOurFocus(param1:DisplayObject) : Boolean
		{
			return super.isOurFocus(param1);
		}

		public function get nextValue() : Number
		{
			var _loc_1:int = NaN;
			_loc_1 = _value + _stepSize;
			return inRange(_loc_1) ? _loc_1 : _value;
		}

		public function set maximum(param1:Number) : void
		{
			_maximum = param1;
			if(_value > _maximum)
			{
				setValue(_maximum, false);
			}
		}

		protected function setValue(param1:Number, param2:Boolean = true) : void
		{
			var _loc_3:int = NaN;
			if(param1 == _value)
			{
				return;
			}
			_loc_3 = _value;
			_value = getValidValue(param1);
			inputField.text = _value.toString();
			if(param2)
			{
				dispatchEvent(new Event(Event.CHANGE, true));
			}
		}

		override protected function keyDownHandler(param1:KeyboardEvent) : void
		{
			var _loc_2:int = NaN;
			if(!enabled)
			{
				return;
			}
			param1.stopImmediatePropagation();
			_loc_2 = Number(inputField.text);
			switch(param1.keyCode)
			{
			case Keyboard.END:
				setValue(maximum);
				break;
			case Keyboard.HOME:
				setValue(minimum);
				break;
			case Keyboard.UP:
				setValue(nextValue);
				break;
			case Keyboard.DOWN:
				setValue(previousValue);
				break;
			case Keyboard.ENTER:
				setValue(_loc_2);
				break;
			default:
				break;
			}
		}

		override public function set enabled(param1:Boolean) : void
		{
			if(param1 == enabled)
			{
				return;
			}
			var _loc_2:Boolean = param1;
			inputField.enabled = _loc_2;
			var _loc_2:Boolean = _loc_2;
			downArrow.enabled = _loc_2;
			upArrow.enabled = _loc_2;
		}

		protected function onTextChange(param1:Event) : void
		{
			param1.stopImmediatePropagation();
		}

		public function get previousValue() : Number
		{
			var _loc_1:int = NaN;
			_loc_1 = _value - _stepSize;
			return inRange(_loc_1) ? _loc_1 : _value;
		}

		protected function getValidValue(param1:Number) : Number
		{
			var _loc_2:int = NaN;
			if(isNaN(param1))
			{
				return _value;
			}
			_loc_2 = Number((_stepSize * (Math.round(param1 / _stepSize))).toFixed(_precision));
			if(_loc_2 > maximum)
			{
				return maximum;
			}
			if(_loc_2 < minimum)
			{
				return minimum;
			}
			return _loc_2;
		}

		public function set value(param1:Number) : void
		{
			setValue(param1, false);
		}

		public function get stepSize() : Number
		{
			return _stepSize;
		}

		protected function passEvent(param1:Event) : void
		{
			dispatchEvent(param1);
		}

		public function get imeMode() : String
		{
			return inputField.imeMode;
		}

		protected function stepperPressHandler(param1:ComponentEvent) : void
		{
			setValue(Number(inputField.text), false);
			switch(param1.currentTarget)
			{
			case upArrow:
				setValue(nextValue);
				break;
			case downArrow:
				setValue(previousValue);
				break;
			default:
				break;
			}
			inputField.setFocus();
			inputField.textField.setSelection(0, 0);
		}

		override protected function focusOutHandler(param1:FocusEvent) : void
		{
			if(param1.eventPhase == 3)
			{
				setValue(Number(inputField.text));
			}
			super.focusOutHandler(param1);
		}

		protected function inRange(param1:Number) : Boolean
		{
			return param1 >= _minimum && param1 <= _maximum;
		}

		override public function get enabled() : Boolean
		{
			return super.enabled;
		}

		override protected function draw() : void
		{
			if(isInvalid(InvalidationType.STYLES, InvalidationType.STATE))
			{
				setStyles();
				invalidate(InvalidationType.SIZE, false);
			}
			if(isInvalid(InvalidationType.SIZE))
			{
				drawLayout();
			}
			if(isFocused && focusManager.showFocusIndicator)
			{
				drawFocus(true);
			}
			validate();
		}

		override protected function configUI() : void
		{
			super.configUI();
			upArrow = new BaseButton();
			copyStylesToChild(upArrow, UP_ARROW_STYLES);
			upArrow.autoRepeat = true;
			upArrow.setSize(21, 12);
			upArrow.focusEnabled = false;
			addChild(upArrow);
			downArrow = new BaseButton();
			copyStylesToChild(downArrow, DOWN_ARROW_STYLES);
			downArrow.autoRepeat = true;
			downArrow.setSize(21, 12);
			downArrow.focusEnabled = false;
			addChild(downArrow);
			inputField = new TextInput();
			copyStylesToChild(inputField, TEXT_INPUT_STYLES);
			inputField.restrict = "0-9\\-\\.\\,";
			inputField.text = _value.toString();
			inputField.setSize(21, 24);
			inputField.focusTarget = this;
			inputField.focusEnabled = false;
			inputField.addEventListener(FocusEvent.FOCUS_IN, passEvent);
			inputField.addEventListener(FocusEvent.FOCUS_OUT, passEvent);
			addChild(inputField);
			inputField.addEventListener(Event.CHANGE, onTextChange, false, 0, true);
			upArrow.addEventListener(ComponentEvent.BUTTON_DOWN, stepperPressHandler, false, 0, true);
			downArrow.addEventListener(ComponentEvent.BUTTON_DOWN, stepperPressHandler, false, 0, true);
		}

		public function get value() : Number
		{
			return _value;
		}

		protected function inStep(param1:Number) : Boolean
		{
			return (param1 - _minimum) % _stepSize == 0;
		}

		protected function drawLayout() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			_loc_1 = width - upArrow.width;
			_loc_2 = height / 2;
			inputField.setSize(_loc_1, height);
			upArrow.height = _loc_2;
			downArrow.height = Math.floor(_loc_2);
			downArrow.move(_loc_1, _loc_2);
			upArrow.move(_loc_1, 0);
			downArrow.drawNow();
			upArrow.drawNow();
			inputField.drawNow();
		}

		override public function setFocus() : void
		{
			if(stage)
			{
				stage.focus = inputField.textField;
			}
		}

		protected function getPrecision() : Number
		{
			var _loc_1:String = null;
			_loc_1 = _stepSize.toString();
			if(_loc_1.indexOf(".") == -1)
			{
				return 0;
			}
			return _loc_1.split(".").pop().length;
		}

		public function get textField() : TextInput
		{
			return inputField;
		}

		public function set stepSize(param1:Number) : void
		{
			_stepSize = param1;
			_precision = getPrecision();
			setValue(_value);
		}

		protected function setStyles() : void
		{
			copyStylesToChild(downArrow, DOWN_ARROW_STYLES);
			copyStylesToChild(upArrow, UP_ARROW_STYLES);
			copyStylesToChild(inputField, TEXT_INPUT_STYLES);
		}
	}
}
package fl.controls
{
	import fl.core.*;
	import fl.events.*;
	import flash.events.*;

	public class ScrollBar extends UIComponent
	{
		private static var defaultStyles:Object = {downArrowDisabledSkin:"ScrollArrowDown_disabledSkin", downArrowDownSkin:"ScrollArrowDown_downSkin", downArrowOverSkin:"ScrollArrowDown_overSkin", downArrowUpSkin:"ScrollArrowDown_upSkin", thumbDisabledSkin:"ScrollThumb_upSkin", thumbDownSkin:"ScrollThumb_downSkin", thumbOverSkin:"ScrollThumb_overSkin", thumbUpSkin:"ScrollThumb_upSkin", trackDisabledSkin:"ScrollTrack_skin", trackDownSkin:"ScrollTrack_skin", trackOverSkin:"ScrollTrack_skin", trackUpSkin:"ScrollTrack_skin", upArrowDisabledSkin:"ScrollArrowUp_disabledSkin", upArrowDownSkin:"ScrollArrowUp_downSkin", upArrowOverSkin:"ScrollArrowUp_overSkin", upArrowUpSkin:"ScrollArrowUp_upSkin", thumbIcon:"ScrollBar_thumbIcon", repeatDelay:500, repeatInterval:35};
		public static const THUMB_STYLES:Object = {disabledSkin:"thumbDisabledSkin", downSkin:"thumbDownSkin", overSkin:"thumbOverSkin", upSkin:"thumbUpSkin", icon:"thumbIcon", textPadding:0};
		public static const WIDTH:Number = 15;
		public static const DOWN_ARROW_STYLES:Object = {disabledSkin:"downArrowDisabledSkin", downSkin:"downArrowDownSkin", overSkin:"downArrowOverSkin", upSkin:"downArrowUpSkin", repeatDelay:"repeatDelay", repeatInterval:"repeatInterval"};
		public static const UP_ARROW_STYLES:Object = {disabledSkin:"upArrowDisabledSkin", downSkin:"upArrowDownSkin", overSkin:"upArrowOverSkin", upSkin:"upArrowUpSkin", repeatDelay:"repeatDelay", repeatInterval:"repeatInterval"};
		public static const TRACK_STYLES:Object = {disabledSkin:"trackDisabledSkin", downSkin:"trackDownSkin", overSkin:"trackOverSkin", upSkin:"trackUpSkin", repeatDelay:"repeatDelay", repeatInterval:"repeatInterval"};
		private var _direction:String = "vertical";
		protected var inDrag:Boolean = false;
		protected var upArrow:BaseButton;
		private var _pageScrollSize:Number = 0;
		protected var downArrow:BaseButton;
		private var _pageSize:Number = 10;
		private var thumbScrollOffset:Number;
		private var _maxScrollPosition:Number = 0;
		private var _scrollPosition:Number = 0;
		protected var track:BaseButton;
		private var _minScrollPosition:Number = 0;
		private var _lineScrollSize:Number = 1;
		protected var thumb:LabelButton;

		final public static function getStyleDefinition() : Object
		{
			return defaultStyles;
		}

		public function ScrollBar()
		{
			_pageSize = 10;
			_pageScrollSize = 0;
			_lineScrollSize = 1;
			_minScrollPosition = 0;
			_maxScrollPosition = 0;
			_scrollPosition = 0;
			_direction = ScrollBarDirection.VERTICAL;
			inDrag = false;
			super();
			setStyles();
			focusEnabled = false;
		}

		public function get minScrollPosition() : Number
		{
			return _minScrollPosition;
		}

		public function set minScrollPosition(param1:Number) : void
		{
			setScrollProperties(_pageSize, param1, _maxScrollPosition);
		}

		public function setScrollPosition(param1:Number, param2:Boolean = true) : void
		{
			var _loc_3:int = NaN;
			_loc_3 = scrollPosition;
			_scrollPosition = Math.max(_minScrollPosition, Math.min(_maxScrollPosition, param1));
			if(_loc_3 == _scrollPosition)
			{
				return;
			}
			if(param2)
			{
				dispatchEvent(new ScrollEvent(_direction, scrollPosition - _loc_3, scrollPosition));
			}
			updateThumb();
		}

		public function set scrollPosition(param1:Number) : void
		{
			setScrollPosition(param1, true);
		}

		public function get pageScrollSize() : Number
		{
			return _pageScrollSize == 0 ? _pageSize : _pageScrollSize;
		}

		public function set pageSize(param1:Number) : void
		{
			if(param1 > 0)
			{
				_pageSize = param1;
			}
		}

		public function setScrollProperties(param1:Number, param2:Number, param3:Number, param4:Number = 0) : void
		{
			this.pageSize = param1;
			_minScrollPosition = param2;
			_maxScrollPosition = param3;
			if(param4 >= 0)
			{
				_pageScrollSize = param4;
			}
			enabled = _maxScrollPosition > _minScrollPosition;
			setScrollPosition(_scrollPosition, false);
			updateThumb();
		}

		override public function set enabled(param1:Boolean) : void
		{
			var _loc_2:Boolean = enabled && _maxScrollPosition > _minScrollPosition;
			upArrow.enabled = _loc_2;
			var _loc_2:Boolean = _loc_2;
			thumb.enabled = _loc_2;
			var _loc_2:Boolean = _loc_2;
			track.enabled = _loc_2;
			downArrow.enabled = _loc_2;
			updateThumb();
		}

		protected function updateThumb() : void
		{
			var _loc_1:int = NaN;
			_loc_1 = (_maxScrollPosition - _minScrollPosition) + _pageSize;
			if(track.height <= 12 || _maxScrollPosition <= _minScrollPosition || _loc_1 == 0 || isNaN(_loc_1))
			{
				thumb.height = 12;
				thumb.visible = false;
			}
			else
			{
				thumb.height = Math.max(13, (_pageSize / _loc_1) * track.height);
				thumb.y = track.y + (track.height - thumb.height) * (_scrollPosition - _minScrollPosition) / (_maxScrollPosition - _minScrollPosition);
				thumb.visible = enabled;
			}
		}

		protected function thumbPressHandler(param1:MouseEvent) : void
		{
			inDrag = true;
			thumbScrollOffset = mouseY - thumb.y;
			thumb.mouseStateLocked = true;
			mouseChildren = false;
			stage.addEventListener(MouseEvent.MOUSE_MOVE, handleThumbDrag, false, 0, true);
			stage.addEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler, false, 0, true);
		}

		protected function thumbReleaseHandler(param1:MouseEvent) : void
		{
			inDrag = false;
			mouseChildren = true;
			thumb.mouseStateLocked = false;
			stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleThumbDrag);
			stage.removeEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler);
		}

		public function set pageScrollSize(param1:Number) : void
		{
			if(param1 >= 0)
			{
				_pageScrollSize = param1;
			}
		}

		protected function handleThumbDrag(param1:MouseEvent) : void
		{
			var _loc_2:int = NaN;
			_loc_2 = Math.max(0, Math.min(track.height - thumb.height, (mouseY - track.y) - thumbScrollOffset));
			setScrollPosition((_loc_2 / (track.height - thumb.height)) * (_maxScrollPosition - _minScrollPosition) + _minScrollPosition);
		}

		public function set direction(param1:String) : void
		{
			var _loc_2:Boolean = false;
			if(_direction == param1)
			{
				return;
			}
			_direction = param1;
			if(isLivePreview)
			{
				return;
			}
			setScaleY(1);
			_loc_2 = _direction == ScrollBarDirection.HORIZONTAL;
			if(!componentInspectorSetting)
			{
				if(!_loc_2 && rotation == -90)
				{
					rotation = 0;
					setScaleX(1);
				}
			}
			invalidate(InvalidationType.SIZE);
		}

		public function set lineScrollSize(param1:Number) : void
		{
			if(param1 > 0)
			{
				_lineScrollSize = param1;
			}
		}

		override public function get height() : Number
		{
			return _direction == ScrollBarDirection.HORIZONTAL ? super.width : super.height;
		}

		protected function scrollPressHandler(param1:ComponentEvent) : void
		{
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			param1.stopImmediatePropagation();
			if(param1.currentTarget == upArrow)
			{
				setScrollPosition(_scrollPosition - _lineScrollSize);
			}
			else
			{
				if(param1.currentTarget == downArrow)
				{
					setScrollPosition(_scrollPosition + _lineScrollSize);
				}
				else
				{
					_loc_2 = (track.mouseY / track.height) * (_maxScrollPosition - _minScrollPosition) + _minScrollPosition;
					_loc_3 = pageScrollSize == 0 ? pageSize : pageScrollSize;
					if(_scrollPosition < _loc_2)
					{
						setScrollPosition(Math.min(_loc_2, _scrollPosition + _loc_3));
					}
					else
					{
						if(_scrollPosition > _loc_2)
						{
							setScrollPosition(Math.max(_loc_2, _scrollPosition - _loc_3));
						}
					}
				}
			}
		}

		public function get pageSize() : Number
		{
			return _pageSize;
		}

		public function set maxScrollPosition(param1:Number) : void
		{
			setScrollProperties(_pageSize, _minScrollPosition, param1);
		}

		public function get scrollPosition() : Number
		{
			return _scrollPosition;
		}

		override public function get enabled() : Boolean
		{
			return super.enabled;
		}

		override protected function draw() : void
		{
			var _loc_1:int = NaN;
			if(isInvalid(InvalidationType.SIZE))
			{
				_loc_1 = super.height;
				downArrow.move(0, Math.max(upArrow.height, _loc_1 - downArrow.height));
				track.setSize(WIDTH, Math.max(0, _loc_1 - (downArrow.height + upArrow.height)));
				updateThumb();
			}
			if(isInvalid(InvalidationType.STYLES, InvalidationType.STATE))
			{
				setStyles();
			}
			downArrow.drawNow();
			upArrow.drawNow();
			track.drawNow();
			thumb.drawNow();
			validate();
		}

		override protected function configUI() : void
		{
			super.configUI();
			track = new BaseButton();
			track.move(0, 14);
			track.useHandCursor = false;
			track.autoRepeat = true;
			track.focusEnabled = false;
			addChild(track);
			thumb = new LabelButton();
			thumb.label = "";
			thumb.setSize(WIDTH, 15);
			thumb.move(0, 15);
			thumb.focusEnabled = false;
			addChild(thumb);
			downArrow = new BaseButton();
			downArrow.setSize(WIDTH, 14);
			downArrow.autoRepeat = true;
			downArrow.focusEnabled = false;
			addChild(downArrow);
			upArrow = new BaseButton();
			upArrow.setSize(WIDTH, 14);
			upArrow.move(0, 0);
			upArrow.autoRepeat = true;
			upArrow.focusEnabled = false;
			addChild(upArrow);
			upArrow.addEventListener(ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
			downArrow.addEventListener(ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
			track.addEventListener(ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
			thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbPressHandler, false, 0, true);
			enabled = false;
		}

		public function get direction() : String
		{
			return _direction;
		}

		public function get lineScrollSize() : Number
		{
			return _lineScrollSize;
		}

		override public function setSize(param1:Number, param2:Number) : void
		{
			if(_direction == ScrollBarDirection.HORIZONTAL)
			{
				super.setSize(param2, param1);
			}
			else
			{
				super.setSize(param1, param2);
			}
		}

		public function get maxScrollPosition() : Number
		{
			return _maxScrollPosition;
		}

		override public function get width() : Number
		{
			return _direction == ScrollBarDirection.HORIZONTAL ? super.height : super.width;
		}

		protected function setStyles() : void
		{
			copyStylesToChild(downArrow, DOWN_ARROW_STYLES);
			copyStylesToChild(thumb, THUMB_STYLES);
			copyStylesToChild(track, TRACK_STYLES);
			copyStylesToChild(upArrow, UP_ARROW_STYLES);
		}
	}
}
package fl.controls
{
	public class ScrollBarDirection extends Object
	{
		public static const HORIZONTAL:String = "horizontal";
		public static const VERTICAL:String = "vertical";

		public function ScrollBarDirection()
		{
			super();
		}
	}
}
package fl.controls
{
	public class ScrollPolicy extends Object
	{
		public static const OFF:String = "off";
		public static const ON:String = "on";
		public static const AUTO:String = "auto";

		public function ScrollPolicy()
		{
			super();
		}
	}
}
package fl.controls
{
	import fl.containers.*;
	import fl.controls.listClasses.*;
	import fl.core.*;
	import fl.data.*;
	import fl.events.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.ui.*;
	import flash.utils.*;

	public class SelectableList extends BaseScrollPane implements IFocusManagerComponent
	{
		private static var defaultStyles:Object = {skin:"List_skin", cellRenderer:CellRenderer, contentPadding:null, disabledAlpha:null};
		public static var createAccessibilityImplementation:Function;
		protected var invalidItems:Dictionary;
		protected var renderedItems:Dictionary;
		protected var listHolder:Sprite;
		protected var _allowMultipleSelection:Boolean = false;
		protected var lastCaretIndex:int = -1;
		protected var _selectedIndices:Array;
		protected var availableCellRenderers:Array;
		protected var list:Sprite;
		protected var caretIndex:int = -1;
		protected var updatedRendererStyles:Object;
		protected var preChangeItems:Array;
		protected var activeCellRenderers:Array;
		protected var rendererStyles:Object;
		protected var _verticalScrollPosition:Number;
		protected var _dataProvider:DataProvider;
		protected var _horizontalScrollPosition:Number;
		private var collectionItemImport:SimpleCollectionItem;
		protected var _selectable:Boolean = true;

		final public static function getStyleDefinition() : Object
		{
			return SelectableList.mergeStyles(defaultStyles, BaseScrollPane.getStyleDefinition());
		}

		public function SelectableList()
		{
			_allowMultipleSelection = false;
			_selectable = true;
			caretIndex = -1;
			lastCaretIndex = -1;
			super();
			activeCellRenderers = [];
			availableCellRenderers = [];
			invalidItems = new Dictionary(true);
			renderedItems = new Dictionary(true);
			_selectedIndices = [];
			if(dataProvider == null)
			{
				dataProvider = new DataProvider();
			}
			verticalScrollPolicy = ScrollPolicy.AUTO;
			rendererStyles = {};
			updatedRendererStyles = {};
		}

		protected function drawList() : void
		{
		}

		public function set allowMultipleSelection(param1:Boolean) : void
		{
			if(param1 == _allowMultipleSelection)
			{
				return;
			}
			_allowMultipleSelection = param1;
			if(!param1 && _selectedIndices.length > 1)
			{
				_selectedIndices = [_selectedIndices.pop()];
				invalidate(InvalidationType.DATA);
			}
		}

		public function sortItemsOn(param1:String, param2:Object = null)
		{
			return _dataProvider.sortOn(param1, param2);
		}

		public function removeItemAt(param1:uint) : Object
		{
			return _dataProvider.removeItemAt(param1);
		}

		public function get selectedItem() : Object
		{
			return _selectedIndices.length == 0 ? null : _dataProvider.getItemAt(selectedIndex);
		}

		override protected function keyDownHandler(param1:KeyboardEvent) : void
		{
			if(!selectable)
			{
				return;
			}
			switch(param1.keyCode)
			{
			case Keyboard.UP:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				param1.stopPropagation();
				break;
			case Keyboard.DOWN:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				param1.stopPropagation();
				break;
			case Keyboard.END:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				param1.stopPropagation();
				break;
			case Keyboard.HOME:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				param1.stopPropagation();
				break;
			case Keyboard.PAGE_UP:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				param1.stopPropagation();
				break;
			case Keyboard.PAGE_DOWN:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionVertically(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				param1.stopPropagation();
				break;
			case Keyboard.LEFT:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionHorizontally(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				param1.stopPropagation();
				break;
			case Keyboard.RIGHT:
				param1.shiftKey;
				param1.ctrlKey;
				moveSelectionHorizontally(param1.keyCode, _allowMultipleSelection, _allowMultipleSelection);
				param1.stopPropagation();
				break;
			default:
				break;
			}
		}

		public function get selectable() : Boolean
		{
			return _selectable;
		}

		public function itemToCellRenderer(param1:Object) : ICellRenderer
		{
			var _loc_2:* = undefined;
			var _loc_3:ICellRenderer = null;
			if(param1 != null)
			{
				var _loc_4:int = 0;
				var _loc_5:* = activeCellRenderers;
				for each(_loc_2 in _loc_5)
				{
					_loc_3 = activeCellRenderers[_loc_2];
					if(_loc_3.data == param1)
					{
						return _loc_3;
					}
				}
			}
			return null;
		}

		public function getNextIndexAtLetter(param1:String, param2:int = -1) : int
		{
			var _loc_3:int = 0;
			var _loc_4:int = NaN;
			var _loc_5:int = NaN;
			var _loc_6:Object = null;
			var _loc_7:String = null;
			if(length == 0)
			{
				return -1;
			}
			param1 = param1.toUpperCase();
			_loc_3 = length - 1;
			_loc_4 = 0;
			while(_loc_4 < _loc_3)
			{
				_loc_5 = (param2 + 1) + _loc_4;
				if(_loc_5 > (length - 1))
				{
					_loc_5 = _loc_5 - length;
				}
				_loc_6 = getItemAt(_loc_5);
				if(_loc_6 == null)
				{
					break;
				}
				_loc_7 = itemToLabel(_loc_6);
				if(_loc_7 == null)
				{
				}
				else
				{
					if(_loc_7.charAt(0).toUpperCase() == param1)
					{
						return _loc_5;
					}
				}
				_loc_4 = _loc_4 + 1;
			}
			return -1;
		}

		public function invalidateList() : void
		{
			_invalidateList();
			invalidate(InvalidationType.DATA);
		}

		override public function set enabled(param1:Boolean) : void
		{
			list.mouseChildren = _enabled;
		}

		public function get selectedIndices() : Array
		{
			return _selectedIndices.concat();
		}

		public function set selectable(param1:Boolean) : void
		{
			if(param1 == _selectable)
			{
				return;
			}
			if(!param1)
			{
				selectedIndices = [];
			}
			_selectable = param1;
		}

		public function itemToLabel(param1:Object) : String
		{
			return param1["label"];
		}

		public function addItemAt(param1:Object, param2:uint) : void
		{
			_dataProvider.addItemAt(param1, param2);
			invalidateList();
		}

		public function replaceItemAt(param1:Object, param2:uint) : Object
		{
			return _dataProvider.replaceItemAt(param1, param2);
		}

		protected function handleDataChange(param1:DataChangeEvent) : void
		{
			var _loc_2:int = 0;
			var _loc_3:int = 0;
			var _loc_4:String = null;
			var _loc_5:uint = 0;
			_loc_2 = param1.startIndex;
			_loc_3 = param1.endIndex;
			_loc_4 = param1.changeType;
			if(_loc_4 == DataChangeType.INVALIDATE_ALL)
			{
				clearSelection();
				invalidateList();
			}
			else
			{
				if(_loc_4 == DataChangeType.INVALIDATE)
				{
					_loc_5 = 0;
					while(_loc_5 < param1.items.length)
					{
						invalidateItem(param1.items[_loc_5]);
						_loc_5 = _loc_5 + 1;
					}
				}
				else
				{
					if(_loc_4 == DataChangeType.ADD)
					{
						_loc_5 = 0;
						while(_loc_5 < _selectedIndices.length)
						{
							if(_selectedIndices[_loc_5] >= _loc_2)
							{
								_selectedIndices[_loc_5] = _selectedIndices[_loc_5] + (_loc_2 - _loc_3);
							}
							_loc_5 = _loc_5 + 1;
						}
					}
					else
					{
						if(_loc_4 == DataChangeType.REMOVE)
						{
							_loc_5 = 0;
							while(_loc_5 < _selectedIndices.length)
							{
								if(_selectedIndices[_loc_5] >= _loc_2)
								{
									if(_selectedIndices[_loc_5] <= _loc_3)
									{
									}
									else
									{
										_selectedIndices[_loc_5] = _selectedIndices[_loc_5] - (_loc_2 - _loc_3) + 1;
									}
								}
								_loc_5 = _loc_5 + 1;
							}
						}
						else
						{
							if(_loc_4 == DataChangeType.REMOVE_ALL)
							{
								clearSelection();
							}
							else
							{
								if(_loc_4 == DataChangeType.REPLACE)
								{
								}
								else
								{
									selectedItems = preChangeItems;
									preChangeItems = null;
								}
							}
						}
					}
				}
			}
			invalidate(InvalidationType.DATA);
		}

		protected function _invalidateList() : void
		{
			availableCellRenderers = [];
			while(activeCellRenderers.length > 0)
			{
				list.removeChild(activeCellRenderers.pop());
			}
		}

		protected function updateRendererStyles() : void
		{
			var _loc_1:Array = null;
			var _loc_2:uint = 0;
			var _loc_3:uint = 0;
			var _loc_4:String = null;
			_loc_1 = availableCellRenderers.concat(activeCellRenderers);
			_loc_2 = _loc_1.length;
			_loc_3 = 0;
			while(_loc_3 < _loc_2)
			{
				if(_loc_1[_loc_3].setStyle == null)
				{
				}
				else
				{
					var _loc_5:int = 0;
					var _loc_6:* = updatedRendererStyles;
					for each(_loc_4 in _loc_6)
					{
						_loc_1[_loc_3].setStyle(_loc_4, updatedRendererStyles[_loc_4]);
					}
					_loc_1[_loc_3].drawNow();
				}
				_loc_3 = _loc_3 + 1;
			}
			updatedRendererStyles = {};
		}

		public function set selectedItem(param1:Object) : void
		{
			var _loc_2:int = 0;
			_loc_2 = _dataProvider.getItemIndex(param1);
			selectedIndex = _loc_2;
		}

		public function sortItems(...restArguments)
		{
			return _dataProvider.sort.apply(_dataProvider, restArguments);
		}

		public function removeAll() : void
		{
			_dataProvider.removeAll();
		}

		protected function handleCellRendererChange(param1:Event) : void
		{
			var _loc_2:ICellRenderer = null;
			var _loc_3:uint = 0;
			_loc_2 = param1.currentTarget;
			_loc_3 = _loc_2.listData.index;
			_dataProvider.invalidateItemAt(_loc_3);
		}

		protected function moveSelectionVertically(param1:uint, param2:Boolean, param3:Boolean) : void
		{
		}

		override protected function setHorizontalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
			var _loc_3:int = NaN;
			if(param1 == _horizontalScrollPosition)
			{
				return;
			}
			_loc_3 = param1 - _horizontalScrollPosition;
			_horizontalScrollPosition = param1;
			if(param2)
			{
				dispatchEvent(new ScrollEvent(ScrollBarDirection.HORIZONTAL, _loc_3, param1));
			}
		}

		public function scrollToSelected() : void
		{
			scrollToIndex(selectedIndex);
		}

		public function invalidateItem(param1:Object) : void
		{
			if(renderedItems[param1] == null)
			{
				return;
			}
			invalidItems[param1] = true;
			invalidate(InvalidationType.DATA);
		}

		protected function handleCellRendererClick(param1:MouseEvent) : void
		{
			var _loc_2:ICellRenderer = null;
			var _loc_3:uint = 0;
			var _loc_4:int = 0;
			var _loc_5:int = 0;
			var _loc_6:uint = 0;
			if(!_enabled)
			{
				return;
			}
			_loc_2 = param1.currentTarget;
			_loc_3 = _loc_2.listData.index;
			if(!(dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK, false, true, _loc_2.listData.column, _loc_2.listData.row, _loc_3, _loc_2.data))) || !_selectable)
			{
				return;
			}
			_loc_4 = selectedIndices.indexOf(_loc_3);
			if(!_allowMultipleSelection)
			{
				if(_loc_4 != -1)
				{
					return;
				}
				_loc_2.selected = true;
				_selectedIndices = [_loc_3];
				var _loc_7:uint = _loc_3;
				caretIndex = _loc_7;
				lastCaretIndex = _loc_7;
			}
			else
			{
				if(param1.shiftKey)
				{
					_loc_6 = _selectedIndices.length > 0 ? _selectedIndices[0] : _loc_7;
					_selectedIndices = [];
					if(_loc_6 > _loc_7)
					{
						_loc_5 = _loc_6;
						while(_loc_5 >= _loc_7)
						{
							_selectedIndices.push(_loc_5);
							_loc_5 = _loc_5 - 1;
						}
					}
					else
					{
						_loc_5 = _loc_5;
						while(_loc_5 <= _loc_7)
						{
							_selectedIndices.push(_loc_5);
							_loc_5++;
						}
					}
					caretIndex = _loc_7;
				}
				else
				{
					if(param1.ctrlKey)
					{
						if(_loc_4 != -1)
						{
							_loc_2.selected = false;
							_selectedIndices.splice(_loc_4, 1);
						}
						else
						{
							_loc_2.selected = true;
							_selectedIndices.push(_loc_7);
						}
						caretIndex = _loc_7;
					}
					else
					{
						_selectedIndices = [_loc_7];
						var _loc_7:uint = _loc_7;
						caretIndex = _loc_7;
						lastCaretIndex = _loc_7;
					}
				}
			}
			dispatchEvent(new Event(Event.CHANGE));
			invalidate(InvalidationType.DATA);
		}

		public function get length() : uint
		{
			return _dataProvider.length;
		}

		public function get allowMultipleSelection() : Boolean
		{
			return _allowMultipleSelection;
		}

		protected function onPreChange(param1:DataChangeEvent) : void
		{
			switch(param1.changeType)
			{
			case DataChangeType.REMOVE:
				break;
			case DataChangeType.ADD:
				break;
			case DataChangeType.INVALIDATE:
				break;
			case DataChangeType.REMOVE_ALL:
				break;
			case DataChangeType.REPLACE:
				break;
			case DataChangeType.INVALIDATE_ALL:
				break;
			default:
				preChangeItems = selectedItems;
				break;
			}
		}

		public function getRendererStyle(param1:String, param2:int = -1) : Object
		{
			return rendererStyles[param1];
		}

		override protected function setVerticalScrollPosition(param1:Number, param2:Boolean = false) : void
		{
			var _loc_3:int = NaN;
			if(param1 == _verticalScrollPosition)
			{
				return;
			}
			_loc_3 = param1 - _verticalScrollPosition;
			_verticalScrollPosition = param1;
			if(param2)
			{
				dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, _loc_3, param1));
			}
		}

		protected function moveSelectionHorizontally(param1:uint, param2:Boolean, param3:Boolean) : void
		{
		}

		public function set selectedIndices(param1:Array) : void
		{
			if(!_selectable)
			{
				return;
			}
			_selectedIndices = param1 == null ? [] : param1.concat();
			invalidate(InvalidationType.SELECTED);
		}

		public function get selectedIndex() : int
		{
			return _selectedIndices.length == 0 ? -1 : _selectedIndices[_selectedIndices.length - 1];
		}

		override protected function draw() : void
		{
			super.draw();
		}

		override protected function configUI() : void
		{
			super.configUI();
			listHolder = new Sprite();
			addChild(listHolder);
			listHolder.scrollRect = contentScrollRect;
			list = new Sprite();
			listHolder.addChild(list);
		}

		public function addItem(param1:Object) : void
		{
			_dataProvider.addItem(param1);
			invalidateList();
		}

		protected function handleCellRendererMouseEvent(param1:MouseEvent) : void
		{
			var _loc_2:ICellRenderer = null;
			var _loc_3:String = null;
			_loc_2 = param1.target;
			_loc_3 = param1.type == MouseEvent.ROLL_OVER ? ListEvent.ITEM_ROLL_OVER : ListEvent.ITEM_ROLL_OUT;
			dispatchEvent(new ListEvent(_loc_3, false, false, _loc_2.listData.column, _loc_2.listData.row, _loc_2.listData.index, _loc_2.data));
		}

		public function clearRendererStyle(param1:String, param2:int = -1) : void
		{
			updatedRendererStyles[param1] = null;
			invalidate(InvalidationType.RENDERER_STYLES);
		}

		protected function handleCellRendererDoubleClick(param1:MouseEvent) : void
		{
			var _loc_2:ICellRenderer = null;
			var _loc_3:uint = 0;
			if(!_enabled)
			{
				return;
			}
			_loc_2 = param1.currentTarget;
			_loc_3 = _loc_2.listData.index;
			dispatchEvent(new ListEvent(ListEvent.ITEM_DOUBLE_CLICK, false, true, _loc_2.listData.column, _loc_2.listData.row, _loc_3, _loc_2.data));
		}

		public function get rowCount() : uint
		{
			return 0;
		}

		public function isItemSelected(param1:Object) : Boolean
		{
			return selectedItems.indexOf(param1) > -1;
		}

		public function set dataProvider(param1:DataProvider) : void
		{
			if(_dataProvider != null)
			{
				_dataProvider.removeEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange);
				_dataProvider.removeEventListener(DataChangeEvent.PRE_DATA_CHANGE, onPreChange);
			}
			_dataProvider = param1;
			_dataProvider.addEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange, false, 0, true);
			_dataProvider.addEventListener(DataChangeEvent.PRE_DATA_CHANGE, onPreChange, false, 0, true);
			clearSelection();
			invalidateList();
		}

		override protected function drawLayout() : void
		{
			super.drawLayout();
			contentScrollRect = listHolder.scrollRect;
			contentScrollRect.width = availableWidth;
			contentScrollRect.height = availableHeight;
			listHolder.scrollRect = contentScrollRect;
		}

		public function getItemAt(param1:uint) : Object
		{
			return _dataProvider.getItemAt(param1);
		}

		override protected function initializeAccessibility() : void
		{
			if(SelectableList.createAccessibilityImplementation != null)
			{
				SelectableList.createAccessibilityImplementation(this);
			}
		}

		public function scrollToIndex(param1:int) : void
		{
		}

		public function removeItem(param1:Object) : Object
		{
			return _dataProvider.removeItem(param1);
		}

		public function get dataProvider() : DataProvider
		{
			return _dataProvider;
		}

		public function set maxHorizontalScrollPosition(param1:Number) : void
		{
			_maxHorizontalScrollPosition = param1;
			invalidate(InvalidationType.SIZE);
		}

		public function setRendererStyle(param1:String, param2:Object, param3:uint = 0) : void
		{
			if(rendererStyles[param1] == param2)
			{
				return;
			}
			updatedRendererStyles[param1] = param2;
			rendererStyles[param1] = param2;
			invalidate(InvalidationType.RENDERER_STYLES);
		}

		public function invalidateItemAt(param1:uint) : void
		{
			var _loc_2:Object = null;
			_loc_2 = _dataProvider.getItemAt(param1);
			if(_loc_2 != null)
			{
				invalidateItem(_loc_2);
			}
		}

		public function set selectedItems(param1:Array) : void
		{
			var _loc_2:Array = null;
			var _loc_3:uint = 0;
			var _loc_4:int = 0;
			if(param1 == null)
			{
				selectedIndices = null;
				return;
			}
			_loc_2 = [];
			_loc_3 = 0;
			while(_loc_3 < param1.length)
			{
				_loc_4 = _dataProvider.getItemIndex(param1[_loc_3]);
				if(_loc_4 != -1)
				{
					_loc_2.push(_loc_4);
				}
				_loc_3 = _loc_3 + 1;
			}
			selectedIndices = _loc_2;
		}

		public function clearSelection() : void
		{
			selectedIndex = -1;
		}

		override public function get maxHorizontalScrollPosition() : Number
		{
			return _maxHorizontalScrollPosition;
		}

		public function get selectedItems() : Array
		{
			var _loc_1:Array = null;
			var _loc_2:uint = 0;
			_loc_1 = [];
			_loc_2 = 0;
			while(_loc_2 < _selectedIndices.length)
			{
				_loc_1.push(_dataProvider.getItemAt(_selectedIndices[_loc_2]));
				_loc_2 = _loc_2 + 1;
			}
			return _loc_1;
		}

		public function set selectedIndex(param1:int) : void
		{
			selectedIndices = param1 == -1 ? null : [param1];
		}
	}
}
package fl.controls
{
	import fl.core.*;
	import fl.events.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.system.*;
	import flash.text.*;
	import flash.ui.*;

	public class TextArea extends UIComponent implements IFocusManagerComponent
	{
		public static const SCROLL_BAR_STYLES:Object = {downArrowDisabledSkin:"downArrowDisabledSkin", downArrowDownSkin:"downArrowDownSkin", downArrowOverSkin:"downArrowOverSkin", downArrowUpSkin:"downArrowUpSkin", upArrowDisabledSkin:"upArrowDisabledSkin", upArrowDownSkin:"upArrowDownSkin", upArrowOverSkin:"upArrowOverSkin", upArrowUpSkin:"upArrowUpSkin", thumbDisabledSkin:"thumbDisabledSkin", thumbDownSkin:"thumbDownSkin", thumbOverSkin:"thumbOverSkin", thumbUpSkin:"thumbUpSkin", thumbIcon:"thumbIcon", trackDisabledSkin:"trackDisabledSkin", trackDownSkin:"trackDownSkin", trackOverSkin:"trackOverSkin", trackUpSkin:"trackUpSkin", repeatDelay:"repeatDelay", repeatInterval:"repeatInterval"};
		private static var defaultStyles:Object = {upSkin:"TextArea_upSkin", disabledSkin:"TextArea_disabledSkin", focusRectSkin:null, focusRectPadding:null, textFormat:null, disabledTextFormat:null, textPadding:3, embedFonts:false};
		public static var createAccessibilityImplementation:Function;
		protected var _html:Boolean = false;
		protected var _verticalScrollBar:UIScrollBar;
		protected var _savedHTML:String;
		protected var background:DisplayObject;
		protected var _horizontalScrollBar:UIScrollBar;
		protected var _horizontalScrollPolicy:String = "auto";
		protected var _editable:Boolean = true;
		protected var textHasChanged:Boolean = false;
		public var textField:TextField;
		protected var _wordWrap:Boolean = true;
		protected var _verticalScrollPolicy:String = "auto";

		final public static function getStyleDefinition() : Object
		{
			return UIComponent.mergeStyles(defaultStyles, ScrollBar.getStyleDefinition());
		}

		public function TextArea()
		{
			_editable = true;
			_wordWrap = true;
			_horizontalScrollPolicy = ScrollPolicy.AUTO;
			_verticalScrollPolicy = ScrollPolicy.AUTO;
			_html = false;
			textHasChanged = false;
			super();
		}

		override public function drawFocus(param1:Boolean) : void
		{
			if(focusTarget != null)
			{
				focusTarget.drawFocus(param1);
				return;
			}
			super.drawFocus(param1);
		}

		public function set imeMode(param1:String) : void
		{
			_imeMode = param1;
		}

		protected function handleWheel(param1:MouseEvent) : void
		{
			if(!enabled || !_verticalScrollBar.visible)
			{
				return;
			}
			_verticalScrollBar.scrollPosition = _verticalScrollBar.scrollPosition - (param1.delta * _verticalScrollBar.lineScrollSize);
			dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, param1.delta * _verticalScrollBar.lineScrollSize, _verticalScrollBar.scrollPosition));
		}

		public function get verticalScrollPosition() : Number
		{
			return textField.scrollV;
		}

		override protected function isOurFocus(param1:DisplayObject) : Boolean
		{
			return super.isOurFocus(param1);
		}

		public function set verticalScrollPosition(param1:Number) : void
		{
			drawNow();
			textField.scrollV = param1;
		}

		protected function handleKeyDown(param1:KeyboardEvent) : void
		{
			if(param1.keyCode == Keyboard.ENTER)
			{
				dispatchEvent(new ComponentEvent(ComponentEvent.ENTER, true));
			}
		}

		public function set text(param1:String) : void
		{
			if(componentInspectorSetting && param1 == "")
			{
				return;
			}
			textField.text = param1;
			_html = false;
			invalidate(InvalidationType.DATA);
			invalidate(InvalidationType.STYLES);
			textHasChanged = true;
		}

		protected function updateTextFieldType() : void
		{
			textField.type = enabled && _editable ? TextFieldType.INPUT : TextFieldType.DYNAMIC;
			textField.selectable = enabled;
			textField.wordWrap = _wordWrap;
			textField.multiline = true;
		}

		public function get selectionEndIndex() : int
		{
			return textField.selectionEndIndex;
		}

		public function get editable() : Boolean
		{
			return _editable;
		}

		override protected function focusInHandler(param1:FocusEvent) : void
		{
			var _loc_2:IFocusManager = null;
			setIMEMode(true);
			if(param1.target == this)
			{
				stage.focus = textField;
			}
			_loc_2 = focusManager;
			if(_loc_2)
			{
				if(editable)
				{
					_loc_2.showFocusIndicator = true;
				}
				_loc_2.defaultButtonEnabled = false;
			}
			super.focusInHandler(param1);
			if(editable)
			{
				setIMEMode(true);
			}
		}

		public function get wordWrap() : Boolean
		{
			return _wordWrap;
		}

		public function get selectionBeginIndex() : int
		{
			return textField.selectionBeginIndex;
		}

		public function get horizontalScrollBar() : UIScrollBar
		{
			return _horizontalScrollBar;
		}

		public function set alwaysShowSelection(param1:Boolean) : void
		{
			textField.alwaysShowSelection = param1;
		}

		override public function set enabled(param1:Boolean) : void
		{
			mouseChildren = enabled;
			invalidate(InvalidationType.STATE);
		}

		protected function setEmbedFont()
		{
			var _loc_1:Object = null;
			_loc_1 = getStyleValue("embedFonts");
			if(_loc_1 != null)
			{
				textField.embedFonts = _loc_1;
			}
		}

		public function get horizontalScrollPosition() : Number
		{
			return textField.scrollH;
		}

		public function set condenseWhite(param1:Boolean) : void
		{
			textField.condenseWhite = param1;
			invalidate(InvalidationType.DATA);
		}

		public function get horizontalScrollPolicy() : String
		{
			return _horizontalScrollPolicy;
		}

		public function set displayAsPassword(param1:Boolean) : void
		{
			textField.displayAsPassword = param1;
		}

		public function get maxVerticalScrollPosition() : int
		{
			return textField.maxScrollV;
		}

		public function set horizontalScrollPosition(param1:Number) : void
		{
			drawNow();
			textField.scrollH = param1;
		}

		public function get textHeight() : Number
		{
			drawNow();
			return textField.textHeight;
		}

		public function get textWidth() : Number
		{
			drawNow();
			return textField.textWidth;
		}

		public function get restrict() : String
		{
			return textField.restrict;
		}

		public function set editable(param1:Boolean) : void
		{
			_editable = param1;
			invalidate(InvalidationType.STATE);
		}

		protected function updateScrollBars()
		{
			_horizontalScrollBar.update();
			_verticalScrollBar.update();
			_verticalScrollBar.enabled = enabled;
			_horizontalScrollBar.enabled = enabled;
			_horizontalScrollBar.drawNow();
			_verticalScrollBar.drawNow();
		}

		public function get maxChars() : int
		{
			return textField.maxChars;
		}

		public function get length() : Number
		{
			return textField.text.length;
		}

		public function set wordWrap(param1:Boolean) : void
		{
			_wordWrap = param1;
			invalidate(InvalidationType.STATE);
		}

		public function get verticalScrollPolicy() : String
		{
			return _verticalScrollPolicy;
		}

		public function getLineMetrics(param1:int) : TextLineMetrics
		{
			return textField.getLineMetrics(param1);
		}

		public function get imeMode() : String
		{
			return IME.conversionMode;
		}

		protected function handleScroll(param1:ScrollEvent) : void
		{
			dispatchEvent(param1);
		}

		override protected function focusOutHandler(param1:FocusEvent) : void
		{
			var _loc_2:IFocusManager = null;
			_loc_2 = focusManager;
			if(_loc_2)
			{
				_loc_2.defaultButtonEnabled = true;
			}
			setSelection(0, 0);
			super.focusOutHandler(param1);
			if(editable)
			{
				setIMEMode(false);
			}
		}

		protected function delayedLayoutUpdate(param1:Event) : void
		{
			if(textHasChanged)
			{
				textHasChanged = false;
				drawLayout();
				return;
			}
			removeEventListener(Event.ENTER_FRAME, delayedLayoutUpdate);
		}

		public function set htmlText(param1:String) : void
		{
			if(componentInspectorSetting && param1 == "")
			{
				return;
			}
			if(param1 == "")
			{
				text = "";
				return;
			}
			_html = true;
			_savedHTML = param1;
			textField.htmlText = param1;
			invalidate(InvalidationType.DATA);
			invalidate(InvalidationType.STYLES);
			textHasChanged = true;
		}

		public function get text() : String
		{
			return textField.text;
		}

		public function get verticalScrollBar() : UIScrollBar
		{
			return _verticalScrollBar;
		}

		override public function get enabled() : Boolean
		{
			return super.enabled;
		}

		public function get condenseWhite() : Boolean
		{
			return textField.condenseWhite;
		}

		public function set horizontalScrollPolicy(param1:String) : void
		{
			_horizontalScrollPolicy = param1;
			invalidate(InvalidationType.SIZE);
		}

		public function get displayAsPassword() : Boolean
		{
			return textField.displayAsPassword;
		}

		override protected function draw() : void
		{
			if(isInvalid(InvalidationType.STATE))
			{
				updateTextFieldType();
			}
			if(isInvalid(InvalidationType.STYLES))
			{
				setStyles();
				setEmbedFont();
			}
			if(isInvalid(InvalidationType.STYLES, InvalidationType.STATE))
			{
				drawTextFormat();
				drawBackground();
				invalidate(InvalidationType.SIZE, false);
			}
			if(isInvalid(InvalidationType.SIZE, InvalidationType.DATA))
			{
				drawLayout();
			}
			super.draw();
		}

		protected function handleTextInput(param1:TextEvent) : void
		{
			param1.stopPropagation();
			dispatchEvent(new TextEvent(TextEvent.TEXT_INPUT, true, false, param1.text));
		}

		override protected function configUI() : void
		{
			super.configUI();
			tabChildren = true;
			textField = new TextField();
			addChild(textField);
			updateTextFieldType();
			_verticalScrollBar = new UIScrollBar();
			_verticalScrollBar.name = "V";
			_verticalScrollBar.visible = false;
			_verticalScrollBar.focusEnabled = false;
			copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
			_verticalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
			addChild(_verticalScrollBar);
			_horizontalScrollBar = new UIScrollBar();
			_horizontalScrollBar.name = "H";
			_horizontalScrollBar.visible = false;
			_horizontalScrollBar.focusEnabled = false;
			_horizontalScrollBar.direction = ScrollBarDirection.HORIZONTAL;
			copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
			_horizontalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
			addChild(_horizontalScrollBar);
			textField.addEventListener(TextEvent.TEXT_INPUT, handleTextInput, false, 0, true);
			textField.addEventListener(Event.CHANGE, handleChange, false, 0, true);
			textField.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown, false, 0, true);
			_horizontalScrollBar.scrollTarget = textField;
			_verticalScrollBar.scrollTarget = textField;
			addEventListener(MouseEvent.MOUSE_WHEEL, handleWheel, false, 0, true);
		}

		protected function setTextSize(param1:Number, param2:Number, param3:Number) : void
		{
			var _loc_4:int = NaN;
			var _loc_5:int = NaN;
			_loc_4 = param1 - (param3 * 2);
			_loc_5 = param2 - (param3 * 2);
			if(_loc_4 != textField.width)
			{
				textField.width = _loc_4;
			}
			if(_loc_5 != textField.height)
			{
				textField.height = _loc_5;
			}
		}

		public function appendText(param1:String) : void
		{
			textField.appendText(param1);
			invalidate(InvalidationType.DATA);
		}

		protected function needVScroll() : Boolean
		{
			if(_verticalScrollPolicy == ScrollPolicy.OFF)
			{
				return false;
			}
			if(_verticalScrollPolicy == ScrollPolicy.ON)
			{
				return true;
			}
			return textField.maxScrollV > 1;
		}

		public function setSelection(param1:int, param2:int) : void
		{
			textField.setSelection(param1, param2);
		}

		public function get alwaysShowSelection() : Boolean
		{
			return textField.alwaysShowSelection;
		}

		public function get htmlText() : String
		{
			return textField.htmlText;
		}

		public function set restrict(param1:String) : void
		{
			if(componentInspectorSetting && param1 == "")
			{
				param1 = null;
			}
			textField.restrict = param1;
		}

		protected function drawBackground() : void
		{
			var _loc_1:DisplayObject = null;
			var _loc_2:String = null;
			_loc_1 = background;
			_loc_2 = enabled ? "upSkin" : "disabledSkin";
			background = getDisplayObjectInstance(getStyleValue(_loc_2));
			if(background != null)
			{
				addChildAt(background, 0);
			}
			if((_loc_1 == null) && _loc_1 == background && contains(_loc_1))
			{
				removeChild(_loc_1);
			}
		}

		public function set maxChars(param1:int) : void
		{
			textField.maxChars = param1;
		}

		public function get maxHorizontalScrollPosition() : int
		{
			return textField.maxScrollH;
		}

		protected function drawLayout() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			var _loc_3:Boolean = false;
			var _loc_4:int = NaN;
			var _loc_5:Boolean = false;
			_loc_1 = Number(getStyleValue("textPadding"));
			var _loc_6:int = _loc_1;
			textField.y = _loc_6;
			textField.x = _loc_6;
			background.width = width;
			background.height = height;
			_loc_2 = height;
			_loc_3 = needVScroll();
			_loc_4 = width - 0;
			_loc_5 = needHScroll();
			if(_loc_5)
			{
				_loc_2 = _loc_2 - _horizontalScrollBar.height;
			}
			setTextSize(_loc_4, _loc_2, _loc_6);
			_verticalScrollBar.visible = false;
			_horizontalScrollBar.visible = false;
			updateScrollBars();
			addEventListener(Event.ENTER_FRAME, delayedLayoutUpdate, false, 0, true);
		}

		protected function setStyles() : void
		{
			copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
			copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
		}

		protected function needHScroll() : Boolean
		{
			if(_horizontalScrollPolicy == ScrollPolicy.OFF)
			{
				return false;
			}
			if(_horizontalScrollPolicy == ScrollPolicy.ON)
			{
				return true;
			}
			return textField.maxScrollH > 0;
		}

		protected function drawTextFormat() : void
		{
			var _loc_1:Object = null;
			var _loc_2:TextFormat = null;
			var _loc_3:TextFormat = null;
			_loc_1 = UIComponent.getStyleDefinition();
			_loc_2 = enabled ? _loc_1.defaultTextFormat : _loc_1.defaultDisabledTextFormat;
			textField.setTextFormat(_loc_2);
			_loc_3 = getStyleValue(enabled ? "textFormat" : "disabledTextFormat");
			if(_loc_3 != null)
			{
				textField.setTextFormat(_loc_3);
			}
			else
			{
				_loc_3 = _loc_2;
			}
			textField.defaultTextFormat = _loc_3;
			setEmbedFont();
			if(_html)
			{
				textField.htmlText = _savedHTML;
			}
		}

		public function set verticalScrollPolicy(param1:String) : void
		{
			_verticalScrollPolicy = param1;
			invalidate(InvalidationType.SIZE);
		}

		protected function handleChange(param1:Event) : void
		{
			param1.stopPropagation();
			dispatchEvent(new Event(Event.CHANGE, true));
			invalidate(InvalidationType.DATA);
		}
	}
}
package fl.controls
{
	import fl.core.*;
	import fl.events.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import flash.ui.*;

	public class TextInput extends UIComponent implements IFocusManagerComponent
	{
		private static var defaultStyles:Object = {upSkin:"TextInput_upSkin", disabledSkin:"TextInput_disabledSkin", focusRectSkin:null, focusRectPadding:null, textFormat:null, disabledTextFormat:null, textPadding:0, embedFonts:false};
		public static var createAccessibilityImplementation:Function;
		protected var _html:Boolean = false;
		protected var _savedHTML:String;
		protected var background:DisplayObject;
		protected var _editable:Boolean = true;
		public var textField:TextField;

		final public static function getStyleDefinition() : Object
		{
			return defaultStyles;
		}

		public function TextInput()
		{
			_editable = true;
			_html = false;
			super();
		}

		override public function drawFocus(param1:Boolean) : void
		{
			if(focusTarget != null)
			{
				focusTarget.drawFocus(param1);
				return;
			}
			super.drawFocus(param1);
		}

		public function set imeMode(param1:String) : void
		{
			_imeMode = param1;
		}

		override protected function isOurFocus(param1:DisplayObject) : Boolean
		{
			return super.isOurFocus(param1);
		}

		protected function handleKeyDown(param1:KeyboardEvent) : void
		{
			if(param1.keyCode == Keyboard.ENTER)
			{
				dispatchEvent(new ComponentEvent(ComponentEvent.ENTER, true));
			}
		}

		public function set text(param1:String) : void
		{
			textField.text = param1;
			_html = false;
			invalidate(InvalidationType.DATA);
			invalidate(InvalidationType.STYLES);
		}

		protected function updateTextFieldType() : void
		{
			textField.type = enabled && editable ? TextFieldType.INPUT : TextFieldType.DYNAMIC;
			textField.selectable = enabled;
		}

		public function get selectionEndIndex() : int
		{
			return textField.selectionEndIndex;
		}

		public function get editable() : Boolean
		{
			return _editable;
		}

		override protected function focusInHandler(param1:FocusEvent) : void
		{
			var _loc_2:IFocusManager = null;
			if(param1.target == this)
			{
				stage.focus = textField;
			}
			_loc_2 = focusManager;
			if(editable && _loc_2)
			{
				_loc_2.showFocusIndicator = true;
				textField.selectable;
				if(textField.selectable && textField.selectionBeginIndex == textField.selectionBeginIndex)
				{
					setSelection(0, textField.length);
				}
			}
			super.focusInHandler(param1);
			if(editable)
			{
				setIMEMode(true);
			}
		}

		public function get selectionBeginIndex() : int
		{
			return textField.selectionBeginIndex;
		}

		public function set alwaysShowSelection(param1:Boolean) : void
		{
			textField.alwaysShowSelection = param1;
		}

		override public function set enabled(param1:Boolean) : void
		{
			updateTextFieldType();
		}

		protected function setEmbedFont()
		{
			var _loc_1:Object = null;
			_loc_1 = getStyleValue("embedFonts");
			if(_loc_1 != null)
			{
				textField.embedFonts = _loc_1;
			}
		}

		public function get horizontalScrollPosition() : int
		{
			return textField.scrollH;
		}

		public function set condenseWhite(param1:Boolean) : void
		{
			textField.condenseWhite = param1;
		}

		public function set displayAsPassword(param1:Boolean) : void
		{
			textField.displayAsPassword = param1;
		}

		public function set horizontalScrollPosition(param1:int) : void
		{
			textField.scrollH = param1;
		}

		public function get restrict() : String
		{
			return textField.restrict;
		}

		public function get textWidth() : Number
		{
			return textField.textWidth;
		}

		public function get textHeight() : Number
		{
			return textField.textHeight;
		}

		public function set editable(param1:Boolean) : void
		{
			_editable = param1;
			updateTextFieldType();
		}

		public function get maxChars() : int
		{
			return textField.maxChars;
		}

		public function get length() : int
		{
			return textField.length;
		}

		public function getLineMetrics(param1:int) : TextLineMetrics
		{
			return textField.getLineMetrics(param1);
		}

		public function get imeMode() : String
		{
			return _imeMode;
		}

		override protected function focusOutHandler(param1:FocusEvent) : void
		{
			super.focusOutHandler(param1);
			if(editable)
			{
				setIMEMode(false);
			}
		}

		public function set htmlText(param1:String) : void
		{
			if(param1 == "")
			{
				text = "";
				return;
			}
			_html = true;
			_savedHTML = param1;
			textField.htmlText = param1;
			invalidate(InvalidationType.DATA);
			invalidate(InvalidationType.STYLES);
		}

		public function get text() : String
		{
			return textField.text;
		}

		override public function get enabled() : Boolean
		{
			return super.enabled;
		}

		public function get condenseWhite() : Boolean
		{
			return textField.condenseWhite;
		}

		public function get alwaysShowSelection() : Boolean
		{
			return textField.alwaysShowSelection;
		}

		override protected function draw() : void
		{
			var _loc_1:Object = null;
			if(isInvalid(InvalidationType.STYLES, InvalidationType.STATE))
			{
				drawTextFormat();
				drawBackground();
				_loc_1 = getStyleValue("embedFonts");
				if(_loc_1 != null)
				{
					textField.embedFonts = _loc_1;
				}
				invalidate(InvalidationType.SIZE, false);
			}
			if(isInvalid(InvalidationType.SIZE))
			{
				drawLayout();
			}
			super.draw();
		}

		protected function handleTextInput(param1:TextEvent) : void
		{
			param1.stopPropagation();
			dispatchEvent(new TextEvent(TextEvent.TEXT_INPUT, true, false, param1.text));
		}

		override protected function configUI() : void
		{
			super.configUI();
			tabChildren = true;
			textField = new TextField();
			addChild(textField);
			updateTextFieldType();
			textField.addEventListener(TextEvent.TEXT_INPUT, handleTextInput, false, 0, true);
			textField.addEventListener(Event.CHANGE, handleChange, false, 0, true);
			textField.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown, false, 0, true);
		}

		public function setSelection(param1:int, param2:int) : void
		{
			textField.setSelection(param1, param2);
		}

		public function get displayAsPassword() : Boolean
		{
			return textField.displayAsPassword;
		}

		public function appendText(param1:String) : void
		{
			textField.appendText(param1);
		}

		public function set restrict(param1:String) : void
		{
			if(componentInspectorSetting && param1 == "")
			{
				param1 = null;
			}
			textField.restrict = param1;
		}

		public function get htmlText() : String
		{
			return textField.htmlText;
		}

		protected function drawBackground() : void
		{
			var _loc_1:DisplayObject = null;
			var _loc_2:String = null;
			_loc_1 = background;
			_loc_2 = enabled ? "upSkin" : "disabledSkin";
			background = getDisplayObjectInstance(getStyleValue(_loc_2));
			if(background == null)
			{
				return;
			}
			addChildAt(background, 0);
			if((_loc_1 == null) && _loc_1 == background && contains(_loc_1))
			{
				removeChild(_loc_1);
			}
		}

		override public function setFocus() : void
		{
			stage.focus = textField;
		}

		protected function drawLayout() : void
		{
			var _loc_1:int = NaN;
			_loc_1 = Number(getStyleValue("textPadding"));
			if(background != null)
			{
				background.width = width;
				background.height = height;
			}
			textField.width = width - (2 * _loc_1);
			textField.height = height - (2 * _loc_1);
			var _loc_2:int = _loc_1;
			textField.y = _loc_2;
			textField.x = _loc_2;
		}

		public function set maxChars(param1:int) : void
		{
			textField.maxChars = param1;
		}

		public function get maxHorizontalScrollPosition() : int
		{
			return textField.maxScrollH;
		}

		protected function drawTextFormat() : void
		{
			var _loc_1:Object = null;
			var _loc_2:TextFormat = null;
			var _loc_3:TextFormat = null;
			_loc_1 = UIComponent.getStyleDefinition();
			_loc_2 = enabled ? _loc_1.defaultTextFormat : _loc_1.defaultDisabledTextFormat;
			textField.setTextFormat(_loc_2);
			_loc_3 = getStyleValue(enabled ? "textFormat" : "disabledTextFormat");
			if(_loc_3 != null)
			{
				textField.setTextFormat(_loc_3);
			}
			else
			{
				_loc_3 = _loc_2;
			}
			textField.defaultTextFormat = _loc_3;
			setEmbedFont();
			if(_html)
			{
				textField.htmlText = _savedHTML;
			}
		}

		protected function handleChange(param1:Event) : void
		{
			param1.stopPropagation();
			dispatchEvent(new Event(Event.CHANGE, true));
		}
	}
}
package fl.controls
{
	import fl.core.*;
	import fl.events.*;
	import flash.events.*;
	import flash.text.*;

	public class UIScrollBar extends ScrollBar
	{
		private static var defaultStyles:Object = {};
		protected var inScroll:Boolean = false;
		protected var _scrollTarget:TextField;
		protected var inEdit:Boolean = false;

		final public static function getStyleDefinition() : Object
		{
			return UIComponent.mergeStyles(defaultStyles, ScrollBar.getStyleDefinition());
		}

		public function UIScrollBar()
		{
			inEdit = false;
			inScroll = false;
			super();
		}

		protected function handleTargetScroll(param1:Event) : void
		{
			if(inDrag)
			{
				return;
			}
			if(!enabled)
			{
				return;
			}
			inEdit = true;
			updateScrollTargetProperties();
			scrollPosition = direction == ScrollBarDirection.HORIZONTAL ? _scrollTarget.scrollH : _scrollTarget.scrollV;
			inEdit = false;
		}

		override public function set minScrollPosition(param1:Number) : void
		{
		}

		override public function setScrollPosition(param1:Number, param2:Boolean = true) : void
		{
			super.setScrollPosition(param1, param2);
			if(!_scrollTarget)
			{
				inScroll = false;
				return;
			}
			updateTargetScroll();
		}

		override public function setScrollProperties(param1:Number, param2:Number, param3:Number, param4:Number = 0) : void
		{
			var _loc_5:int = NaN;
			var _loc_6:int = NaN;
			_loc_5 = param3;
			_loc_6 = param2 < 0 ? 0 : param2;
			if(_scrollTarget != null)
			{
				if(direction == ScrollBarDirection.HORIZONTAL)
				{
					_loc_5 = param3 > _scrollTarget.maxScrollH ? _scrollTarget.maxScrollH : _loc_5;
				}
				else
				{
					_loc_5 = param3 > _scrollTarget.maxScrollV ? _scrollTarget.maxScrollV : _loc_5;
				}
			}
			super.setScrollProperties(param1, _loc_6, _loc_5, param4);
		}

		public function get scrollTargetName() : String
		{
			return _scrollTarget.name;
		}

		public function get scrollTarget() : TextField
		{
			return _scrollTarget;
		}

		protected function updateScrollTargetProperties() : void
		{
			var _loc_1:Boolean = false;
			var _loc_2:int = NaN;
			if(_scrollTarget == null)
			{
				setScrollProperties(pageSize, minScrollPosition, maxScrollPosition, pageScrollSize);
				scrollPosition = 0;
			}
			else
			{
				_loc_1 = direction == ScrollBarDirection.HORIZONTAL;
				_loc_2 = 10;
				setScrollProperties(_loc_2, 1, _scrollTarget.maxScrollV, pageScrollSize);
				scrollPosition = _scrollTarget.scrollV;
			}
		}

		public function update() : void
		{
			inEdit = true;
			updateScrollTargetProperties();
			inEdit = false;
		}

		public function set scrollTargetName(param1:String) : void
		{
			var target:String = param1;
			try
			{
				scrollTarget = parent.getChildByName(target);
			}
			catch(error:Error)
			{
				throw new Error("ScrollTarget not found, or is not a TextField");
			}
		}

		override public function set direction(param1:String) : void
		{
			if(isLivePreview)
			{
				return;
			}
			updateScrollTargetProperties();
		}

		protected function handleTargetChange(param1:Event) : void
		{
			inEdit = true;
			setScrollPosition(direction == ScrollBarDirection.HORIZONTAL ? _scrollTarget.scrollH : _scrollTarget.scrollV, true);
			updateScrollTargetProperties();
			inEdit = false;
		}

		override public function set maxScrollPosition(param1:Number) : void
		{
			var _loc_2:int = NaN;
			_loc_2 = param1;
			if(_scrollTarget != null)
			{
				if(direction == ScrollBarDirection.HORIZONTAL)
				{
					_loc_2 = _loc_2 > _scrollTarget.maxScrollH ? _scrollTarget.maxScrollH : _loc_2;
				}
				else
				{
					_loc_2 = _loc_2 > _scrollTarget.maxScrollV ? _scrollTarget.maxScrollV : _loc_2;
				}
			}
		}

		protected function updateTargetScroll(param1:ScrollEvent = null) : void
		{
			if(inEdit)
			{
				return;
			}
			if(direction == ScrollBarDirection.HORIZONTAL)
			{
				_scrollTarget.scrollH = scrollPosition;
			}
			else
			{
				_scrollTarget.scrollV = scrollPosition;
			}
		}

		override protected function draw() : void
		{
			if(isInvalid(InvalidationType.DATA))
			{
				updateScrollTargetProperties();
			}
			super.draw();
		}

		public function set scrollTarget(param1:TextField) : void
		{
			if(_scrollTarget != null)
			{
				_scrollTarget.removeEventListener(Event.CHANGE, handleTargetChange, false);
				_scrollTarget.removeEventListener(TextEvent.TEXT_INPUT, handleTargetChange, false);
				_scrollTarget.removeEventListener(Event.SCROLL, handleTargetScroll, false);
				removeEventListener(ScrollEvent.SCROLL, updateTargetScroll, false);
			}
			_scrollTarget = param1;
			if(_scrollTarget != null)
			{
				_scrollTarget.addEventListener(Event.CHANGE, handleTargetChange, false, 0, true);
				_scrollTarget.addEventListener(TextEvent.TEXT_INPUT, handleTargetChange, false, 0, true);
				_scrollTarget.addEventListener(Event.SCROLL, handleTargetScroll, false, 0, true);
				addEventListener(ScrollEvent.SCROLL, updateTargetScroll, false, 0, true);
			}
			invalidate(InvalidationType.DATA);
		}

		override public function get direction() : String
		{
			return super.direction;
		}
	}
}
package fl.controls.dataGridClasses
{
	import fl.controls.*;
	import fl.controls.listClasses.*;

	public class DataGridCellEditor extends TextInput implements ICellRenderer
	{
		private static var defaultStyles:Object = {textPadding:1, textFormat:null, upSkin:"DataGridCellEditor_skin"};
		protected var _data:Object;
		protected var _listData:ListData;

		final public static function getStyleDefinition() : Object
		{
			return defaultStyles;
		}

		public function DataGridCellEditor() : void
		{
			super();
		}

		public function get selected() : Boolean
		{
			return false;
		}

		public function set listData(param1:ListData) : void
		{
			_listData = param1;
			text = _listData.label;
		}

		public function setMouseState(param1:String) : void
		{
		}

		public function set selected(param1:Boolean) : void
		{
		}

		public function set data(param1:Object) : void
		{
			_data = param1;
		}

		public function get listData() : ListData
		{
			return _listData;
		}

		public function get data() : Object
		{
			return _data;
		}
	}
}
package fl.controls.dataGridClasses
{
	import fl.controls.*;
	import fl.core.*;

	public class DataGridColumn extends Object
	{
		private var _headerText:String;
		public var editorDataField:String = "text";
		private var forceImport:DataGridCellEditor;
		private var _headerRenderer:Object;
		public var sortOptions:uint = 0;
		private var _cellRenderer:Object;
		private var _columnName:String;
		public var resizable:Boolean = true;
		private var _sortCompareFunction:Function;
		private var _visible:Boolean = true;
		public var sortDescending:Boolean = false;
		public var owner:DataGrid;
		private var _imeMode:String;
		private var _width:Number = -28;
		public var editable:Boolean = true;
		public var itemEditor:Object = "fl.controls.dataGridClasses.DataGridCellEditor";
		public var explicitWidth:Number;
		private var _minWidth:Number = 20;
		private var _labelFunction:Function;
		public var sortable:Boolean = true;
		public var colNum:Number;
		public var dataField:String;

		public function DataGridColumn(param1:String = null)
		{
			_minWidth = 20;
			_width = 100;
			_visible = true;
			sortable = true;
			resizable = true;
			editable = true;
			itemEditor = "fl.controls.dataGridClasses.DataGridCellEditor";
			editorDataField = "text";
			sortDescending = false;
			sortOptions = 0;
			super();
			if(param1)
			{
				dataField = param1;
				headerText = param1;
			}
		}

		public function set headerRenderer(param1:Object) : void
		{
			_headerRenderer = param1;
			if(owner)
			{
				owner.invalidate(InvalidationType.DATA);
			}
		}

		public function get imeMode() : String
		{
			return _imeMode;
		}

		public function setWidth(param1:Number) : void
		{
			_width = param1;
		}

		public function set width(param1:Number) : void
		{
			var _loc_2:Boolean = false;
			explicitWidth = param1;
			if(owner != null)
			{
				_loc_2 = resizable;
				resizable = false;
				owner.resizeColumn(colNum, param1);
				resizable = _loc_2;
			}
			else
			{
				_width = param1;
			}
		}

		public function set cellRenderer(param1:Object) : void
		{
			_cellRenderer = param1;
			if(owner)
			{
				owner.invalidate(InvalidationType.DATA);
			}
		}

		public function get minWidth() : Number
		{
			return _minWidth;
		}

		public function set imeMode(param1:String) : void
		{
			_imeMode = param1;
		}

		public function toString() : String
		{
			return "[object DataGridColumn]";
		}

		public function get visible() : Boolean
		{
			return _visible;
		}

		public function itemToLabel(param1:Object) : String
		{
			var data:Object = param1;
			if(!data)
			{
				return " ";
			}
			if(labelFunction != null)
			{
				return labelFunction(data);
			}
			if(owner.labelFunction != null)
			{
				return owner.labelFunction(data, this);
			}
			if(typeof(data) == "object" || typeof(data) == "xml")
			{
				try
				{
					data = data[dataField];
				}
				catch(e:Error)
				{
					data = null;
				}
			}
			if(data is String)
			{
				return String(data);
			}
			try
			{
				return data.toString();
			}
			catch(e:Error)
			{
			}
			return " ";
		}

		public function set minWidth(param1:Number) : void
		{
			_minWidth = param1;
			if(_width < param1)
			{
				_width = param1;
			}
			if(owner)
			{
				owner.invalidate(InvalidationType.SIZE);
			}
		}

		public function set headerText(param1:String) : void
		{
			_headerText = param1;
			if(owner)
			{
				owner.invalidate(InvalidationType.DATA);
			}
		}

		public function set sortCompareFunction(param1:Function) : void
		{
			_sortCompareFunction = param1;
		}

		public function get width() : Number
		{
			return _width;
		}

		public function get cellRenderer() : Object
		{
			return _cellRenderer;
		}

		public function set labelFunction(param1:Function) : void
		{
			if(_labelFunction == param1)
			{
				return;
			}
			_labelFunction = param1;
			if(owner)
			{
				owner.invalidate(InvalidationType.DATA);
			}
		}

		public function get headerText() : String
		{
			return _headerText != null ? _headerText : dataField;
		}

		public function get sortCompareFunction() : Function
		{
			return _sortCompareFunction;
		}

		public function get headerRenderer() : Object
		{
			return _headerRenderer;
		}

		public function get labelFunction() : Function
		{
			return _labelFunction;
		}

		public function set visible(param1:Boolean) : void
		{
			if(_visible != param1)
			{
				_visible = param1;
				if(owner)
				{
					owner.invalidate(InvalidationType.SIZE);
				}
			}
		}
	}
}
package fl.controls.dataGridClasses
{
	import fl.controls.*;

	public class HeaderRenderer extends LabelButton
	{
		private static var defaultStyles:Object = {upSkin:"HeaderRenderer_upSkin", downSkin:"HeaderRenderer_downSkin", overSkin:"HeaderRenderer_overSkin", disabledSkin:"HeaderRenderer_disabledSkin", selectedDisabledSkin:"HeaderRenderer_selectedDisabledSkin", selectedUpSkin:"HeaderRenderer_selectedUpSkin", selectedDownSkin:"HeaderRenderer_selectedDownSkin", selectedOverSkin:"HeaderRenderer_selectedOverSkin", textFormat:null, disabledTextFormat:null, textPadding:5};
		public var _column:uint;

		final public static function getStyleDefinition() : Object
		{
			return defaultStyles;
		}

		public function HeaderRenderer() : void
		{
			super();
			focusEnabled = false;
		}

		public function set column(param1:uint) : void
		{
			_column = param1;
		}

		public function get column() : uint
		{
			return _column;
		}

		override protected function drawLayout() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			var _loc_4:int = NaN;
			var _loc_5:int = NaN;
			_loc_1 = Number(getStyleValue("textPadding"));
			textField.height = textField.textHeight + 4;
			textField.visible = label.length > 0;
			_loc_2 = textField.textWidth + 4;
			_loc_3 = textField.textHeight + 4;
			_loc_4 = icon == null ? 0 : icon.width + 4;
			_loc_5 = Math.max(0, Math.min(_loc_2, (width - (2 * _loc_1)) - _loc_4));
			if(icon != null)
			{
				icon.x = (width - _loc_1) - icon.width - 2;
				icon.y = Math.round((height - icon.height) / 2);
			}
			textField.width = _loc_5;
			textField.x = _loc_1;
			textField.y = Math.round((height - textField.height) / 2);
			background.width = width;
			background.height = height;
		}
	}
}
package fl.controls.listClasses
{
	import fl.controls.*;
	import flash.events.*;

	public class CellRenderer extends LabelButton implements ICellRenderer
	{
		private static var defaultStyles:Object = {upSkin:"CellRenderer_upSkin", downSkin:"CellRenderer_downSkin", overSkin:"CellRenderer_overSkin", disabledSkin:"CellRenderer_disabledSkin", selectedDisabledSkin:"CellRenderer_selectedDisabledSkin", selectedUpSkin:"CellRenderer_selectedUpSkin", selectedDownSkin:"CellRenderer_selectedDownSkin", selectedOverSkin:"CellRenderer_selectedOverSkin", textFormat:null, disabledTextFormat:null, embedFonts:null, textPadding:5};
		protected var _data:Object;
		protected var _listData:ListData;

		final public static function getStyleDefinition() : Object
		{
			return defaultStyles;
		}

		public function CellRenderer() : void
		{
			super();
			toggle = true;
			focusEnabled = false;
		}

		override protected function toggleSelected(param1:MouseEvent) : void
		{
		}

		override public function get selected() : Boolean
		{
			return super.selected;
		}

		public function set listData(param1:ListData) : void
		{
			_listData = param1;
			label = _listData.label;
			setStyle("icon", _listData.icon);
		}

		override public function set selected(param1:Boolean) : void
		{
		}

		public function set data(param1:Object) : void
		{
			_data = param1;
		}

		public function get listData() : ListData
		{
			return _listData;
		}

		override public function setSize(param1:Number, param2:Number) : void
		{
			super.setSize(param1, param2);
		}

		override protected function drawLayout() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			_loc_1 = Number(getStyleValue("textPadding"));
			_loc_2 = 0;
			if(icon != null)
			{
				icon.x = _loc_1;
				icon.y = Math.round((height - icon.height) >> 1);
				_loc_2 = icon.width + _loc_1;
			}
			if(label.length > 0)
			{
				textField.visible = true;
				_loc_3 = Math.max(0, (width - _loc_2) - (_loc_1 * 2));
				textField.width = _loc_3;
				textField.height = textField.textHeight + 4;
				textField.x = _loc_2 + _loc_1;
				textField.y = Math.round((height - textField.height) >> 1);
			}
			else
			{
				textField.visible = false;
			}
			background.width = width;
			background.height = height;
		}

		public function get data() : Object
		{
			return _data;
		}
	}
}
package fl.controls.listClasses
{
	public interface ICellRenderer
	{
		function setSize(param1:Number, param2:Number) : void;

		function get listData() : ListData;

		function get data() : Object;

		function setMouseState(param1:String) : void;

		function set x(param1:Number) : void;

		function set y(param1:Number) : void;

		function set data(param1:Object) : void;

		function set selected(param1:Boolean) : void;

		function set listData(param1:ListData) : void;

		function get selected() : Boolean;
	}
}
package fl.controls.listClasses
{
	import fl.core.*;

	public class ListData extends Object
	{
		protected var _index:uint;
		protected var _owner:UIComponent;
		protected var _label:String;
		protected var _icon:Object = null;
		protected var _row:uint;
		protected var _column:uint;

		public function ListData(param1:String, param2:Object, param3:UIComponent, param4:uint, param5:uint, param6:uint = 0)
		{
			_icon = null;
			super();
			_label = param1;
			_icon = param2;
			_owner = param3;
			_index = param4;
			_row = param5;
			_column = param6;
		}

		public function get owner() : UIComponent
		{
			return _owner;
		}

		public function get label() : String
		{
			return _label;
		}

		public function get row() : uint
		{
			return _row;
		}

		public function get index() : uint
		{
			return _index;
		}

		public function get icon() : Object
		{
			return _icon;
		}

		public function get column() : uint
		{
			return _column;
		}
	}
}
package fl.core
{
	import flash.display.*;

	dynamic public class ComponentShim extends MovieClip
	{
		public function ComponentShim()
		{
			super();
		}
	}
}
package fl.core
{
	public class InvalidationType extends Object
	{
		public static const SIZE:String = "size";
		public static const ALL:String = "all";
		public static const DATA:String = "data";
		public static const SCROLL:String = "scroll";
		public static const STATE:String = "state";
		public static const STYLES:String = "styles";
		public static const SELECTED:String = "selected";
		public static const RENDERER_STYLES:String = "rendererStyles";

		public function InvalidationType()
		{
			super();
		}
	}
}
package fl.core
{
	import fl.events.*;
	import fl.managers.*;
	import flash.display.*;
	import flash.events.*;
	import flash.system.*;
	import flash.text.*;
	import flash.utils.*;

	public class UIComponent extends Sprite
	{
		public static var inCallLaterPhase:Boolean = false;
		private static var defaultStyles:Object = {focusRectSkin:"focusRectSkin", focusRectPadding:2, textFormat:new TextFormat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0), disabledTextFormat:new TextFormat("_sans", 11, 10066329, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0), defaultTextFormat:new TextFormat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0), defaultDisabledTextFormat:new TextFormat("_sans", 11, 10066329, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0)};
		public static var createAccessibilityImplementation:Function;
		private static var focusManagers:Dictionary = new Dictionary(false);
		protected var _enabled:Boolean = true;
		private var _mouseFocusEnabled:Boolean = true;
		protected var startHeight:Number;
		protected var _height:Number;
		protected var _oldIMEMode:String = null;
		protected var startWidth:Number;
		public var focusTarget:IFocusManagerComponent;
		protected var errorCaught:Boolean = false;
		protected var uiFocusRect:DisplayObject;
		protected var _width:Number;
		public var version:String = "3.0.0.15";
		protected var isFocused:Boolean = false;
		protected var callLaterMethods:Dictionary;
		private var _focusEnabled:Boolean = true;
		private var tempText:TextField;
		protected var invalidateFlag:Boolean = false;
		protected var _inspector:Boolean = false;
		protected var sharedStyles:Object;
		protected var invalidHash:Object;
		protected var isLivePreview:Boolean = false;
		protected var _imeMode:String = null;
		protected var instanceStyles:Object;
		protected var _x:Number;
		protected var _y:Number;

		final public static function getStyleDefinition() : Object
		{
			return defaultStyles;
		}

		final public static function mergeStyles(...restArguments) : Object
		{
			var _loc_2:Object = null;
			var _loc_3:uint = 0;
			var _loc_4:uint = 0;
			var _loc_5:Object = null;
			var _loc_6:String = null;
			_loc_2 = {};
			_loc_3 = restArguments.length;
			_loc_4 = 0;
			while(_loc_4 < _loc_3)
			{
				_loc_5 = restArguments[_loc_4];
				var _loc_7:int = 0;
				var _loc_8:* = _loc_5;
				for each(_loc_6 in _loc_8)
				{
					if(_loc_2[_loc_6] != null)
					{
						continue;
					}
					_loc_2[_loc_6] = restArguments[_loc_4][_loc_6];
				}
				_loc_4 = _loc_4 + 1;
			}
			return _loc_2;
		}

		public function UIComponent()
		{
			version = "3.0.0.15";
			isLivePreview = false;
			invalidateFlag = false;
			_enabled = true;
			isFocused = false;
			_focusEnabled = true;
			_mouseFocusEnabled = true;
			_imeMode = null;
			_oldIMEMode = null;
			errorCaught = false;
			_inspector = false;
			super();
			instanceStyles = {};
			sharedStyles = {};
			invalidHash = {};
			callLaterMethods = new Dictionary();
			StyleManager.registerInstance(this);
			configUI();
			invalidate(InvalidationType.ALL);
			tabEnabled = this is IFocusManagerComponent;
			focusRect = false;
			if(tabEnabled)
			{
				addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
				addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
				addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
				addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
			}
			initializeFocusManager();
			addEventListener(Event.ENTER_FRAME, hookAccessibility, false, 0, true);
		}

		public function drawFocus(param1:Boolean) : void
		{
			var _loc_2:int = NaN;
			isFocused = param1;
			if(!(uiFocusRect == null) && contains(uiFocusRect))
			{
				removeChild(uiFocusRect);
				uiFocusRect = null;
			}
			if(param1)
			{
				uiFocusRect = getDisplayObjectInstance(getStyleValue("focusRectSkin"));
				if(uiFocusRect == null)
				{
					return;
				}
				_loc_2 = Number(getStyleValue("focusRectPadding"));
				uiFocusRect.x = -_loc_2;
				uiFocusRect.y = -_loc_2;
				uiFocusRect.width = width + (_loc_2 * 2);
				uiFocusRect.height = height + (_loc_2 * 2);
				addChildAt(uiFocusRect, 0);
			}
		}

		private function callLaterDispatcher(param1:Event) : void
		{
			var _loc_2:Dictionary = null;
			var _loc_3:Object = null;
			if(param1.type == Event.ADDED_TO_STAGE)
			{
				removeEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher);
				stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
				stage.invalidate();
				return;
			}
			param1.target.removeEventListener(Event.RENDER, callLaterDispatcher);
			if(stage == null)
			{
				addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
				return;
			}
			inCallLaterPhase = true;
			_loc_2 = callLaterMethods;
			var _loc_4:int = 0;
			var _loc_5:* = _loc_2;
			for each(_loc_3 in _loc_5)
			{
				_loc_3();
			}
			inCallLaterPhase = false;
		}

		private function addedHandler(param1:Event) : void
		{
			removeEventListener("addedToStage", addedHandler);
			initializeFocusManager();
		}

		protected function getStyleValue(param1:String) : Object
		{
			return instanceStyles[param1] == null ? sharedStyles[param1] : instanceStyles[param1];
		}

		protected function isOurFocus(param1:DisplayObject) : Boolean
		{
			return param1 == this;
		}

		override public function get scaleX() : Number
		{
			return width / startWidth;
		}

		override public function get scaleY() : Number
		{
			return height / startHeight;
		}

		override public function set height(param1:Number) : void
		{
			if(_height == param1)
			{
				return;
			}
			setSize(width, param1);
		}

		protected function keyDownHandler(param1:KeyboardEvent) : void
		{
		}

		protected function focusInHandler(param1:FocusEvent) : void
		{
			var _loc_2:IFocusManager = null;
			if(isOurFocus(param1.target))
			{
				_loc_2 = focusManager;
				if(_loc_2 && _loc_2.showFocusIndicator)
				{
					drawFocus(true);
					isFocused = true;
				}
			}
		}

		public function setStyle(param1:String, param2:Object) : void
		{
			if(!(instanceStyles[param1] === param2 && param2 is TextFormat))
			{
				return;
			}
			instanceStyles[param1] = param2;
			invalidate(InvalidationType.STYLES);
		}

		override public function get visible() : Boolean
		{
			return super.visible;
		}

		public function get componentInspectorSetting() : Boolean
		{
			return _inspector;
		}

		override public function get x() : Number
		{
			return isNaN(_x) ? super.x : _x;
		}

		override public function get y() : Number
		{
			return isNaN(_y) ? super.y : _y;
		}

		protected function setIMEMode(param1:Boolean)
		{
			var enabled:Boolean = param1;
			if(_imeMode != null)
			{
				if(enabled)
				{
					IME.enabled = true;
					_oldIMEMode = IME.conversionMode;
					try
					{
						if(errorCaught && IME.conversionMode == IMEConversionMode.UNKNOWN)
						{
							IME.conversionMode = _imeMode;
						}
						errorCaught = false;
					}
					catch(e:Error)
					{
						errorCaught = true;
						throw new Error("IME mode not supported: " + _imeMode);
					}
				}
				else
				{
					if((IME.conversionMode == IMEConversionMode.UNKNOWN) && _oldIMEMode == IMEConversionMode.UNKNOWN)
					{
						IME.conversionMode = _oldIMEMode;
					}
					IME.enabled = false;
				}
			}
		}

		public function set enabled(param1:Boolean) : void
		{
			if(param1 == _enabled)
			{
				return;
			}
			_enabled = param1;
			invalidate(InvalidationType.STATE);
		}

		public function setSharedStyle(param1:String, param2:Object) : void
		{
			if(!(sharedStyles[param1] === param2 && param2 is TextFormat))
			{
				return;
			}
			sharedStyles[param1] = param2;
			if(instanceStyles[param1] == null)
			{
				invalidate(InvalidationType.STYLES);
			}
		}

		protected function keyUpHandler(param1:KeyboardEvent) : void
		{
		}

		public function set focusEnabled(param1:Boolean) : void
		{
			_focusEnabled = param1;
		}

		override public function set scaleX(param1:Number) : void
		{
			setSize(startWidth * param1, height);
		}

		public function get mouseFocusEnabled() : Boolean
		{
			return _mouseFocusEnabled;
		}

		override public function set scaleY(param1:Number) : void
		{
			setSize(width, startHeight * param1);
		}

		protected function getDisplayObjectInstance(param1:Object) : DisplayObject
		{
			var classDef:Object = null;
			var skin:Object = param1;
			classDef = null;
			if(skin is Class)
			{
				return new skin();
			}
			if(skin is DisplayObject)
			{
				skin.x = 0;
				skin.y = 0;
				return skin;
			}
			try
			{
				classDef = getDefinitionByName(skin.toString());
			}
			catch(e:Error)
			{
				try
				{
					classDef = loaderInfo.applicationDomain.getDefinition(e.toString());
				}
				catch(e:Error)
				{
				}
			}
			if(classDef == null)
			{
				return null;
			}
			return new classDef();
		}

		protected function copyStylesToChild(param1:UIComponent, param2:Object) : void
		{
			var _loc_3:String = null;
			var _loc_4:int = 0;
			var _loc_5:* = param2;
			for each(_loc_3 in _loc_5)
			{
				param1.setStyle(_loc_3, getStyleValue(_loc_5[_loc_3]));
			}
		}

		protected function beforeComponentParameters() : void
		{
		}

		protected function callLater(param1:Function) : void
		{
			if(inCallLaterPhase)
			{
				return;
			}
			callLaterMethods[param1] = true;
			if(stage != null)
			{
				stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
				stage.invalidate();
			}
			else
			{
				addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
			}
		}

		protected function createFocusManager() : void
		{
			if(focusManagers[stage] == null)
			{
				focusManagers[stage] = new FocusManager(stage);
			}
		}

		override public function set visible(param1:Boolean) : void
		{
			var _loc_2:String = null;
			if(super.visible == param1)
			{
				return;
			}
			_loc_2 = param1 ? ComponentEvent.SHOW : ComponentEvent.HIDE;
			dispatchEvent(new ComponentEvent(_loc_2, true));
		}

		protected function hookAccessibility(param1:Event) : void
		{
			removeEventListener(Event.ENTER_FRAME, hookAccessibility);
			initializeAccessibility();
		}

		public function set componentInspectorSetting(param1:Boolean) : void
		{
			_inspector = param1;
			if(_inspector)
			{
				beforeComponentParameters();
			}
			else
			{
				afterComponentParameters();
			}
		}

		override public function set x(param1:Number) : void
		{
			move(param1, _y);
		}

		public function drawNow() : void
		{
			draw();
		}

		override public function set y(param1:Number) : void
		{
			move(_x, param1);
		}

		protected function checkLivePreview() : Boolean
		{
			var className:String = null;
			if(parent == null)
			{
				return false;
			}
			try
			{
				className = getQualifiedClassName(parent);
			}
			catch(e:Error)
			{
			}
			return className == "fl.livepreview::LivePreviewParent";
		}

		protected function focusOutHandler(param1:FocusEvent) : void
		{
			if(isOurFocus(param1.target))
			{
				drawFocus(false);
				isFocused = false;
			}
		}

		public function set mouseFocusEnabled(param1:Boolean) : void
		{
			_mouseFocusEnabled = param1;
		}

		public function getFocus() : InteractiveObject
		{
			if(stage)
			{
				return stage.focus;
			}
			return null;
		}

		protected function validate() : void
		{
			invalidHash = {};
		}

		override public function get height() : Number
		{
			return _height;
		}

		public function invalidate(param1:String = "all", param2:Boolean = true) : void
		{
			invalidHash[param1] = true;
			if(param2)
			{
				callLater(draw);
			}
		}

		public function get enabled() : Boolean
		{
			return _enabled;
		}

		protected function getScaleX() : Number
		{
			return super.scaleX;
		}

		protected function getScaleY() : Number
		{
			return super.scaleY;
		}

		public function get focusEnabled() : Boolean
		{
			return _focusEnabled;
		}

		protected function afterComponentParameters() : void
		{
		}

		protected function draw() : void
		{
			if(isInvalid(InvalidationType.SIZE, InvalidationType.STYLES))
			{
				if(isFocused && focusManager.showFocusIndicator)
				{
					drawFocus(true);
				}
			}
			validate();
		}

		protected function configUI() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:int = NaN;
			var _loc_3:int = NaN;
			isLivePreview = checkLivePreview();
			_loc_1 = rotation;
			rotation = 0;
			_loc_2 = super.width;
			_loc_3 = super.height;
			var _loc_4:int = 1;
			setSize(_loc_2, _loc_3);
			move(super.x, super.y);
			rotation = _loc_1;
			startWidth = _loc_2;
			startHeight = _loc_3;
			if(numChildren > 0)
			{
				removeChildAt(0);
			}
		}

		protected function setScaleX(param1:Number) : void
		{
		}

		protected function setScaleY(param1:Number) : void
		{
		}

		private function initializeFocusManager() : void
		{
			if(stage == null)
			{
				addEventListener(Event.ADDED_TO_STAGE, addedHandler, false, 0, true);
			}
			else
			{
				createFocusManager();
			}
		}

		public function set focusManager(param1:IFocusManager) : void
		{
			UIComponent.focusManagers[this] = param1;
		}

		public function clearStyle(param1:String) : void
		{
			setStyle(param1, null);
		}

		protected function isInvalid(param1:String, ...restArguments) : Boolean
		{
			invalidHash[param1];
			if(invalidHash[param1] || invalidHash[InvalidationType.ALL])
			{
				return true;
			}
			while(restArguments.length > 0)
			{
				if(invalidHash[restArguments.pop()])
				{
					return true;
				}
			}
			return false;
		}

		public function setSize(param1:Number, param2:Number) : void
		{
			_width = param1;
			_height = param2;
			invalidate(InvalidationType.SIZE);
			dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE, false));
		}

		override public function set width(param1:Number) : void
		{
			if(_width == param1)
			{
				return;
			}
			setSize(param1, height);
		}

		public function setFocus() : void
		{
			if(stage)
			{
				stage.focus = this;
			}
		}

		protected function initializeAccessibility() : void
		{
			if(UIComponent.createAccessibilityImplementation != null)
			{
				UIComponent.createAccessibilityImplementation(this);
			}
		}

		public function get focusManager() : IFocusManager
		{
			var _loc_1:DisplayObject = null;
			while(_loc_1)
			{
				if(UIComponent.focusManagers[_loc_1] != null)
				{
					return _loc_1.IFocusManager(UIComponent.focusManagers[_loc_1]);
				}
				_loc_1 = _loc_1.parent;
			}
			return null;
		}

		override public function get width() : Number
		{
			return _width;
		}

		public function move(param1:Number, param2:Number) : void
		{
			_x = param1;
			_y = param2;
			dispatchEvent(new ComponentEvent(ComponentEvent.MOVE));
		}

		public function validateNow() : void
		{
			invalidate(InvalidationType.ALL, false);
			draw();
		}

		public function getStyle(param1:String) : Object
		{
			return instanceStyles[param1];
		}
	}
}
package fl.data
{
	import fl.events.*;
	import flash.events.*;

	public class DataProvider extends EventDispatcher
	{
		protected var data:Array;

		public function DataProvider(param1:Object = null)
		{
			super();
			if(param1 == null)
			{
				data = [];
			}
			else
			{
				data = getDataFromObject(param1);
			}
		}

		protected function dispatchPreChangeEvent(param1:String, param2:Array, param3:int, param4:int) : void
		{
			dispatchEvent(new DataChangeEvent(DataChangeEvent.PRE_DATA_CHANGE, param1, param2, param3, param4));
		}

		public function invalidateItemAt(param1:int) : void
		{
			checkIndex(param1, data.length - 1);
			dispatchChangeEvent(DataChangeType.INVALIDATE, [data[param1]], param1, param1);
		}

		public function getItemIndex(param1:Object) : int
		{
			return data.indexOf(param1);
		}

		protected function getDataFromObject(param1:Object) : Array
		{
			var _loc_2:Array = null;
			var _loc_3:Array = null;
			var _loc_4:uint = 0;
			var _loc_5:Object = null;
			var _loc_6:XML = null;
			var _loc_7:XMLList = null;
			var _loc_8:XML = null;
			var _loc_9:XMLList = null;
			var _loc_10:XML = null;
			var _loc_11:XMLList = null;
			var _loc_12:XML = null;
			if(param1 is Array)
			{
				_loc_3 = param1;
				if(_loc_3.length > 0)
				{
					if(_loc_3[0] is String || _loc_3[0] is Number)
					{
						_loc_2 = [];
						_loc_4 = 0;
						while(_loc_4 < _loc_3.length)
						{
							_loc_5 = {label:String(_loc_3[_loc_4]), data:_loc_3[_loc_4]};
							_loc_2.push(_loc_5);
							_loc_4 = _loc_4 + 1;
						}
						return _loc_2;
					}
				}
				return _loc_3.concat();
			}
			else
			{
				if(_loc_3 is DataProvider)
				{
					return _loc_3.toArray();
				}
				if(_loc_3 is XML)
				{
					_loc_6 = _loc_3;
					_loc_2 = [];
					_loc_7 = _loc_6.@;
					var _loc_13:int = 0;
					var _loc_14:* = _loc_7;
					for each(_loc_8 in _loc_14)
					{
						_loc_6 = {};
						_loc_9 = _loc_8.attributes();
						var _loc_15:int = 0;
						var _loc_16:* = _loc_9;
						for each(_loc_10 in _loc_16)
						{
							_loc_6[_loc_10.localName()] = _loc_10.toString();
						}
						_loc_11 = _loc_8.@;
						var _loc_15:int = 0;
						var _loc_16:* = _loc_11;
						for each(_loc_12 in _loc_16)
						{
							if(_loc_12.hasSimpleContent())
							{
								_loc_6[_loc_12.localName()] = _loc_12.toString();
							}
						}
						_loc_2.push(_loc_6);
					}
					return _loc_2;
				}
				else
				{
					throw new TypeError("Error: Type Coercion failed: cannot convert " + _loc_6 + " to Array or DataProvider.");
				}
			}
		}

		public function removeItemAt(param1:uint) : Object
		{
			var _loc_2:Array = null;
			checkIndex(param1, data.length - 1);
			dispatchPreChangeEvent(DataChangeType.REMOVE, data.slice(param1, param1 + 1), param1, param1);
			_loc_2 = data.splice(param1, 1);
			dispatchChangeEvent(DataChangeType.REMOVE, _loc_2, param1, param1);
			return _loc_2[0];
		}

		public function addItem(param1:Object) : void
		{
			dispatchPreChangeEvent(DataChangeType.ADD, [param1], data.length - 1, data.length - 1);
			data.push(param1);
			dispatchChangeEvent(DataChangeType.ADD, [param1], data.length - 1, data.length - 1);
		}

		public function sortOn(param1:Object, param2:Object = null)
		{
			var _loc_3:Array = null;
			dispatchPreChangeEvent(DataChangeType.SORT, data.concat(), 0, data.length - 1);
			_loc_3 = data.sortOn(param1, param2);
			dispatchChangeEvent(DataChangeType.SORT, data.concat(), 0, data.length - 1);
			return _loc_3;
		}

		public function sort(...restArguments)
		{
			var _loc_2:Array = null;
			dispatchPreChangeEvent(DataChangeType.SORT, data.concat(), 0, data.length - 1);
			_loc_2 = data.sort.apply(data, restArguments);
			dispatchChangeEvent(DataChangeType.SORT, data.concat(), 0, data.length - 1);
			return _loc_2;
		}

		public function addItems(param1:Object) : void
		{
			addItemsAt(param1, data.length);
		}

		public function concat(param1:Object) : void
		{
			addItems(param1);
		}

		public function clone() : DataProvider
		{
			return new DataProvider(data);
		}

		public function toArray() : Array
		{
			return data.concat();
		}

		public function get length() : uint
		{
			return data.length;
		}

		public function addItemAt(param1:Object, param2:uint) : void
		{
			checkIndex(param2, data.length);
			dispatchPreChangeEvent(DataChangeType.ADD, [param1], param2, param2);
			data.splice(param2, 0, param1);
			dispatchChangeEvent(DataChangeType.ADD, [param1], param2, param2);
		}

		public function getItemAt(param1:uint) : Object
		{
			checkIndex(param1, data.length - 1);
			return data[param1];
		}

		override public function toString() : String
		{
			return "DataProvider [" + (data.join(" , ")) + "]";
		}

		public function invalidateItem(param1:Object) : void
		{
			var _loc_2:uint = 0;
			_loc_2 = getItemIndex(param1);
			if(_loc_2 == -1)
			{
				return;
			}
			invalidateItemAt(_loc_2);
		}

		protected function dispatchChangeEvent(param1:String, param2:Array, param3:int, param4:int) : void
		{
			dispatchEvent(new DataChangeEvent(DataChangeEvent.DATA_CHANGE, param1, param2, param3, param4));
		}

		protected function checkIndex(param1:int, param2:int) : void
		{
			if(param1 > param2 || param1 < 0)
			{
				throw new RangeError("DataProvider index (" + param1 + ") is not in acceptable range (0 - " + param2 + ")");
			}
		}

		public function addItemsAt(param1:Object, param2:uint) : void
		{
			var _loc_3:Array = null;
			checkIndex(param2, data.length);
			_loc_3 = getDataFromObject(param1);
			dispatchPreChangeEvent(DataChangeType.ADD, _loc_3, param2, (param2 + _loc_3.length) - 1);
			data.splice.apply(data, ([param2, 0]).concat(_loc_3));
			dispatchChangeEvent(DataChangeType.ADD, _loc_3, param2, (param2 + _loc_3.length) - 1);
		}

		public function replaceItem(param1:Object, param2:Object) : Object
		{
			var _loc_3:int = 0;
			_loc_3 = getItemIndex(param2);
			if(_loc_3 != -1)
			{
				return replaceItemAt(param1, _loc_3);
			}
			return null;
		}

		public function removeItem(param1:Object) : Object
		{
			var _loc_2:int = 0;
			_loc_2 = getItemIndex(param1);
			if(_loc_2 != -1)
			{
				return removeItemAt(_loc_2);
			}
			return null;
		}

		public function merge(param1:Object) : void
		{
			var _loc_2:Array = null;
			var _loc_3:uint = 0;
			var _loc_4:uint = 0;
			var _loc_5:uint = 0;
			var _loc_6:Object = null;
			_loc_2 = getDataFromObject(param1);
			_loc_3 = _loc_2.length;
			_loc_4 = data.length;
			dispatchPreChangeEvent(DataChangeType.ADD, data.slice(_loc_4, data.length), _loc_4, this.data.length - 1);
			_loc_5 = 0;
			while(_loc_5 < _loc_3)
			{
				_loc_6 = _loc_2[_loc_5];
				if(getItemIndex(_loc_6) == -1)
				{
					data.push(_loc_6);
				}
				_loc_5 = _loc_5 + 1;
			}
			if(data.length > _loc_4)
			{
				dispatchChangeEvent(DataChangeType.ADD, data.slice(_loc_4, data.length), _loc_4, this.data.length - 1);
			}
			else
			{
				dispatchChangeEvent(DataChangeType.ADD, [], -1, -1);
			}
		}

		public function replaceItemAt(param1:Object, param2:uint) : Object
		{
			var _loc_3:Array = null;
			checkIndex(param2, data.length - 1);
			_loc_3 = [data[param2]];
			dispatchPreChangeEvent(DataChangeType.REPLACE, _loc_3, param2, param2);
			data[param2] = param1;
			dispatchChangeEvent(DataChangeType.REPLACE, _loc_3, param2, param2);
			return _loc_3[0];
		}

		public function invalidate() : void
		{
			dispatchEvent(new DataChangeEvent(DataChangeEvent.DATA_CHANGE, DataChangeType.INVALIDATE_ALL, data.concat(), 0, data.length));
		}

		public function removeAll() : void
		{
			var _loc_1:Array = null;
			_loc_1 = data.concat();
			dispatchPreChangeEvent(DataChangeType.REMOVE_ALL, _loc_1, 0, _loc_1.length);
			data = [];
			dispatchChangeEvent(DataChangeType.REMOVE_ALL, _loc_1, 0, _loc_1.length);
		}
	}
}
package fl.data
{
	dynamic public class SimpleCollectionItem extends Object
	{
		public var label:String;
		public var data:String;

		public function SimpleCollectionItem()
		{
			super();
		}

		public function toString() : String
		{
			return "[SimpleCollectionItem: " + label + "," + data + "]";
		}
	}
}
package fl.events
{
	import flash.events.*;

	public class ComponentEvent extends Event
	{
		public static const HIDE:String = "hide";
		public static const BUTTON_DOWN:String = "buttonDown";
		public static const MOVE:String = "move";
		public static const RESIZE:String = "resize";
		public static const ENTER:String = "enter";
		public static const LABEL_CHANGE:String = "labelChange";
		public static const SHOW:String = "show";

		public function ComponentEvent(param1:String, param2:Boolean = false, param3:Boolean = false)
		{
			super(param1, param2, param3);
		}

		override public function toString() : String
		{
			return formatToString("ComponentEvent", "type", "bubbles", "cancelable");
		}

		override public function clone() : Event
		{
			return new ComponentEvent(type, bubbles, cancelable);
		}
	}
}
package fl.events
{
	import flash.events.*;

	public class DataChangeEvent extends Event
	{
		public static const PRE_DATA_CHANGE:String = "preDataChange";
		public static const DATA_CHANGE:String = "dataChange";
		protected var _items:Array;
		protected var _endIndex:uint;
		protected var _changeType:String;
		protected var _startIndex:uint;

		public function DataChangeEvent(param1:String, param2:String, param3:Array, param4:int = -1, param5:int = -1) : void
		{
			super(param1);
			_changeType = param2;
			_startIndex = param4;
			_items = param3;
			_endIndex = param5 == -1 ? _startIndex : param5;
		}

		public function get changeType() : String
		{
			return _changeType;
		}

		public function get startIndex() : uint
		{
			return _startIndex;
		}

		public function get items() : Array
		{
			return _items;
		}

		override public function clone() : Event
		{
			return new DataChangeEvent(type, _changeType, _items, _startIndex, _endIndex);
		}

		override public function toString() : String
		{
			return formatToString("DataChangeEvent", "type", "changeType", "startIndex", "endIndex", "bubbles", "cancelable");
		}

		public function get endIndex() : uint
		{
			return _endIndex;
		}
	}
}
package fl.events
{
	public class DataChangeType extends Object
	{
		public static const ADD:String = "add";
		public static const REMOVE:String = "remove";
		public static const REMOVE_ALL:String = "removeAll";
		public static const CHANGE:String = "change";
		public static const REPLACE:String = "replace";
		public static const INVALIDATE:String = "invalidate";
		public static const INVALIDATE_ALL:String = "invalidateAll";
		public static const SORT:String = "sort";

		public function DataChangeType()
		{
			super();
		}
	}
}
package fl.events
{
	import flash.events.*;

	public class DataGridEvent extends ListEvent
	{
		public static const ITEM_EDIT_BEGIN:String = "itemEditBegin";
		public static const ITEM_EDIT_END:String = "itemEditEnd";
		public static const ITEM_EDIT_BEGINNING:String = "itemEditBeginning";
		public static const HEADER_RELEASE:String = "headerRelease";
		public static const ITEM_FOCUS_IN:String = "itemFocusIn";
		public static const ITEM_FOCUS_OUT:String = "itemFocusOut";
		public static const COLUMN_STRETCH:String = "columnStretch";
		protected var _itemRenderer:Object;
		protected var _reason:String;
		protected var _dataField:String;

		public function DataGridEvent(param1:String, param2:Boolean = false, param3:Boolean = false, param4:int = -1, param5:int = -1, param6:Object = null, param7:String = null, param8:String = null)
		{
			super(param1, param2, param3, param4, param5);
			_itemRenderer = param6;
			_dataField = param7;
			_reason = param8;
		}

		public function get reason() : String
		{
			return _reason;
		}

		public function set dataField(param1:String) : void
		{
			_dataField = param1;
		}

		override public function toString() : String
		{
			return formatToString("DataGridEvent", "type", "bubbles", "cancelable", "columnIndex", "rowIndex", "itemRenderer", "dataField", "reason");
		}

		public function get dataField() : String
		{
			return _dataField;
		}

		override public function clone() : Event
		{
			return new DataGridEvent(type, bubbles, cancelable, columnIndex, int(rowIndex), _itemRenderer, _dataField, _reason);
		}

		public function get itemRenderer() : Object
		{
			return _itemRenderer;
		}
	}
}
package fl.events
{
	public class DataGridEventReason extends Object
	{
		public static const OTHER:String = "other";
		public static const CANCELLED:String = "cancelled";
		public static const NEW_COLUMN:String = "newColumn";
		public static const NEW_ROW:String = "newRow";

		public function DataGridEventReason()
		{
			super();
		}
	}
}
package fl.events
{
	import flash.events.*;

	public class ListEvent extends Event
	{
		public static const ITEM_DOUBLE_CLICK:String = "itemDoubleClick";
		public static const ITEM_ROLL_OUT:String = "itemRollOut";
		public static const ITEM_ROLL_OVER:String = "itemRollOver";
		public static const ITEM_CLICK:String = "itemClick";
		protected var _index:int;
		protected var _item:Object;
		protected var _columnIndex:int;
		protected var _rowIndex:int;

		public function ListEvent(param1:String, param2:Boolean = false, param3:Boolean = false, param4:int = -1, param5:int = -1, param6:int = -1, param7:Object = null)
		{
			super(param1, param2, param3);
			_rowIndex = param5;
			_columnIndex = param4;
			_index = param6;
			_item = param7;
		}

		public function get rowIndex() : Object
		{
			return _rowIndex;
		}

		public function get index() : int
		{
			return _index;
		}

		public function get item() : Object
		{
			return _item;
		}

		public function get columnIndex() : int
		{
			return _columnIndex;
		}

		override public function clone() : Event
		{
			return new ListEvent(type, bubbles, cancelable, _columnIndex, _rowIndex);
		}

		override public function toString() : String
		{
			return formatToString("ListEvent", "type", "bubbles", "cancelable", "columnIndex", "rowIndex", "index", "item");
		}
	}
}
package fl.events
{
	import flash.events.*;

	public class ScrollEvent extends Event
	{
		public static const SCROLL:String = "scroll";
		private var _position:Number;
		private var _direction:String;
		private var _delta:Number;

		public function ScrollEvent(param1:String, param2:Number, param3:Number)
		{
			super(ScrollEvent.SCROLL, false, false);
			_direction = param1;
			_delta = param2;
			_position = param3;
		}

		override public function clone() : Event
		{
			return new ScrollEvent(_direction, _delta, _position);
		}

		public function get position() : Number
		{
			return _position;
		}

		override public function toString() : String
		{
			return formatToString("ScrollEvent", "type", "bubbles", "cancelable", "direction", "delta", "position");
		}

		public function get delta() : Number
		{
			return _delta;
		}

		public function get direction() : String
		{
			return _direction;
		}
	}
}
package fl.managers
{
	import fl.controls.*;
	import fl.core.*;
	import flash.display.*;
	import flash.events.*;
	import flash.text.*;
	import flash.ui.*;
	import flash.utils.*;

	public class FocusManager extends Object implements IFocusManager
	{
		private var focusableObjects:Dictionary;
		private var _showFocusIndicator:Boolean = true;
		private var defButton:Button;
		private var focusableCandidates:Array;
		private var _form:DisplayObjectContainer;
		private var _defaultButtonEnabled:Boolean = true;
		private var activated:Boolean = false;
		private var _defaultButton:Button;
		private var calculateCandidates:Boolean = true;
		private var lastFocus:InteractiveObject;
		private var lastAction:String;

		public function FocusManager(param1:DisplayObjectContainer)
		{
			activated = false;
			calculateCandidates = true;
			_showFocusIndicator = true;
			_defaultButtonEnabled = true;
			super();
			focusableObjects = new Dictionary(true);
			if(param1 != null)
			{
				_form = param1;
				addFocusables(DisplayObject(param1));
				param1.addEventListener(Event.ADDED, addedHandler);
				param1.addEventListener(Event.REMOVED, removedHandler);
				activate();
			}
		}

		public function get showFocusIndicator() : Boolean
		{
			return _showFocusIndicator;
		}

		private function getIndexOfNextObject(param1:int, param2:Boolean, param3:Boolean, param4:String) : int
		{
			var _loc_5:int = 0;
			var _loc_6:int = 0;
			var _loc_7:DisplayObject = null;
			var _loc_8:IFocusManagerGroup = null;
			var _loc_9:int = 0;
			var _loc_10:DisplayObject = null;
			var _loc_11:IFocusManagerGroup = null;
			_loc_5 = focusableCandidates.length;
			_loc_6 = param1;
			while(true)
			{
				if(param2)
				{
					_loc_6 = _loc_6 - 1;
				}
				else
				{
					_loc_6++;
				}
				if(param3)
				{
					if(param2 && _loc_6 < 0)
					{
						break;
					}
					if(!param2 && _loc_6 == _loc_5)
					{
						break;
					}
				}
				else
				{
					_loc_6 = (_loc_6 + _loc_5) % _loc_5;
					if(_loc_6 == _loc_6)
					{
						break;
					}
				}
				if(isValidFocusCandidate(focusableCandidates[_loc_6], param4))
				{
					_loc_7 = DisplayObject(findFocusManagerComponent(focusableCandidates[_loc_6]));
					if(_loc_7 is IFocusManagerGroup)
					{
						_loc_8 = IFocusManagerGroup(_loc_7);
						_loc_9 = 0;
						while(_loc_9 < focusableCandidates.length)
						{
							_loc_10 = focusableCandidates[_loc_9];
							if(_loc_10 is IFocusManagerGroup)
							{
								_loc_11 = IFocusManagerGroup(_loc_10);
								if(_loc_11.groupName == _loc_8.groupName && _loc_11.selected)
								{
									_loc_6 = _loc_9;
									break;
								}
							}
							_loc_6++;
						}
					}
					return _loc_6;
				}
			}
			return _loc_6;
		}

		public function set form(param1:DisplayObjectContainer) : void
		{
			_form = param1;
		}

		private function addFocusables(param1:DisplayObject, param2:Boolean = false) : void
		{
			var focusable:IFocusManagerComponent = null;
			var io:InteractiveObject = null;
			var doc:DisplayObjectContainer = null;
			var i:int = 0;
			var child:DisplayObject = null;
			var o:DisplayObject = param1;
			var skipTopLevel:Boolean = param2;
			if(!skipTopLevel)
			{
				if(o is IFocusManagerComponent)
				{
					focusable = IFocusManagerComponent(o);
					if(focusable.focusEnabled)
					{
						focusable.tabEnabled;
						if(focusable.tabEnabled && isTabVisible(o))
						{
							focusableObjects[o] = true;
							calculateCandidates = true;
						}
						o.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
						o.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler);
					}
				}
				else
				{
					if(o is InteractiveObject)
					{
						io = o;
						io.tabEnabled;
						if(io && io.tabEnabled && findFocusManagerComponent(io) == io)
						{
							focusableObjects[io] = true;
							calculateCandidates = true;
						}
						io.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
						io.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler);
					}
				}
			}
			if(o is DisplayObjectContainer)
			{
				doc = DisplayObjectContainer(o);
				o.addEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler);
				if(doc is Stage || doc.parent is Stage || doc.tabChildren)
				{
					i = 0;
					while(i < doc.numChildren)
					{
						try
						{
							child = doc.getChildAt(i);
							if(child != null)
							{
								addFocusables(doc.getChildAt(i));
							}
						}
						catch(error:SecurityError)
						{
						}
						i = i + 1;
					}
				}
			}
		}

		private function getChildIndex(param1:DisplayObjectContainer, param2:DisplayObject) : int
		{
			return param1.getChildIndex(param2);
		}

		private function mouseFocusChangeHandler(param1:FocusEvent) : void
		{
			if(param1.relatedObject is TextField)
			{
				return;
			}
			param1.preventDefault();
		}

		private function focusOutHandler(param1:FocusEvent) : void
		{
			var _loc_2:InteractiveObject = null;
			_loc_2 = param1.target;
		}

		private function isValidFocusCandidate(param1:DisplayObject, param2:String) : Boolean
		{
			var _loc_3:IFocusManagerGroup = null;
			if(!isEnabledAndVisible(param1))
			{
				return false;
			}
			if(param1 is IFocusManagerGroup)
			{
				_loc_3 = IFocusManagerGroup(param1);
				if(param2 == _loc_3.groupName)
				{
					return false;
				}
			}
			return true;
		}

		public function findFocusManagerComponent(param1:InteractiveObject) : InteractiveObject
		{
			var _loc_2:InteractiveObject = null;
			_loc_2 = param1;
			while(_loc_2)
			{
				if(_loc_2 is IFocusManagerComponent && IFocusManagerComponent(_loc_2).focusEnabled)
				{
					return _loc_2;
				}
				_loc_2 = _loc_2.parent;
			}
			return _loc_2;
		}

		private function sortFocusableObjectsTabIndex() : void
		{
			var _loc_1:Object = null;
			var _loc_2:InteractiveObject = null;
			focusableCandidates = [];
			var _loc_3:int = 0;
			var _loc_4:* = focusableObjects;
			for each(_loc_1 in _loc_4)
			{
				_loc_2 = InteractiveObject(_loc_1);
				_loc_2.tabIndex;
				if(_loc_2.tabIndex && !isNaN(Number(_loc_2.tabIndex)))
				{
					focusableCandidates.push(_loc_2);
				}
			}
			focusableCandidates.sort(sortByTabIndex);
		}

		private function removeFocusables(param1:DisplayObject) : void
		{
			var _loc_2:Object = null;
			var _loc_3:DisplayObject = null;
			if(param1 is DisplayObjectContainer)
			{
				param1.removeEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler);
				param1.removeEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler);
				var _loc_4:int = 0;
				var _loc_5:* = focusableObjects;
				for each(_loc_2 in _loc_5)
				{
					_loc_3 = DisplayObject(_loc_2);
					if(DisplayObjectContainer(param1).contains(_loc_3))
					{
						if(_loc_3 == lastFocus)
						{
							lastFocus = null;
						}
						_loc_3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
						calculateCandidates = true;
					}
				}
			}
		}

		private function addedHandler(param1:Event) : void
		{
			var _loc_2:DisplayObject = null;
			_loc_2 = DisplayObject(param1.target);
			if(_loc_2.stage)
			{
				addFocusables(DisplayObject(param1.target));
			}
		}

		private function getTopLevelFocusTarget(param1:InteractiveObject) : InteractiveObject
		{
			while(param1 != InteractiveObject(form))
			{
				IFocusManagerComponent(param1).focusEnabled;
				IFocusManagerComponent(param1).mouseFocusEnabled;
				if(param1 is IFocusManagerComponent && IFocusManagerComponent(param1).focusEnabled && IFocusManagerComponent(param1).mouseFocusEnabled && UIComponent(param1).enabled)
				{
					return param1;
				}
				param1 = param1.parent;
				if(param1 == null)
				{
					break;
				}
			}
			return null;
		}

		private function tabChildrenChangeHandler(param1:Event) : void
		{
			var _loc_2:DisplayObjectContainer = null;
			if(param1.target != param1.currentTarget)
			{
				return;
			}
			calculateCandidates = true;
			_loc_2 = DisplayObjectContainer(param1.target);
			if(_loc_2.tabChildren)
			{
				addFocusables(_loc_2, true);
			}
			else
			{
				removeFocusables(_loc_2);
			}
		}

		public function sendDefaultButtonEvent() : void
		{
			defButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
		}

		public function getFocus() : InteractiveObject
		{
			var _loc_1:InteractiveObject = null;
			_loc_1 = form.stage.focus;
			return findFocusManagerComponent(_loc_1);
		}

		private function isEnabledAndVisible(param1:DisplayObject) : Boolean
		{
			var _loc_2:DisplayObjectContainer = null;
			var _loc_3:TextField = null;
			var _loc_4:SimpleButton = null;
			_loc_2 = DisplayObject(form).parent;
			while(param1 != _loc_2)
			{
				if(param1 is UIComponent)
				{
					if(!UIComponent(param1).enabled)
					{
						return false;
					}
				}
				else
				{
					if(param1 is TextField)
					{
						_loc_3 = TextField(param1);
						if(_loc_3.type == TextFieldType.DYNAMIC || !_loc_3.selectable)
						{
							return false;
						}
					}
					else
					{
						if(param1 is SimpleButton)
						{
							_loc_4 = SimpleButton(param1);
							if(!_loc_4.enabled)
							{
								return false;
							}
						}
					}
				}
				if(!param1.visible)
				{
					return false;
				}
				param1 = param1.parent;
			}
			return true;
		}

		public function set defaultButton(param1:Button) : void
		{
			var _loc_2:Button = null;
			_loc_2 = param1 ? Button(param1) : null;
			if(_loc_2 != _defaultButton)
			{
				if(_defaultButton)
				{
					_defaultButton.emphasized = false;
				}
				if(defButton)
				{
					defButton.emphasized = false;
				}
				_defaultButton = _loc_2;
				defButton = _loc_2;
				if(_loc_2)
				{
					_loc_2.emphasized = true;
				}
			}
		}

		private function deactivateHandler(param1:Event) : void
		{
			var _loc_2:InteractiveObject = null;
			_loc_2 = InteractiveObject(param1.target);
		}

		public function setFocus(param1:InteractiveObject) : void
		{
			if(param1 is IFocusManagerComponent)
			{
				IFocusManagerComponent(param1).setFocus();
			}
			else
			{
				form.stage.focus = param1;
			}
		}

		private function setFocusToNextObject(param1:FocusEvent) : void
		{
			var _loc_2:InteractiveObject = null;
			if(!hasFocusableObjects())
			{
				return;
			}
			_loc_2 = getNextFocusManagerComponent(param1.shiftKey);
			if(_loc_2)
			{
				setFocus(_loc_2);
			}
		}

		private function hasFocusableObjects() : Boolean
		{
			var _loc_1:Object = null;
			var _loc_2:int = 0;
			var _loc_3:* = focusableObjects;
			for each(_loc_1 in _loc_3)
			{
				return true;
			}
			return false;
		}

		private function tabIndexChangeHandler(param1:Event) : void
		{
			calculateCandidates = true;
		}

		private function sortFocusableObjects() : void
		{
			var _loc_1:Object = null;
			var _loc_2:InteractiveObject = null;
			focusableCandidates = [];
			var _loc_3:int = 0;
			var _loc_4:* = focusableObjects;
			for each(_loc_1 in _loc_4)
			{
				_loc_2 = InteractiveObject(_loc_1);
				_loc_2.tabIndex;
				if(_loc_2.tabIndex && !isNaN(Number(_loc_2.tabIndex)) && _loc_2.tabIndex > 0)
				{
					sortFocusableObjectsTabIndex();
					return;
				}
				focusableCandidates.push(_loc_2);
			}
			focusableCandidates.sort(sortByDepth);
		}

		private function keyFocusChangeHandler(param1:FocusEvent) : void
		{
			showFocusIndicator = true;
			if(param1.keyCode == Keyboard.TAB || param1.keyCode == 0 && !param1.isDefaultPrevented())
			{
				setFocusToNextObject(param1);
				param1.preventDefault();
			}
		}

		private function getIndexOfFocusedObject(param1:DisplayObject) : int
		{
			var _loc_2:int = 0;
			var _loc_3:int = 0;
			_loc_2 = focusableCandidates.length;
			_loc_3 = 0;
			_loc_3 = 0;
			while(_loc_3 < _loc_2)
			{
				if(focusableCandidates[_loc_3] == param1)
				{
					return _loc_3;
				}
				_loc_3++;
			}
			return -1;
		}

		public function hideFocus() : void
		{
		}

		private function removedHandler(param1:Event) : void
		{
			var _loc_2:int = 0;
			var _loc_3:DisplayObject = null;
			var _loc_4:InteractiveObject = null;
			_loc_3 = DisplayObject(param1.target);
			if(_loc_3 is IFocusManagerComponent && focusableObjects[_loc_3] == true)
			{
				if(_loc_3 == lastFocus)
				{
					IFocusManagerComponent(lastFocus).drawFocus(false);
					lastFocus = null;
				}
				_loc_3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
				calculateCandidates = true;
			}
			else
			{
				if(_loc_3 is InteractiveObject && focusableObjects[_loc_3] == true)
				{
					_loc_4 = _loc_3;
					if(_loc_4)
					{
						if(_loc_4 == lastFocus)
						{
							lastFocus = null;
						}
						calculateCandidates = true;
					}
					_loc_4.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
				}
			}
			removeFocusables(_loc_4);
		}

		private function sortByDepth(param1:InteractiveObject, param2:InteractiveObject) : Number
		{
			var _loc_3:String = null;
			var _loc_4:String = null;
			var _loc_5:int = 0;
			var _loc_6:String = null;
			var _loc_7:String = null;
			var _loc_8:String = null;
			var _loc_9:DisplayObject = null;
			var _loc_10:DisplayObject = null;
			_loc_3 = "";
			_loc_4 = "";
			_loc_8 = "0000";
			_loc_9 = DisplayObject(param1);
			_loc_10 = DisplayObject(param2);
			while(_loc_9.parent)
			{
				_loc_5 = !(_loc_9 == DisplayObject(form)) && getChildIndex(_loc_9.parent, _loc_9);
				_loc_6 = _loc_5.toString(16);
				if(_loc_6.length < 4)
				{
					_loc_7 = (_loc_8.substring(0, 4 - _loc_6.length)) + _loc_6;
				}
				_loc_3 = _loc_7 + _loc_3;
				_loc_9 = _loc_9.parent;
			}
			while(_loc_10.parent)
			{
				_loc_5 = !(_loc_10 == DisplayObject(form)) && getChildIndex(_loc_10.parent, _loc_10);
				_loc_6 = _loc_5.toString(16);
				if(_loc_6.length < 4)
				{
					_loc_7 = (_loc_8.substring(0, 4 - _loc_6.length)) + _loc_6;
				}
				_loc_4 = _loc_7 + _loc_4;
				_loc_10 = _loc_10.parent;
			}
			return _loc_3 > _loc_4 ? 1 : _loc_3 < _loc_4 ? -1 : 0;
		}

		public function get defaultButton() : Button
		{
			return _defaultButton;
		}

		private function activateHandler(param1:Event) : void
		{
			var _loc_2:InteractiveObject = null;
			_loc_2 = InteractiveObject(param1.target);
			if(lastFocus)
			{
				if(lastFocus is IFocusManagerComponent)
				{
					IFocusManagerComponent(lastFocus).setFocus();
				}
				else
				{
					form.stage.focus = lastFocus;
				}
			}
			lastAction = "ACTIVATE";
		}

		public function showFocus() : void
		{
		}

		public function set defaultButtonEnabled(param1:Boolean) : void
		{
			_defaultButtonEnabled = param1;
		}

		public function getNextFocusManagerComponent(param1:Boolean = false) : InteractiveObject
		{
			var _loc_2:DisplayObject = null;
			var _loc_3:String = null;
			var _loc_4:int = 0;
			var _loc_5:Boolean = false;
			var _loc_6:int = 0;
			var _loc_7:int = 0;
			var _loc_8:IFocusManagerGroup = null;
			if(!hasFocusableObjects())
			{
				return null;
			}
			if(calculateCandidates)
			{
				sortFocusableObjects();
				calculateCandidates = false;
			}
			_loc_2 = form.stage.focus;
			_loc_2 = DisplayObject(findFocusManagerComponent(InteractiveObject(_loc_2)));
			_loc_3 = "";
			if(_loc_2 is IFocusManagerGroup)
			{
				_loc_8 = IFocusManagerGroup(_loc_2);
				_loc_3 = _loc_8.groupName;
			}
			_loc_4 = getIndexOfFocusedObject(_loc_2);
			_loc_5 = false;
			_loc_6 = _loc_4;
			if(_loc_6 == -1)
			{
				if(param1)
				{
					_loc_6 = focusableCandidates.length;
				}
				_loc_5 = true;
			}
			_loc_7 = getIndexOfNextObject(_loc_6, param1, _loc_5, _loc_3);
			return findFocusManagerComponent(focusableCandidates[_loc_7]);
		}

		private function mouseDownHandler(param1:MouseEvent) : void
		{
			var _loc_2:InteractiveObject = null;
			if(param1.isDefaultPrevented())
			{
				return;
			}
			_loc_2 = getTopLevelFocusTarget(InteractiveObject(param1.target));
			if(!_loc_2)
			{
				return;
			}
			showFocusIndicator = false;
			if((_loc_2 == lastFocus) || lastAction == "ACTIVATE" && _loc_2 is TextField)
			{
				setFocus(_loc_2);
			}
			lastAction = "MOUSEDOWN";
		}

		private function isTabVisible(param1:DisplayObject) : Boolean
		{
			var _loc_2:DisplayObjectContainer = null;
			_loc_2 = param1.parent;
				_loc_2.parent;
			while((_loc_2 && _loc_2 is Stage) && _loc_2.parent && _loc_2.parent is Stage)
			{
				if(!_loc_2.tabChildren)
				{
					return false;
				}
				_loc_2 = _loc_2.parent;
			}
			return true;
		}

		public function get nextTabIndex() : int
		{
			return 0;
		}

		private function keyDownHandler(param1:KeyboardEvent) : void
		{
			if(param1.keyCode == Keyboard.TAB)
			{
				lastAction = "KEY";
				if(calculateCandidates)
				{
					sortFocusableObjects();
					calculateCandidates = false;
				}
			}
			if(defaultButtonEnabled && param1.keyCode == Keyboard.ENTER && defaultButton && defButton.enabled)
			{
				sendDefaultButtonEvent();
			}
		}

		private function focusInHandler(param1:FocusEvent) : void
		{
			var _loc_2:InteractiveObject = null;
			var _loc_3:Button = null;
			_loc_2 = InteractiveObject(param1.target);
			if(form.contains(_loc_2))
			{
				lastFocus = findFocusManagerComponent(InteractiveObject(_loc_2));
				if(lastFocus is Button)
				{
					_loc_3 = Button(lastFocus);
					if(defButton)
					{
						defButton.emphasized = false;
						defButton = _loc_3;
						_loc_3.emphasized = true;
					}
				}
				else
				{
					if(!(defButton && defButton == _defaultButton))
					{
						defButton.emphasized = false;
						defButton = _defaultButton;
						_defaultButton.emphasized = true;
					}
				}
			}
		}

		private function tabEnabledChangeHandler(param1:Event) : void
		{
			var _loc_2:InteractiveObject = null;
			var _loc_3:Boolean = false;
			calculateCandidates = true;
			_loc_2 = InteractiveObject(param1.target);
			_loc_3 = focusableObjects[_loc_2] == true;
			if(_loc_2.tabEnabled)
			{
				if(!_loc_3 && isTabVisible(_loc_2))
				{
					if(!(_loc_2 is IFocusManagerComponent))
					{
						_loc_2.focusRect = false;
					}
					focusableObjects[_loc_2] = true;
				}
			}
			else
			{
			}
		}

		public function set showFocusIndicator(param1:Boolean) : void
		{
			_showFocusIndicator = param1;
		}

		public function get form() : DisplayObjectContainer
		{
			return _form;
		}

		private function sortByTabIndex(param1:InteractiveObject, param2:InteractiveObject) : int
		{
			return param1.tabIndex > param2.tabIndex ? 1 : param1.tabIndex < param2.tabIndex ? -1 : sortByDepth(param1, param2);
		}

		public function activate() : void
		{
			if(activated)
			{
				return;
			}
			form.stage.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false, 0, true);
			form.stage.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false, 0, true);
			form.addEventListener(FocusEvent.FOCUS_IN, focusInHandler, true);
			form.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true);
			form.stage.addEventListener(Event.ACTIVATE, activateHandler, false, 0, true);
			form.stage.addEventListener(Event.DEACTIVATE, deactivateHandler, false, 0, true);
			form.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
			form.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true);
			activated = true;
			if(lastFocus)
			{
				setFocus(lastFocus);
			}
		}

		public function deactivate() : void
		{
			form.stage.removeEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
			form.stage.removeEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
			form.removeEventListener(FocusEvent.FOCUS_IN, focusInHandler, true);
			form.removeEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true);
			form.stage.removeEventListener(Event.ACTIVATE, activateHandler);
			form.stage.removeEventListener(Event.DEACTIVATE, deactivateHandler);
			form.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
			form.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true);
			activated = false;
		}

		public function get defaultButtonEnabled() : Boolean
		{
			return _defaultButtonEnabled;
		}
	}
}
package fl.managers
{
	import fl.controls.*;
	import flash.display.*;

	public interface IFocusManager
	{
		function getFocus() : InteractiveObject;

		function deactivate() : void;

		function set defaultButton(param1:Button) : void;

		function set showFocusIndicator(param1:Boolean) : void;

		function get defaultButtonEnabled() : Boolean;

		function get nextTabIndex() : int;

		function get defaultButton() : Button;

		function get showFocusIndicator() : Boolean;

		function setFocus(param1:InteractiveObject) : void;

		function activate() : void;

		function showFocus() : void;

		function set defaultButtonEnabled(param1:Boolean) : void;

		function hideFocus() : void;

		function findFocusManagerComponent(param1:InteractiveObject) : InteractiveObject;

		function getNextFocusManagerComponent(param1:Boolean = false) : InteractiveObject;
	}
}
package fl.managers
{
	public interface IFocusManagerComponent
	{
		function set focusEnabled(param1:Boolean) : void;

		function drawFocus(param1:Boolean) : void;

		function setFocus() : void;

		function get focusEnabled() : Boolean;

		function get tabEnabled() : Boolean;

		function get tabIndex() : int;

		function get mouseFocusEnabled() : Boolean;
	}
}
package fl.managers
{
	public interface IFocusManagerGroup
	{
		function set groupName(param1:String) : void;

		function set selected(param1:Boolean) : void;

		function get groupName() : String;

		function get selected() : Boolean;
	}
}
package fl.managers
{
	import fl.core.*;
	import flash.text.*;
	import flash.utils.*;

	public class StyleManager extends Object
	{
		private static var _instance:StyleManager;
		private var globalStyles:Object;
		private var classToDefaultStylesDict:Dictionary;
		private var styleToClassesHash:Object;
		private var classToStylesDict:Dictionary;
		private var classToInstancesDict:Dictionary;

		final public static function clearComponentStyle(param1:Object, param2:String) : void
		{
			var _loc_3:Class = null;
			var _loc_4:Object = null;
			_loc_3 = StyleManager.getClassDef(param1);
			_loc_4 = StyleManager.getInstance().classToStylesDict[_loc_3];
			if((_loc_4 == null) && _loc_4[param2] == null)
			{
				StyleManager.invalidateComponentStyle(_loc_3, param2);
			}
		}

		final private static function getClassDef(param1:Object) : Class
		{
			var component:Object = param1;
			if(component is Class)
			{
				return component;
			}
			try
			{
				return StyleManager.getDefinitionByName(StyleManager.getQualifiedClassName(component));
			}
			catch(e:Error)
			{
				if(e is UIComponent)
				{
					try
					{
						return e.loaderInfo.applicationDomain.getDefinition(StyleManager.getQualifiedClassName(e));
					}
					catch(e:Error)
					{
					}
				}
			}
			return null;
		}

		final public static function clearStyle(param1:String) : void
		{
			StyleManager.setStyle(param1, null);
		}

		final public static function setComponentStyle(param1:Object, param2:String, param3:Object) : void
		{
			var _loc_4:Class = null;
			var _loc_5:Object = null;
			_loc_4 = StyleManager.getClassDef(param1);
			_loc_5 = StyleManager.getInstance().classToStylesDict[_loc_4];
			if(_loc_5 == null)
			{
				var _loc_6:Object = {};
				StyleManager.getInstance().classToStylesDict[_loc_4] = _loc_6;
				_loc_5 = _loc_6;
			}
			if(_loc_5 == param3)
			{
				return;
			}
			_loc_5[param2] = param3;
			StyleManager.invalidateComponentStyle(_loc_4, param2);
		}

		final private static function setSharedStyles(param1:UIComponent) : void
		{
			var _loc_2:StyleManager = null;
			var _loc_3:Class = null;
			var _loc_4:Object = null;
			var _loc_5:String = null;
			_loc_2 = StyleManager.getInstance();
			_loc_3 = StyleManager.getClassDef(param1);
			_loc_4 = _loc_2.classToDefaultStylesDict[_loc_3];
			var _loc_6:int = 0;
			var _loc_7:* = _loc_4;
			for each(_loc_5 in _loc_7)
			{
				param1.setSharedStyle(_loc_5, StyleManager.getSharedStyle(param1, _loc_5));
			}
		}

		final public static function getComponentStyle(param1:Object, param2:String) : Object
		{
			var _loc_3:Class = null;
			var _loc_4:Object = null;
			_loc_3 = StyleManager.getClassDef(param1);
			_loc_4 = StyleManager.getInstance().classToStylesDict[_loc_3];
			return _loc_4 == null ? null : _loc_4[param2];
		}

		final private static function getInstance()
		{
			if(_instance == null)
			{
				_instance = new StyleManager();
			}
			return _instance;
		}

		final private static function invalidateComponentStyle(param1:Class, param2:String) : void
		{
			var _loc_3:Dictionary = null;
			var _loc_4:Object = null;
			var _loc_5:UIComponent = null;
			_loc_3 = StyleManager.getInstance().classToInstancesDict[param1];
			if(_loc_3 == null)
			{
				return;
			}
			var _loc_6:int = 0;
			var _loc_7:* = _loc_3;
			for each(_loc_4 in _loc_7)
			{
				_loc_5 = _loc_4;
				if(_loc_5 == null)
				{
					continue;
				}
				_loc_5.setSharedStyle(param2, StyleManager.getSharedStyle(_loc_5, param2));
			}
		}

		final private static function invalidateStyle(param1:String) : void
		{
			var _loc_2:Dictionary = null;
			var _loc_3:Object = null;
			_loc_2 = StyleManager.getInstance().styleToClassesHash[param1];
			if(_loc_2 == null)
			{
				return;
			}
			var _loc_4:int = 0;
			var _loc_5:* = _loc_2;
			for each(_loc_3 in _loc_5)
			{
				StyleManager.invalidateComponentStyle(StyleManager.Class(_loc_3), param1);
			}
		}

		final public static function registerInstance(param1:UIComponent) : void
		{
			var inst:StyleManager = null;
			var classDef:Class = null;
			var target:Class = null;
			var defaultStyles:Object = null;
			var styleToClasses:Object = null;
			var n:String = null;
			var instance:UIComponent = param1;
			inst = StyleManager.getInstance();
			classDef = StyleManager.getClassDef(instance);
			if(classDef == null)
			{
				return;
			}
			if(inst.classToInstancesDict[classDef] == null)
			{
				inst.classToInstancesDict[classDef] = new Dictionary(true);
				target = classDef;
				while(defaultStyles == null)
				{
					if(target["getStyleDefinition"] != null)
					{
						var _loc_3:Class = target;
						defaultStyles = _loc_3["getStyleDefinition"]();
						break;
					}
					try
					{
						target = instance.loaderInfo.applicationDomain.getDefinition(StyleManager.getQualifiedSuperclassName(target));
					}
					catch(err:Error)
					{
						try
						{
							target = StyleManager.getDefinitionByName(StyleManager.getQualifiedSuperclassName(target));
						}
						catch(e:Error)
						{
							defaultStyles = UIComponent.getStyleDefinition();
							break;
						}
					}
				}
				styleToClasses = inst.styleToClassesHash;
				var _loc_3:int = 0;
				var _loc_4:* = defaultStyles;
				for each(n in _loc_4)
				{
					if(styleToClasses[n] == null)
					{
						styleToClasses[n] = new Dictionary(true);
					}
					styleToClasses[n][classDef] = true;
				}
				inst.classToDefaultStylesDict[classDef] = defaultStyles;
				inst.classToStylesDict[classDef] = {};
			}
			inst.classToInstancesDict[classDef][instance] = true;
			StyleManager.setSharedStyles(instance);
		}

		final public static function getStyle(param1:String) : Object
		{
			return StyleManager.getInstance().globalStyles[param1];
		}

		final private static function getSharedStyle(param1:UIComponent, param2:String) : Object
		{
			var _loc_3:Class = null;
			var _loc_4:StyleManager = null;
			var _loc_5:Object = null;
			_loc_3 = StyleManager.getClassDef(param1);
			_loc_4 = StyleManager.getInstance();
			_loc_5 = _loc_4.classToStylesDict[_loc_3][param2];
			if(_loc_5 != null)
			{
				return _loc_5;
			}
			_loc_5 = _loc_4.globalStyles[param2];
			if(_loc_5 != null)
			{
				return _loc_5;
			}
			return _loc_4.classToDefaultStylesDict[_loc_3][param2];
		}

		final public static function setStyle(param1:String, param2:Object) : void
		{
			var _loc_3:Object = null;
			_loc_3 = StyleManager.getInstance().globalStyles;
			if(!(_loc_3[param1] === param2 && param2 is TextFormat))
			{
				return;
			}
			_loc_3[param1] = param2;
			StyleManager.invalidateStyle(param1);
		}

		public function StyleManager()
		{
			super();
			styleToClassesHash = {};
			classToInstancesDict = new Dictionary(true);
			classToStylesDict = new Dictionary(true);
			classToDefaultStylesDict = new Dictionary(true);
			globalStyles = UIComponent.getStyleDefinition();
		}
	}
}
package fl.motion
{
	import flash.geom.*;

	public class Color extends ColorTransform
	{
		private var _tintColor:Number = 0;
		private var _tintMultiplier:Number = 0;

		final public static function interpolateColor(param1:uint, param2:uint, param3:Number) : uint
		{
			var _loc_4:Number = 1 - param3;
			var _loc_5:uint = (param1 >> 24) & 255;
			var _loc_6:uint = (param1 >> 16) & 255;
			var _loc_7:uint = (param1 >> 8) & 255;
			var _loc_8:uint = param1 & 255;
			var _loc_9:uint = (param2 >> 24) & 255;
			var _loc_10:uint = (param2 >> 16) & 255;
			var _loc_11:uint = (param2 >> 8) & 255;
			var _loc_12:uint = param2 & 255;
			var _loc_13:uint = (_loc_5 * _loc_4) + (_loc_9 * param3);
			var _loc_14:uint = (_loc_6 * _loc_4) + (_loc_10 * param3);
			var _loc_15:uint = (_loc_7 * _loc_4) + (_loc_11 * param3);
			var _loc_16:uint = (_loc_8 * _loc_4) + (_loc_12 * param3);
			var _loc_17:uint = (_loc_13 << 24) | (_loc_14 << 16) | (_loc_15 << 8) | _loc_16;
			return _loc_17;
		}

		final public static function interpolateTransform(param1:ColorTransform, param2:ColorTransform, param3:Number) : ColorTransform
		{
			var _loc_4:Number = 1 - param3;
			var _loc_5:ColorTransform = new ColorTransform((param1.redMultiplier * _loc_4) + (param2.redMultiplier * param3), (param1.greenMultiplier * _loc_4) + (param2.greenMultiplier * param3), (param1.blueMultiplier * _loc_4) + (param2.blueMultiplier * param3), (param1.alphaMultiplier * _loc_4) + (param2.alphaMultiplier * param3), (param1.redOffset * _loc_4) + (param2.redOffset * param3), (param1.greenOffset * _loc_4) + (param2.greenOffset * param3), (param1.blueOffset * _loc_4) + (param2.blueOffset * param3), (param1.alphaOffset * _loc_4) + (param2.alphaOffset * param3));
			return _loc_5;
		}

		final public static function fromXML(param1:XML) : Color
		{
			return Color((new Color()).parseXML(param1));
		}

		public function Color(param1:Number = 1.000000, param2:Number = 1.000000, param3:Number = 1.000000, param4:Number = 1.000000, param5:Number = 0, param6:Number = 0, param7:Number = 0, param8:Number = 0)
		{
			super(param1, param2, param3, param4, param5, param6, param7, param8);
		}

		private function deriveTintColor() : uint
		{
			var _loc_1:Number = 1 / this.tintMultiplier;
			var _loc_2:uint = Math.round(this.redOffset * _loc_1);
			var _loc_3:uint = Math.round(this.greenOffset * _loc_1);
			var _loc_4:uint = Math.round(this.blueOffset * _loc_1);
			var _loc_5:uint = (_loc_2 << 16) | (_loc_3 << 8) | _loc_4;
			return _loc_5;
		}

		public function set brightness(param1:Number) : void
		{
			if(param1 > 1)
			{
				param1 = 1;
			}
			else
			{
				if(param1 < -1)
				{
					param1 = -1;
				}
			}
			var _loc_2:Number = 1 - Math.abs(param1);
			var _loc_3:Number = 0;
			if(param1 > 0)
			{
				_loc_3 = param1 * 255;
			}
			var _loc_4:Number = _loc_2;
			this.blueMultiplier = _loc_4;
			var _loc_4:Number = _loc_4;
			this.greenMultiplier = _loc_4;
			this.redMultiplier = _loc_4;
			var _loc_4:Number = _loc_3;
			this.blueOffset = _loc_4;
			var _loc_4:Number = _loc_4;
			this.greenOffset = _loc_4;
			this.redOffset = _loc_4;
		}

		private function parseXML(param1:XML = null) : Color
		{
			var _loc_3:XML = null;
			var _loc_4:String = null;
			var _loc_5:uint = 0;
			if(!param1)
			{
				return this;
			}
			var _loc_2:XML = param1.elements()[0];
			if(!_loc_2)
			{
				return this;
			}
			var _loc_6:int = 0;
			var _loc_7:* = _loc_2.attributes();
			for each(_loc_3 in _loc_7)
			{
				_loc_4 = _loc_3.localName();
				if(_loc_4 == "tintColor")
				{
					_loc_5 = Number(_loc_3.toString());
					this.tintColor = _loc_5;
					continue;
				}
				this[_loc_4] = Number(_loc_3.toString());
			}
			return this;
		}

		public function get tintColor() : uint
		{
			return this._tintColor;
		}

		public function set tintColor(param1:uint) : void
		{
			setTint(param1, this.tintMultiplier);
		}

		public function get brightness() : Number
		{
			return this.redOffset ? 1 - this.redMultiplier : this.redMultiplier - 1;
		}

		public function set tintMultiplier(param1:Number) : void
		{
			setTint(this.tintColor, param1);
		}

		public function get tintMultiplier() : Number
		{
			return this._tintMultiplier;
		}

		public function setTint(param1:uint, param2:Number) : void
		{
			this._tintColor = param1;
			this._tintMultiplier = param2;
			var _loc_6:Number = 1 - param2;
			this.blueMultiplier = _loc_6;
			var _loc_6:Number = _loc_6;
			this.greenMultiplier = _loc_6;
			this.redMultiplier = _loc_6;
			var _loc_3:uint = (param1 >> 16) & 255;
			var _loc_4:uint = (param1 >> 8) & 255;
			var _loc_5:uint = param1 & 255;
			this.redOffset = Math.round(_loc_3 * param2);
			this.greenOffset = Math.round(_loc_4 * param2);
			this.blueOffset = Math.round(_loc_5 * param2);
		}
	}
}
package net.theyak
{
	public class YakMath extends Object
	{
		final public static function randomRange(param1:int, param2:int)
		{
			return (Math.round(Math.random() * (param2 - param1))) + param1;
		}

		final public static function round_string(param1:String, param2:uint = 0) : String
		{
			var _loc_4:int = NaN;
			var _loc_5:int = NaN;
			if(param1 == null)
			{
				return "";
			}
			var _loc_3:RegExp = new RegExp("^[0-9.]+$");
			if(param1.match(_loc_3))
			{
				if(param2 == 0)
				{
					return YakMath.String(Math.round(YakMath.Number(param1)));
				}
				_loc_4 = YakMath.Number(param1);
				_loc_5 = Math.pow(10, param2);
				_loc_4 = _loc_4 * _loc_5;
				_loc_4 = Math.round(_loc_4);
				_loc_4 = _loc_4 / _loc_5;
				return YakMath.String(_loc_4);
			}
			return param1;
		}

		public function YakMath()
		{
			super();
		}
	}
}
package net.theyak.chat
{
	import Misc.*;
	import com.adobe.utils.*;
	import fl.controls.*;
	import flash.utils.*;
	import net.theyak.util.*;

	public class Chat extends Object
	{
		private static var language_count:uint = 0;
		public static var ACTION_MESSAGE_CODE:Number = 253;
		public static var SYSTEM_MESSAGE_CODE:Number = 254;
		public var buffer:String = "";
		private var output:TextArea = null;
		private var cmdChar:String = "/";
		private var publicMessageColor:* = "#0000CC";
		private var noticeMessageColor:* = "#009900";
		private var privateMessageColor:* = "#CC0000";
		private var systemMessageColor:* = "#00CCCC";
		private var commands:Array;
		private var systemCommands:Array;
		private var history:Array;
		private var historyPointer:int = 0;
		public var ignores:Array;
		private var _muted:Boolean = false;
		private var _displayTime:Boolean = true;
		private var _displayChat:Boolean = true;
		public var activeRoomName:String;
		public var activeZoneName:String;
		private var language:Array;
		private var languageAnywhere:Array;
		private var languageWord:Array;

		public function Chat(param1:TextArea = null)
		{
			commands = new Array();
			systemCommands = new Array();
			history = new Array();
			ignores = new Array();
			language = new Array("It's sad that people swear. It's more sad that you are looking for the swears in the compiled code.");
			languageAnywhere = new Array("fuck", "dafuq", "cunt", "bastard", "nigger", "vagina", "penis", "f u c k", "p3n1s", "p3n!s", "nigger", "bitch", "shit", "f*ck", "asshole", "pussy", "dyke", "whore", "damnit", "omfg", "wtf", "retard", "faggot");
			languageWord = new Array("fuk", "fuq", "gay", "fuk", "ffs", "cock", "damn", "ass", "cum", "fag", "slut", "twat");
			super();
			this.output = param1;
			registerCommand("help", "help", "Display this help");
			registerCommand("me", "me", "<action> Perform an action");
			registerCommand("whisper", "whisper", "<username> <message> Send private message to user");
			registerCommand("w", "whisper", "Alias for /whisper");
			registerCommand("msg", "whisper", "Alias for /whisper");
			registerCommand("ignore", "ignore", "<username> Toggles ignore status for a user");
			registerCommand("ignorelist", "ignoreList", "List users you have ignored");
			registerCommand("clearchat", "clearchat", "Clears the chat area");
			registerCommand("cc", "clearchat", "Alias for /clearchat");
		}

		public function getOutput() : TextArea
		{
			return this.output;
		}

		public function setOutput(param1:TextArea) : void
		{
			this.output = param1;
			display();
		}

		public function clear() : void
		{
			output.text = "";
			buffer = "";
			output.invalidate();
		}

		public function send(param1:String, param2:String = null, param3:String = null) : void
		{
			var _loc_4:Object = null;
			var _loc_5:Boolean = false;
			var _loc_6:uint = 0;
			var _loc_7:Object = null;
			var _loc_8:String = null;
			if(param1 == null || _muted)
			{
				return;
			}
			if(param2 == null)
			{
				param2 = activeZoneName;
			}
			if(param3 == null)
			{
				param3 = activeRoomName;
			}
			param1 = StringUtil.trim(param1);
			if(param1.length > 255)
			{
				param1 = param1.substr(0, 255);
			}
			updateHistory(param1);
			if(param1.length == 0)
			{
				return;
			}
			if(param1.charAt(0) == cmdChar.charAt(0))
			{
				_loc_4 = parse(param1.substr(1));
				_loc_5 = false;
				_loc_6 = 0;
				while(_loc_6 < commands.length)
				{
					if(commands[_loc_6].command == _loc_4.command)
					{
						_loc_7 = commands[_loc_6].scope;
						_loc_8 = commands[_loc_6].funcName;
						var _loc_9:Object = _loc_7;
						_loc_9[_loc_8](_loc_4);
						_loc_5 = true;
						break;
					}
					_loc_6 = _loc_6 + 1;
				}
				if(!_loc_5)
				{
					noticeEvent("Invalid command: " + _loc_4.command);
				}
			}
			else
			{
				g.server.sendPublicMessage(param1, param2, param3);
			}
		}

		public function forceSend(param1:String, param2:String = null, param3:String = null)
		{
			var _loc_4:* = _muted;
			_muted = false;
			send(param1, param2, param3);
			_muted = _loc_4;
		}

		public function publicMessageEvent(param1:String, param2:String, param3:String, param4:String) : void
		{
			if(ignored(param1) < 0)
			{
				if(param2.charAt(0) <= "~")
				{
					if(param3 == activeZoneName && param4 == activeRoomName)
					{
						addBuffer("<font color=\"" + publicMessageColor + "\">" + param1 + "</font>: " + wrap_url(StringEx.htmlspecialchars(param2)));
					}
					else
					{
						addBuffer("<font color=\"" + publicMessageColor + "\">" + param1 + " (" + param3 + ":" + param4 + ")</font>: " + wrap_url(StringEx.htmlspecialchars(param2)));
					}
				}
				else
				{
					if(param2.charCodeAt(0) == ACTION_MESSAGE_CODE)
					{
						addBuffer("<font color=\"" + publicMessageColor + "\" >* " + param1 + " " + StringEx.htmlspecialchars(param2.substr(1)) + "</font>");
					}
					else
					{
						if(param2.charCodeAt(0) == SYSTEM_MESSAGE_CODE)
						{
							systemMessageEvent(param1, param2);
						}
					}
				}
				if(_displayChat)
				{
					display();
				}
			}
		}

		public function noticeEvent(param1:String) : void
		{
			addBuffer("<font color=\"" + noticeMessageColor + "\">" + StringEx.htmlspecialchars(param1) + "</font>&nbsp;", true);
			display();
		}

		public function privateMessageEvent(param1:String, param2:String) : void
		{
			if(param2.charCodeAt(0) == SYSTEM_MESSAGE_CODE)
			{
				systemMessageEvent(param1, param2);
			}
			else
			{
				if(ignored(param1) < 0)
				{
					addBuffer("<font color=\"" + privateMessageColor + "\">[" + param1 + "]</font> " + wrap_url(StringEx.htmlspecialchars(param2)));
					if(_displayChat)
					{
						display();
					}
				}
			}
		}

		public function systemMessageEvent(param1:String, param2:String) : void
		{
			var _loc_5:Object = null;
			var _loc_6:String = null;
			while(param2.charCodeAt(0) == SYSTEM_MESSAGE_CODE)
			{
				param2 = param2.substr(1);
			}
			param2 = StringUtil.trim(param2);
			var _loc_3:Object = parse(param2);
			var _loc_4:uint = 0;
			while(_loc_4 < systemCommands.length)
			{
				if(systemCommands[_loc_4].command == _loc_3.command)
				{
					_loc_5 = systemCommands[_loc_4].scope;
					_loc_6 = systemCommands[_loc_4].funcName;
					var _loc_7:Object = _loc_5;
					_loc_7[_loc_6](param1, _loc_3);
					break;
				}
				_loc_4 = _loc_4 + 1;
			}
		}

		public function whisper(param1:Object) : void
		{
			if(param1.str == undefined || param1.str.length <= 0 || param1.target == undefined || param1.target.length <= 0)
			{
				noticeEvent("Usage: " + param1.command + " <username> <msg>");
				return;
			}
			g.server.sendPrivateMessage(param1.target, param1.str);
			privateMessageEvent("To: " + param1.target, param1.str);
		}

		private function me(param1:Object) : void
		{
			if(param1.target == undefined || param1.target.length <= 0)
			{
				noticeEvent("Usage: " + param1.command + " <msg>");
				return;
			}
			g.server.sendPublicMessage((String.fromCharCode(ACTION_MESSAGE_CODE) + param1.target) + " " + param1.str, activeZoneName, activeRoomName);
		}

		protected function ignore(param1:Object) : Boolean
		{
			if(param1.target == undefined || param1.target.length <= 0)
			{
				noticeEvent("Usage: " + param1.command + " <username>");
				return false;
			}
			var _loc_2:int = ignored(param1.target);
			if(_loc_2 >= 0)
			{
				noticeEvent(param1.target + " removed from ignore list");
				ignores.splice(_loc_2, 1);
				return false;
			}
			noticeEvent(param1.target + " added to ignore list");
			ignores.push(param1.target.toLowerCase());
			return true;
		}

		protected function ignoreList(param1:Object) : void
		{
			noticeEvent("Currently ignored: " + (ignores.join(", ")));
		}

		public function ignored(param1:String) : int
		{
			param1 = param1.toLowerCase();
			var _loc_2:uint = 0;
			while(_loc_2 < ignores.length)
			{
				if(ignores[_loc_2] == param1)
				{
					return _loc_2;
				}
				_loc_2 = _loc_2 + 1;
			}
			return -1;
		}

		private function clearchat(param1:Object) : void
		{
			clear();
		}

		public function help(param1:Object) : void
		{
			var _loc_3:String = null;
			var _loc_2:uint = 0;
			while(_loc_2 < commands.length)
			{
				if(commands[_loc_2].help != "hidden")
				{
					_loc_3 = (cmdChar + commands[_loc_2].command) + " ";
					if(commands[_loc_2].help != null)
					{
						_loc_3 = _loc_3 + commands[_loc_2].help;
					}
					noticeEvent(_loc_3);
				}
				_loc_2 = _loc_2 + 1;
			}
		}

		public function completeName(param1:String, param2:String, param3:String) : String
		{
			var _loc_4:int = 0;
			if(param1.length <= 0)
			{
				return "";
			}
			var _loc_5:int = param1.length - 1;
			while(_loc_5 >= 0)
			{
				if(param1.charAt(_loc_5) == " ")
				{
					_loc_5++;
					break;
				}
				_loc_5 = _loc_5 - 1;
			}
			if(_loc_5 < 0)
			{
				_loc_5 = 0;
			}
			var _loc_6:String = param1.substr(_loc_5).toLowerCase();
			var _loc_7:Array = g.server.getUsersInRoom(param2, param3);
			var _loc_8:uint = 0;
			while(_loc_8 < _loc_7.length)
			{
				if((_loc_7[_loc_8].name.toLowerCase().substr(0, _loc_6.length)) == _loc_6)
				{
					if((_loc_7[_loc_8].name.indexOf(" ")) > -1)
					{
						return (param1.substr(0, param1.length - _loc_6.length)) + "\"" + _loc_7[_loc_8].name + "\"";
					}
					return (param1.substr(0, param1.length - _loc_6.length)) + _loc_7[_loc_8].name;
				}
				_loc_8 = _loc_8 + 1;
			}
			return param1;
		}

		public function parse(param1:String) : Object
		{
			var _loc_2:Object = new Object();
			_loc_2.command = "";
			_loc_2.target = "";
			_loc_2.str = "";
			if(param1 == null || param1.length == 0)
			{
				return _loc_2;
			}
			var _loc_3:int = 0;
			while(param1.charCodeAt(_loc_3) == cmdChar.charCodeAt(0) || param1.charCodeAt(_loc_3) <= 32 && _loc_3 < param1.length)
			{
				_loc_3++;
			}
			param1 = StringUtil.trim(param1);
			_loc_3 = 0;
			while(param1.charCodeAt(_loc_3) > 32 && _loc_3 < param1.length)
			{
				_loc_3++;
			}
			_loc_2.command = (param1.substr(0, _loc_3)).toLowerCase();
			while(param1.charCodeAt(_loc_3) <= 32 && _loc_3 < param1.length)
			{
				_loc_3++;
			}
			var _loc_4:Boolean = false;
			var _loc_5:Boolean = false;
			var _loc_6:int = _loc_3;
			if(_loc_6 < param1.length)
			{
				if(param1.charAt(_loc_6) == "\"")
				{
					_loc_6++;
					_loc_6++;
					_loc_4 = true;
				}
				while(_loc_4)
				{
					_loc_6++;
				}
				_loc_2.target = param1.charCodeAt(_loc_6) > 32 || param1.substr(_loc_6, _loc_6 - _loc_6);
				if(_loc_6 < param1.length)
				{
					_loc_2.str = StringUtil.trim(param1.substr(_loc_6));
				}
			}
			return _loc_2;
		}

		public function registerCommand(param1:String, param2:String, param3:String = null, param4:Object = null) : void
		{
			if(param4 == null)
			{
			}
			var _loc_5:Object = new Object();
			_loc_5.command = param1.toLowerCase();
			_loc_5.funcName = param2;
			_loc_5.scope = param4;
			_loc_5.help = param3;
			commands.push(_loc_5);
		}

		public function registerSystemCommand(param1:String, param2:String, param3:Object) : void
		{
			if(param3 == null)
			{
			}
			var _loc_4:Object = new Object();
			_loc_4.command = param1.toLowerCase();
			_loc_4.funcName = param2;
			_loc_4.scope = param3;
			systemCommands.push(_loc_4);
		}

		private function updateHistory(param1:String) : void
		{
			if(history.length >= 10)
			{
				history.splice(0, 1);
			}
			var _loc_2:Object = new Object();
			_loc_2.Text = param1;
			_loc_2.Time = getTimer();
			history.push(_loc_2);
			historyPointer = -1;
		}

		public function getPrevious() : String
		{
			if(history.length <= 0)
			{
				return "";
			}
			if(historyPointer < 0)
			{
				historyPointer = history.length;
			}
			var _loc_2:* = this.historyPointer - 1;
			this.historyPointer = _loc_2;
			if(historyPointer < 0)
			{
				historyPointer = history.length - 1;
			}
			return history[historyPointer].Text;
		}

		public function getNext() : String
		{
			if(historyPointer == -1 || historyPointer == (history.length - 1))
			{
				return "";
			}
			var _loc_2:* = this.historyPointer + 1;
			this.historyPointer = _loc_2;
			return history[historyPointer].Text;
		}

		public function checkFlood(param1:int, param2:int) : Boolean
		{
			var _loc_3:int = 0;
			_loc_3 = history.length;
			while(param1 && _loc_3 >= 0)
			{
				_loc_3 = _loc_3 - 1;
				param1 = param1 - 1;
			}
			if(_loc_3 < param1)
			{
				return false;
			}
			var _loc_4:int = history[_loc_3].Time;
			if((_loc_4 + (param2 * 1000)) > getTimer())
			{
				return true;
			}
			return false;
		}

		public function checkLanguage(param1:String) : uint
		{
			var _loc_4:uint = 0;
			param1 = param1.toLowerCase();
			var _loc_2:uint = 0;
			while(_loc_2 < languageAnywhere.length)
			{
				if(param1.indexOf(languageAnywhere[_loc_2]) >= 0)
				{
					var _loc_6:* = this.language_count + 1;
					this.language_count = _loc_6;
					return language_count;
				}
				_loc_2 = _loc_2 + 1;
			}
			var _loc_3:Array = param1.split(" ");
			_loc_2 = 0;
			while(_loc_2 < languageWord.length)
			{
				_loc_4 = 0;
				while(_loc_4 < _loc_3.length)
				{
					if(_loc_3[_loc_4].toLowerCase() == languageWord[_loc_2])
					{
						var _loc_6:* = this.language_count + 1;
						this.language_count = _loc_6;
						return language_count;
					}
					_loc_4 = _loc_4 + 1;
				}
				_loc_2 = _loc_2 + 1;
			}
			return 0;
		}

		private function addBuffer(param1:String, param2:Boolean = false) : void
		{
			if(buffer.length > 0)
			{
				buffer = buffer + "\n";
			}
			buffer = buffer + (getTime() + " ");
			buffer = buffer + param1;
		}

		public function set mute(param1:Boolean) : void
		{
			_muted = param1;
		}

		public function get mute() : Boolean
		{
			return _muted;
		}

		public function set displayTime(param1:Boolean) : void
		{
			_displayTime = param1;
		}

		public function get displayTime() : Boolean
		{
			return _displayTime;
		}

		public function set displayChat(param1:Boolean) : void
		{
			_displayChat = param1;
			if(param1 == true)
			{
				display();
			}
		}

		public function get displayChat() : Boolean
		{
			return _displayChat;
		}

		private function getTime() : String
		{
			var _loc_1:Date = null;
			var _loc_2:String = null;
			if(_displayTime)
			{
				_loc_1 = new Date();
				_loc_2 = "[" + _loc_1.getHours() + ":";
				if(_loc_1.getMinutes() < 10)
				{
					_loc_2 = _loc_2 + "0" + _loc_1.getMinutes() + "] ";
				}
				else
				{
					_loc_2 = _loc_2 + (_loc_1.getMinutes() + "] ");
				}
				return _loc_2;
			}
			else
			{
				return "";
			}
		}

		private function display() : void
		{
			var _loc_1:int = NaN;
			var _loc_2:Boolean = false;
			if(buffer.length > 32768)
			{
				buffer = buffer.substr(4096);
				_loc_1 = buffer.indexOf("<font");
				if(_loc_1 > -1)
				{
					buffer = buffer.substr(_loc_1);
				}
			}
			if(output)
			{
				_loc_2 = output.verticalScrollPosition == output.maxVerticalScrollPosition;
				output.htmlText = buffer;
			}
		}

		public function wrap_url(param1:String) : String
		{
			var _loc_3:int = 0;
			var _loc_4:String = null;
			var _loc_5:String = null;
			var _loc_2:int = param1.indexOf("http://");
			if(_loc_2 < 0)
			{
				_loc_2 = param1.indexOf("https://");
			}
			if(_loc_2 >= 0)
			{
				_loc_3 = param1.indexOf(" ", _loc_2);
				if(_loc_3 < 6)
				{
					_loc_3 = param1.length;
				}
				_loc_4 = param1.substr(_loc_2, _loc_3 - _loc_2);
				_loc_4 = _loc_4.replace(new RegExp("[\\\"]", "g"), "");
				_loc_5 = "<a target=\"_blank\" href=\"" + _loc_4 + "\"><u>" + _loc_4 + "</u></a>";
				param1 = (param1.substr(0, _loc_2)) + _loc_5 + (param1.substr(_loc_3, param1.length - _loc_3));
			}
			return param1;
		}
	}
}
package net.theyak.events
{
	import flash.events.*;

	public class AlertEvent extends Event
	{
		public var button:String = "";

		public function AlertEvent(param1:String, param2:Boolean = false, param3:Boolean = false)
		{
			super("AlertEvent", param2, param3);
			this.button = param1;
		}
	}
}
package net.theyak.events
{
	import flash.events.*;

	public class DialogEvent extends Event
	{
		public var action:String = "";

		public function DialogEvent(param1:String, param2:Boolean = false, param3:Boolean = false)
		{
			super("DialogEvent", param2, param3);
			this.action = param1;
		}
	}
}
package net.theyak.events
{
	public class EventDispatcher extends Object
	{
		private var listeners:Array;
		private var events:Object;

		public function EventDispatcher()
		{
			super();
			listeners = new Array();
			events = new Object();
		}

		public function dispatchEvent(param1:String, param2:Object) : void
		{
			var _loc_4:int = 0;
			var _loc_5:Object = null;
			var _loc_6:String = null;
			var _loc_3:Array = events[param1];
			if(_loc_3 != null)
			{
				_loc_4 = 0;
				while(_loc_4 < _loc_3.length)
				{
					_loc_5 = _loc_3[_loc_4].scope;
					_loc_6 = _loc_3[_loc_4].funcName;
					var _loc_7:Object = _loc_5;
					_loc_7[_loc_6](param2);
					_loc_4++;
				}
			}
		}

		public function addEventListener(param1:String, param2:String, param3:Object) : void
		{
			if(events[param1] == null)
			{
				events[param1] = new Array();
			}
			var _loc_4:Boolean = false;
			var _loc_5:int = 0;
			while(_loc_5 < events[param1].length)
			{
				if(events[param1][_loc_5].scope == param3 && events[param1][_loc_5].funcName == param2)
				{
					_loc_4 = true;
					break;
				}
				_loc_5++;
			}
			if(!_loc_4)
			{
				events[param1].push({scope:param3, funcName:param2});
			}
		}

		public function removeEventListener(param1:String, param2:String, param3:Object) : void
		{
			if(!events[param1])
			{
				return;
			}
			var _loc_4:int = 0;
			while(_loc_4 < events[param1].length)
			{
				if(events[param1][_loc_4].scope == param3 && events[param1][_loc_4].funcName == param2)
				{
					events[param1].splice(_loc_4, 1);
					break;
				}
				_loc_4++;
			}
			if(events[param1].length == 0)
			{
			}
		}
	}
}
package net.theyak.net
{
	import com.adobe.serialization.json.*;
	import flash.events.*;
	import flash.net.*;

	public class JSONLoader extends Object
	{
		private var file:String;
		private var jsonLoader:URLLoader;
		private var options:Object;

		public function JSONLoader(param1:String, param2:Function, param3:Object = null)
		{
			super();
			this.file = param1;
			if(param3 == null)
			{
				param3 = new Object();
			}
			param3.success = param2;
			this.options = param3;
			jsonLoader = new URLLoader();
			jsonLoader.addEventListener(Event.COMPLETE, onComplete);
			jsonLoader.addEventListener(IOErrorEvent.IO_ERROR, ioError);
			jsonLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityError);
			jsonLoader.load(new URLRequest(param1));
		}

		private function onComplete(param1:Event) : void
		{
			removeListeners();
			options.success((new JSONDecoder(param1.target.data)).getValue());
		}

		private function ioError(param1:IOErrorEvent) : void
		{
			removeListeners();
			trace("Error loading XML " + file);
			if(!(options.ioError == undefined) && options.ioError is Function)
			{
				options.ioError(param1);
			}
		}

		private function securityError(param1:SecurityErrorEvent) : void
		{
			removeListeners();
			trace("Security error loading XML " + file);
			if(!(options.securityError == undefined) && options.securityError is Function)
			{
				options.securityError(param1);
			}
		}

		private function removeListeners() : void
		{
			jsonLoader.removeEventListener(Event.COMPLETE, onComplete);
			jsonLoader.removeEventListener(IOErrorEvent.IO_ERROR, options.ioError);
			jsonLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, options.securityError);
		}
	}
}
package net.theyak.net
{
	import flash.events.*;
	import flash.net.*;

	public class queryLoader extends Object
	{
		private var file:String;
		private var loader:URLLoader;
		private var options:Object;

		public function queryLoader(param1:String, param2:Function, param3:Object = null)
		{
			super();
			this.file = param1;
			if(param3 == null)
			{
				param3 = new Object();
			}
			param3.success = param2;
			this.options = param3;
			loader = new URLLoader();
			loader.dataFormat = URLLoaderDataFormat.VARIABLES;
			loader.addEventListener(Event.COMPLETE, onComplete);
			loader.addEventListener(IOErrorEvent.IO_ERROR, ioError);
			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityError);
			loader.load(new URLRequest(param1));
		}

		private function onComplete(param1:Event) : void
		{
			var _loc_2:URLLoader = URLLoader(param1.target);
			options.success(_loc_2.data);
		}

		private function ioError(param1:IOErrorEvent) : void
		{
			removeListeners();
			trace("Error loading XML " + file);
			if(!(options.ioError == undefined) && options.ioError is Function)
			{
				options.ioError(param1);
			}
		}

		private function securityError(param1:SecurityErrorEvent) : void
		{
			removeListeners();
			trace("Security error loading XML " + file);
			if(!(options.securityError == undefined) && options.securityError is Function)
			{
				options.securityError(param1);
			}
		}

		private function removeListeners() : void
		{
			loader.removeEventListener(Event.COMPLETE, onComplete);
			loader.removeEventListener(IOErrorEvent.IO_ERROR, options.ioError);
			loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, options.securityError);
		}
	}
}
package net.theyak.net
{
	import flash.events.*;
	import flash.net.*;

	public class XMLLoader extends Object
	{
		private var file:String;
		private var xmlLoader:URLLoader;
		private var options:Object;

		public function XMLLoader(param1:String, param2:Function, param3:Object = null)
		{
			super();
			this.file = param1;
			if(param3 == null)
			{
				param3 = new Object();
			}
			param3.success = param2;
			this.options = param3;
			xmlLoader = new URLLoader();
			xmlLoader.addEventListener(Event.COMPLETE, onComplete);
			xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, ioError);
			xmlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityError);
			xmlLoader.load(new URLRequest(param1));
		}

		private function onComplete(param1:Event) : void
		{
			removeListeners();
			XML.ignoreWhitespace = true;
			options.success(new XML(param1.target.data));
		}

		private function ioError(param1:IOErrorEvent) : void
		{
			removeListeners();
			trace("Error loading XML file. " + param1.toString());
			if(!(options.ioError == undefined) && options.ioError is Function)
			{
				options.ioError(param1);
			}
		}

		private function securityError(param1:SecurityErrorEvent) : void
		{
			removeListeners();
			trace("Security error loading XML file. " + param1.toString());
			if(!(options.securityError == undefined) && options.securityError is Function)
			{
				options.securityError(param1);
			}
		}

		private function removeListeners() : void
		{
			xmlLoader.removeEventListener(Event.COMPLETE, onComplete);
			xmlLoader.removeEventListener(IOErrorEvent.IO_ERROR, options.ioError);
			xmlLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, options.securityError);
		}
	}
}
package net.theyak.server
{
	import Misc.*;
	import com.electrotank.electroserver4.*;
	import com.electrotank.electroserver4.entities.*;
	import com.electrotank.electroserver4.esobject.*;
	import com.electrotank.electroserver4.message.*;
	import com.electrotank.electroserver4.message.event.*;
	import com.electrotank.electroserver4.message.request.*;
	import com.electrotank.electroserver4.message.response.*;
	import com.electrotank.electroserver4.plugin.*;
	import com.electrotank.electroserver4.room.*;
	import com.electrotank.electroserver4.user.*;
	import com.electrotank.electroserver4.zone.*;
	import flash.utils.*;
	import net.theyak.events.*;

	public class ElectroServer4 extends EventDispatcher
	{
		protected var server:ElectroServer;
		private var _ip:String;
		private var _port:uint;
		protected var lastRequest:int;
		private var reconnect:Boolean = true;
		public var isConnected:Boolean = false;
		private var hasConnected:Boolean = false;
		private var debug:Boolean = true;

		public function ElectroServer4()
		{
			super();
			server = new ElectroServer();
			server.setDebug(true);
			lastRequest = getTimer();
			initializeListeners();
		}

		public function connect(param1:String = null, param2:uint = 0) : void
		{
			lastRequest = getTimer();
			if(param1 == null)
			{
				param1 = _ip;
				param2 = _port;
			}
			else
			{
				_port = param2;
				_ip = param1;
			}
			server.createConnection(param1, param2);
		}

		public function onConnectionEvent(param1:ConnectionEvent) : void
		{
			isConnected = param1.getAccepted();
			if(hasConnected)
			{
				g.scene.debug("Sending reconnection event" + isConnected);
				dispatchEvent("reconnection", {connected:isConnected});
			}
			else
			{
				dispatchEvent("connection", {connected:isConnected});
				hasConnected = isConnected;
			}
		}

		public function onConnectionClosedEvent(param1:ConnectionClosedEvent) : void
		{
			dispatchEvent("connectionClosed", {});
			isConnected = false;
		}

		public function reset() : void
		{
			destroyListeners();
			server = new ElectroServer();
			initializeListeners();
		}

		public function onGenericError(param1:GenericErrorResponse) : void
		{
			if(param1.getRequestMessageType().getMessageTypeName() == "LogoutRequest")
			{
				server.removeEventListener(MessageType.GenericErrorResponse, "onGenericError", this);
				server = new ElectroServer();
				initializeListeners();
				hasConnected = true;
				dispatchEvent("connectionCloseReset", {});
			}
			else
			{
					break;
					break;
				switch(param1.getErrorType().getId())
				{
				default:
					trace("(ERR) Unhandled Error: " + param1.getRequestMessageType().getMessageTypeName() + " : " + param1.getErrorType().getDescription());
					break;
				}
			}
		}

		public function disconnectAndReset() : void
		{
			g.scene.debug("Disconnect and reset");
			destroyListeners();
			g.scene.debug("Dropping connections");
			server.addEventListener(MessageType.GenericErrorResponse, "onGenericError", this);
			var _loc_1:LogoutRequest = new LogoutRequest();
			server.send(_loc_1);
		}

		public function onConnectionCloseResetEvent(param1:ConnectionClosedEvent) : void
		{
			g.scene.debug("onConnectionCloseResetEvent");
			server.removeEventListener(MessageType.ConnectionClosedEvent, "onConnectionCloseResetEvent", this);
			initializeListeners();
			hasConnected = false;
			dispatchEvent("connectionCloseReset", {});
		}

		public function login(param1:String, param2:String) : void
		{
			lastRequest = getTimer();
			var _loc_3:LoginRequest = new LoginRequest();
			_loc_3.setUserName(param1);
			server.send(_loc_3);
		}

		public function onLoginResponse(param1:LoginResponse) : void
		{
			if(param1.getEsError())
			{
				g.scene.debug("Error: " + param1.getEsError().getDescription());
			}
			if(param1.getAccepted())
			{
				dispatchEvent("login", {success:true});
			}
			else
			{
				dispatchEvent("login", {success:false});
			}
		}

		public function logout() : void
		{
			lastRequest = getTimer();
			reconnect = false;
			var _loc_1:LogoutRequest = new LogoutRequest();
			_loc_1.setDropAllConnections(true);
			server.send(_loc_1);
		}

		public function joinRoom(param1:String, param2:String, param3:Object = null, param4:Object = null) : void
		{
			lastRequest = getTimer();
			var _loc_5:CreateRoomRequest = new CreateRoomRequest();
			_loc_5.setRoomName(param2);
			_loc_5.setZoneName(param1);
			var _loc_6:Plugin = new Plugin();
			_loc_6.setPluginHandle("PublicMessageEventHandler");
			_loc_6.setPluginName("ScrewYouPlugin");
			_loc_6.setExtensionName("ForTheWin");
			_loc_5.setPlugins([_loc_6]);
			server.send(_loc_5);
		}

		public function leaveRoom(param1:String, param2:String) : void
		{
			var _loc_3:LeaveRoomRequest = null;
			lastRequest = getTimer();
			if(inRoom(param1, param2))
			{
				_loc_3 = new LeaveRoomRequest();
				_loc_3.setRoomId(toRoomId(param1, param2));
				_loc_3.setZoneId(toZoneId(param1));
				server.send(_loc_3);
			}
		}

		public function leaveAllRooms() : void
		{
			var _loc_3:LeaveRoomRequest = null;
			var _loc_1:Array = getRoomList();
			var _loc_2:uint = 0;
			while(_loc_2 < _loc_1.length)
			{
				_loc_3 = new LeaveRoomRequest();
				_loc_3.setRoomId(toRoomId(_loc_1[_loc_2].zonename, _loc_1[_loc_2].roomname));
				_loc_3.setZoneId(toZoneId(_loc_1[_loc_2].zonename));
				server.send(_loc_3);
				_loc_2 = _loc_2 + 1;
			}
		}

		public function getUsersInRoom(param1:String, param2:String) : Array
		{
			var _loc_3:Zone = server.getZoneManager().getZoneByName(param1);
			var _loc_4:Room = _loc_3.getRoomByName(param2);
			g.scene.debug(String(_loc_4.getUserCount()));
			return toUsers(_loc_4.getUsers());
		}

		public function getRoomList() : Array
		{
			var _loc_5:Zone = null;
			var _loc_6:Array = null;
			var _loc_7:uint = 0;
			var _loc_8:Object = null;
			var _loc_1:Array = new Array();
			var _loc_2:ZoneManager = server.getZoneManager();
			var _loc_3:Array = _loc_2.getZones();
			var _loc_4:uint = 0;
			while(_loc_4 < _loc_3.length)
			{
				_loc_5 = _loc_3[_loc_4];
				_loc_6 = _loc_5.getRooms();
				_loc_7 = 0;
				while(_loc_7 < _loc_6.length)
				{
					if(_loc_6[_loc_7].getIsJoined())
					{
						_loc_8 = new Object();
						_loc_8.zonename = _loc_3[_loc_4].getZoneName();
						_loc_8.roomname = _loc_6[_loc_7].getRoomName();
						_loc_1.push(_loc_8);
					}
					_loc_7 = _loc_7 + 1;
				}
				_loc_4 = _loc_4 + 1;
			}
			return _loc_1;
		}

		public function inRoom(param1:String, param2:String) : Boolean
		{
			var _loc_3:Array = getRoomList();
			var _loc_4:uint = 0;
			while(_loc_4 < _loc_3.length)
			{
				if(_loc_3[_loc_4].zonename == param1 && _loc_3[_loc_4].roomname == param2)
				{
					return true;
				}
				_loc_4 = _loc_4 + 1;
			}
			return false;
		}

		public function onJoinRoomEvent(param1:JoinRoomEvent) : void
		{
			dispatchEvent("joinRoom", {users:toUsers(param1.getUsers()), description:param1.getRoomDescription(), zonename:param1.getZoneName(), roomname:param1.getRoomName(), variables:param1.getRoomVariables(), capacity:param1.getCapacity()});
		}

		public function onLeaveRoomEvent(param1:LeaveRoomEvent) : void
		{
			g.scene.debug("Leaving room " + toZoneName(param1.getZoneId()) + ":" + (toRoomName(param1.getZoneId(), param1.getRoomId())));
			dispatchEvent("leaveRoom", {zonename:toZoneName(param1.getZoneId()), roomname:toRoomName(param1.getZoneId(), param1.getRoomId())});
		}

		public function getServerZoneList()
		{
			server.addEventListener(MessageType.GetZonesResponse, "onZonesResponse", this);
			var _loc_1:GetZonesRequest = new GetZonesRequest();
			server.send(_loc_1);
		}

		public function onZonesResponse(param1:GetZonesResponse) : void
		{
			var _loc_2:String = "";
			server.removeEventListener(MessageType.GetZonesResponse, "onZonesResponse", this);
			var _loc_3:Array = param1.getZones();
			var _loc_4:uint = 0;
			while(_loc_4 < _loc_3.length)
			{
				_loc_2 = _loc_2 + (_loc_3[_loc_4].getZoneName() + "\n");
				_loc_4 = _loc_4 + 1;
			}
			dispatchEvent("zoneList", {zones:_loc_2});
		}

		public function getRoomsInZone(param1:String)
		{
			server.addEventListener(MessageType.GetRoomsInZoneResponse, "onRoomsInZoneResponse", this);
			var _loc_2:GetRoomsInZoneRequest = new GetRoomsInZoneRequest();
			_loc_2.setZoneName(param1);
			server.send(_loc_2);
		}

		public function onRoomsInZoneResponse(param1:GetRoomsInZoneResponse) : void
		{
			var _loc_2:String = "";
			server.removeEventListener(MessageType.GetRoomsInZoneResponse, "onRoomsInZoneResponse", this);
			var _loc_3:Array = param1.getRooms();
			var _loc_4:uint = 0;
			while(_loc_4 < _loc_3.length)
			{
				_loc_2 = _loc_2 + (_loc_3[_loc_4].getRoomName() + "\n");
				_loc_4 = _loc_4 + 1;
			}
			dispatchEvent("roomsInZone", {zonename:param1.getZoneName(), rooms:_loc_2});
		}

		public function setUserVariable(param1:String, param2:String) : void
		{
			var _loc_3:UpdateUserVariableRequest = new UpdateUserVariableRequest();
			var _loc_4:EsObject = new EsObject();
			_loc_4.setString(param1, param2);
			_loc_3.setValue(_loc_4);
			_loc_3.setName(param1);
			server.send(_loc_3);
		}

		public function getUserVariable(param1:String, param2:String) : String
		{
			var _loc_4:UserVariable = null;
			var _loc_3:User = server.getUserManager().getUserByName(param1);
			if(_loc_3 != null)
			{
				_loc_4 = _loc_3.getUserVariable(param2);
				if(_loc_4 != null)
				{
					return _loc_4.getValue().getString(param2);
				}
			}
			return null;
		}

		public function sendPublicMessage(param1:String, param2:String, param3:String) : void
		{
			lastRequest = getTimer();
			var _loc_4:PublicMessageRequest = new PublicMessageRequest();
			_loc_4.setMessage(param1);
			_loc_4.setRoomId(toRoomId(param2, param3));
			_loc_4.setZoneId(toZoneId(param2));
			server.send(_loc_4);
		}

		public function sendPrivateMessage(param1:String, param2:String) : void
		{
			lastRequest = getTimer();
			var _loc_3:PrivateMessageRequest = new PrivateMessageRequest();
			_loc_3.setMessage(param2);
			_loc_3.setUserNames([param1]);
			server.send(_loc_3);
		}

		public function serverPlugin(param1:String, param2:String, param3:Object = null, param4:Boolean = true) : void
		{
			esServerPlugin(param1, param2, toEsObject(param3), param4);
		}

		public function esServerPlugin(param1:String, param2:String, param3:EsObject = null, param4:Boolean = true) : void
		{
			if(param4)
			{
				lastRequest = getTimer();
			}
			var _loc_5:PluginRequest = new PluginRequest();
			_loc_5.setPluginName(param1);
			param3.setString("Action", param2);
			_loc_5.setEsObject(param3);
			server.send(_loc_5);
		}

		public function roomPlugin(param1:String, param2:String, param3:String, param4:String, param5:Object, param6:Boolean) : void
		{
			esRoomPlugin(param1, param2, param3, param4, toEsObject(param5), param6);
		}

		public function esRoomPlugin(param1:String, param2:String, param3:String, param4:String, param5:EsObject = null, param6:Boolean = true) : void
		{
			var _loc_8:PluginRequest = null;
			if(param6)
			{
				lastRequest = getTimer();
			}
			var _loc_7:Number = toRoomId(param2, param3);
			if(_loc_7 >= 0)
			{
				_loc_8 = new PluginRequest();
				_loc_8.setPluginName(param1);
				_loc_8.setRoomId(_loc_7);
				_loc_8.setZoneId(toZoneId(param2));
				if(!param5)
				{
					param5 = new EsObject();
				}
				param5.setString("Action", param4);
				_loc_8.setEsObject(param5);
				server.send(_loc_8);
			}
		}

		public function onUserListUpdateEvent(param1:UserListUpdateEvent) : void
		{
			var _loc_2:String = null;
			switch(param1.getActionId())
			{
			case UserListUpdateEvent.AddUser:
				_loc_2 = "add";
				break;
			case UserListUpdateEvent.DeleteUser:
				_loc_2 = "remove";
				break;
			case UserListUpdateEvent.UpdateUser:
				_loc_2 = "update";
				break;
			case UserListUpdateEvent.OperatorGranted:
				_loc_2 = "ops";
				break;
			case UserListUpdateEvent.OperatorRevoked:
				_loc_2 = "noops";
				break;
			case UserListUpdateEvent.SendingVideoStream:
				_loc_2 = "startvideo";
				break;
			case UserListUpdateEvent.StoppingVideoStream:
				_loc_2 = "stopvideo";
				break;
			default:
				break;
			}
			dispatchEvent("userListUpdate", {action:_loc_2, user:toUser(param1.getUser()), zonename:toZoneName(param1.getZoneId()), roomname:toRoomName(param1.getZoneId(), param1.getRoomId())});
		}

		public function onPublicMessageEvent(param1:PublicMessageEvent) : void
		{
			dispatchEvent("publicMessage", {name:param1.getUserName(), message:param1.getMessage(), roomname:toRoomName(param1.getZoneId(), param1.getRoomId()), zonename:toZoneName(param1.getZoneId())});
		}

		public function onPrivateMessageEvent(param1:PrivateMessageEvent) : void
		{
			dispatchEvent("privateMessage", {from:param1.getUserName(), message:param1.getMessage()});
		}

		public function onPluginMessageEvent(param1:PluginMessageEvent) : void
		{
			dispatchEvent("pluginMessage", {response:toObject(param1.getEsObject())});
		}

		public function onUserVariableUpdateEvent(param1:UserVariableUpdateEvent) : void
		{
			var _loc_2:String = "UserVariableUpdated";
			if(param1.getActionId() == UserVariableUpdateEvent.VariableCreated)
			{
				_loc_2 = "UserVariableCreated";
			}
			else
			{
				if(param1.getActionId() == UserVariableUpdateEvent.VariableDeleted)
				{
					_loc_2 = "UserVariableDeleted";
				}
			}
			var _loc_3:String = param1.getVariable().getValue().getString(param1.getVariableName());
			var _loc_4:Object = new Object();
			_loc_4.username = param1.user.getUserName();
			_loc_4.variable = param1.getVariableName();
			_loc_4.value = _loc_3;
			dispatchEvent(_loc_2, _loc_4);
		}

		private function toEsObject(param1:Object) : EsObject
		{
			var _loc_3:uint = 0;
			var _loc_4:String = null;
			var _loc_2:EsObject = new EsObject();
			if(_loc_2 == null)
			{
				return _loc_2;
			}
			if(param1 is Array)
			{
				_loc_3 = 0;
				while(_loc_3 < param1.length)
				{
					if(param1[_loc_3].type == "s")
					{
						_loc_2.setString(param1[_loc_3].key, String(param1[_loc_3].value));
					}
					else
					{
						if(param1[_loc_3].type == "i")
						{
							_loc_2.setInteger(param1[_loc_3].key, parseInt(param1[_loc_3].value));
						}
						else
						{
							if(param1[_loc_3].type == "b")
							{
								_loc_2.setBoolean(param1[_loc_3].key, Boolean(param1[_loc_3].value));
							}
							else
							{
								if(param1[_loc_3].type == "r")
								{
									_loc_2.setFloat(param1[_loc_3].key, Number(param1[_loc_3].value));
								}
							}
						}
					}
					_loc_3 = _loc_3 + 1;
				}
			}
			else
			{
				if(param1 is Object)
				{
					var _loc_5:int = 0;
					var _loc_6:* = param1;
					for each(_loc_4 in _loc_6)
					{
						_loc_2.setString(_loc_4, String(_loc_6[_loc_4]));
					}
				}
			}
			return _loc_2;
		}

		private function toObject(param1:EsObject) : Object
		{
			var _loc_2:Object = new Object();
			var _loc_3:Array = param1.getEntries();
			var _loc_4:uint = 0;
			while(_loc_4 < _loc_3.length)
			{
				_loc_2[_loc_3[_loc_4].getName()] = _loc_3[_loc_4].getRawValue();
				_loc_4 = _loc_4 + 1;
			}
			return _loc_2;
		}

		private function toUser(param1:User) : User
		{
			var _loc_2:User = new User(param1.getUserName());
			_loc_2.isMe = param1.getIsMe();
			_loc_2.isSendingVideo = param1.getIsSendingVideo();
			_loc_2.videoStreamName = param1.getVideoStreamName();
			var _loc_3:Array = param1.getUserVariables();
			var _loc_4:uint = 0;
			while(_loc_4 < _loc_3.length)
			{
				_loc_2.setVariable(_loc_3[_loc_4].getName(), _loc_3[_loc_4].getValue().getString(_loc_3[_loc_4].getName()));
				_loc_4 = _loc_4 + 1;
			}
			return _loc_2;
		}

		private function toUsers(param1:Array) : Array
		{
			var _loc_2:Array = new Array();
			var _loc_3:uint = 0;
			while(_loc_3 < param1.length)
			{
				if(param1[_loc_3] is User)
				{
					_loc_2.push(toUser(param1[_loc_3]));
				}
				_loc_3 = _loc_3 + 1;
			}
			return _loc_2;
		}

		public function toZoneId(param1:String) : Number
		{
			return server.getZoneManager().getZoneByName(param1).getZoneId();
		}

		public function toRoomId(param1:String, param2:String) : Number
		{
			var zonename:String = param1;
			var roomname:String = param2;
			var zone:Zone = server.getZoneManager().getZoneByName(zonename);
			try
			{
				if(zone != null)
				{
					return zone.getRoomByName(roomname).getRoomId();
				}
				else
				{
					trace("zone is null");
					return -1;
				}
			}
			catch(error:Error)
			{
				trace("Invalid zone");
				return -1;
			}
			return -1;
		}

		private function toZoneName(param1:Number) : String
		{
			return server.getZoneManager().getZoneById(param1).getZoneName();
		}

		private function toRoomName(param1:Number, param2:Number) : String
		{
			var _loc_3:Zone = server.getZoneManager().getZoneById(param1);
			return _loc_3.getRoomById(param2).getRoomName();
		}

		public function debugEvent(param1:EventImpl) : void
		{
			g.scene.debug(String(param1));
		}

		public function debugResponse(param1:ResponseImpl) : void
		{
			g.scene.debug(String(param1));
		}

		private function initializeListeners() : void
		{
			var _loc_3:uint = 0;
			server.addEventListener(MessageType.JoinRoomEvent, "onJoinRoomEvent", this);
			server.addEventListener(MessageType.LeaveRoomEvent, "onLeaveRoomEvent", this);
			server.addEventListener(MessageType.UserListUpdateEvent, "onUserListUpdateEvent", this);
			server.addEventListener(MessageType.UserVariableUpdateEvent, "onUserVariableUpdateEvent", this);
			server.addEventListener(MessageType.PublicMessageEvent, "onPublicMessageEvent", this);
			server.addEventListener(MessageType.PrivateMessageEvent, "onPrivateMessageEvent", this);
			server.addEventListener(MessageType.PluginMessageEvent, "onPluginMessageEvent", this);
			server.addEventListener(MessageType.ConnectionEvent, "onConnectionEvent", this);
			server.addEventListener(MessageType.ConnectionClosedEvent, "onConnectionClosedEvent", this);
			server.addEventListener(MessageType.LoginResponse, "onLoginResponse", this);
			server.addEventListener(MessageType.GenericErrorResponse, "onGenericError", this);
			var _loc_1:Array = [MessageType.LoginResponse, MessageType.GetUsersInRoomResponse, MessageType.GetUserCountResponse, MessageType.GetZonesResponse, MessageType.GetRoomsInZoneResponse, MessageType.GenericErrorResponse, MessageType.FindZoneAndRoomByNameResponse, MessageType.ValidateAdditionalLoginResponse, MessageType.CreateOrJoinGameResponse, MessageType.FindGamesResponse, MessageType.GetUserVariablesResponse];
			var _loc_2:Array = [MessageType.ConnectionEvent, MessageType.ClientIdleEvent, MessageType.JoinRoomEvent, MessageType.JoinZoneEvent, MessageType.PublicMessageEvent, MessageType.PrivateMessageEvent, MessageType.ZoneUpdateEvent, MessageType.LeaveRoomEvent, MessageType.LeaveZoneEvent, MessageType.UserListUpdateEvent, MessageType.RoomVariableUpdateEvent, MessageType.UserVariableUpdateEvent, MessageType.BuddyStatusUpdatedEvent, MessageType.UserEvictedFromRoomEvent, MessageType.UpdateRoomDetailsEvent, MessageType.PluginMessageEvent, MessageType.CompositePluginMessageEvent, MessageType.ConnectionClosedEvent, MessageType.RtmpConnectionEvent, MessageType.RtmpConnectionClosedEvent, MessageType.RtmpOnStatusEvent];
			if(debug && 1 == 0)
			{
				_loc_3 = 0;
				while(_loc_3 < _loc_2.length)
				{
					server.addEventListener(_loc_2[_loc_3], "debugEvent", this);
					_loc_3 = _loc_3 + 1;
				}
				_loc_3 = 0;
				while(_loc_3 < _loc_1.length)
				{
					server.addEventListener(_loc_1[_loc_3], "debugResponse", this);
					_loc_3 = _loc_3 + 1;
				}
			}
		}

		private function destroyListeners() : void
		{
			server.removeEventListener(MessageType.JoinRoomEvent, "onJoinRoomEvent", this);
			server.removeEventListener(MessageType.LeaveRoomEvent, "onLeaveRoomEvent", this);
			server.removeEventListener(MessageType.UserListUpdateEvent, "onUserListUpdateEvent", this);
			server.removeEventListener(MessageType.UserVariableUpdateEvent, "onUserVariableUpdateEvent", this);
			server.removeEventListener(MessageType.PublicMessageEvent, "onPublicMessageEvent", this);
			server.removeEventListener(MessageType.PrivateMessageEvent, "onPrivateMessageEvent", this);
			server.removeEventListener(MessageType.PluginMessageEvent, "onPluginMessageEvent", this);
			server.removeEventListener(MessageType.ConnectionEvent, "onConnectionEvent", this);
			server.removeEventListener(MessageType.ConnectionClosedEvent, "onConnectionClosedEvent", this);
			server.removeEventListener(MessageType.LoginResponse, "onLoginResponse", this);
			server.removeEventListener(MessageType.GenericErrorResponse, "onGenericError", this);
		}

		private function eventDisplay(param1:String) : void
		{
			if(debug)
			{
				g.scene.debug(param1);
			}
		}
	}
}
package net.theyak.server
{
	public class User extends Object
	{
		public var name:String;
		public var isMe:Boolean;
		public var isSendingVideo:Boolean;
		public var isSendingAudio:Boolean;
		public var videoStreamName:String;
		public var audioStreamName:String;
		private var variables:Array;

		public function User(param1:String)
		{
			super();
			variables = new Array();
			this.name = param1;
			this.isSendingVideo = false;
			this.isSendingAudio = false;
		}

		public function setVariable(param1:String, param2:String) : void
		{
			var _loc_3:uint = 0;
			while(_loc_3 < variables.length)
			{
				if(variables[_loc_3].name == param1)
				{
					variables[_loc_3].value = param2;
					return;
				}
				_loc_3 = _loc_3 + 1;
			}
			var _loc_4:Object = new Object();
			_loc_4.name = param1;
			_loc_4.value = param2;
			variables.push(_loc_4);
		}

		public function getVariable(param1:String) : String
		{
			var _loc_2:uint = 0;
			while(_loc_2 < variables.length)
			{
				if(variables[_loc_2].name == param1)
				{
					return variables[_loc_2].value;
				}
				_loc_2 = _loc_2 + 1;
			}
			return null;
		}

		public function variableExists(param1:String) : Boolean
		{
			return !(getVariable(param1) == null);
		}

		public function toString() : String
		{
			var _loc_1:String = "";
			_loc_1 = _loc_1 + "Name: " + name + "\n";
			_loc_1 = _loc_1 + "isMe: " + isMe + "\n";
			_loc_1 = _loc_1 + "isSendingVideo: " + isSendingVideo + "\n";
			_loc_1 = _loc_1 + "isSendingAudio: " + isSendingAudio + "\n";
			_loc_1 = _loc_1 + "videoStreamName: " + videoStreamName + "\n";
			_loc_1 = _loc_1 + "audioStreamName: " + audioStreamName + "\n";
			_loc_1 = _loc_1 + "Variables:\n";
			var _loc_2:uint = 0;
			while(_loc_2 < variables.length)
			{
				_loc_1 = _loc_1 + "        " + variables[_loc_2].name + ": " + variables[_loc_2].value;
				_loc_2 = _loc_2 + 1;
			}
			return _loc_1;
		}
	}
}
package net.theyak.ui
{
	import fl.controls.*;
	import flash.display.*;
	import flash.events.*;
	import flash.geom.*;
	import flash.text.*;
	import net.theyak.events.*;

	public class YakAlert extends YakDialog
	{
		private var buttons:Sprite;
		private var _button1:Button = null;
		private var _button2:Button = null;
		private var _button3:Button = null;

		public function YakAlert(param1:String, param2:String = "Alert", param3:String = "", param4:String = "", param5:String = "")
		{
			var _loc_9:uint = 0;
			super(param2, 300, 200);
			var _loc_6:Rectangle = getCanvasSize();
			var _loc_7:TextField = new TextField();
			_loc_7.text = param1;
			_loc_7.width = _loc_6.width;
			if(_loc_7.textHeight > 50)
			{
				_loc_7.y = (_loc_7.textHeight - 50) / 2;
			}
			else
			{
				_loc_7.y = 50 - _loc_7.textHeight;
			}
			_loc_7.wordWrap = true;
			var _loc_8:TextFormat = new TextFormat();
			_loc_8.align = "center";
			_loc_8.bold = true;
			_loc_8.font = "_sans";
			_loc_8.size = 16;
			_loc_7.setTextFormat(_loc_8);
			canvas.addChild(_loc_7);
			if(param3.length > 0 || param4.length > 0 || param5.length > 0)
			{
				_loc_9 = 0;
				buttons = new Sprite();
				if(param3.length > 0)
				{
					_button1 = new Button();
					_button1.label = param3;
					_button1.addEventListener(MouseEvent.CLICK, pressed);
					_button1.setSize(70, _button1.height);
					_button1.mouseEnabled;
					buttons.addChild(_button1);
					_loc_9 = _loc_9 + 1;
				}
				if(param4.length > 0)
				{
					_button2 = new Button();
					_button2.label = param4;
					_button2.x = _loc_9 * 75;
					_button2.addEventListener(MouseEvent.CLICK, pressed);
					_button2.setSize(70, _button2.height);
					_button2.mouseEnabled;
					buttons.addChild(_button2);
					_loc_9 = _loc_9 + 1;
				}
				if(param5.length > 0)
				{
					_button3 = new Button();
					_button3.label = param4;
					_button3.x = _loc_9 * 75;
					_button3.addEventListener(MouseEvent.CLICK, pressed);
					_button3.setSize(70, _button3.height);
					_button3.mouseEnabled;
					buttons.addChild(_button3);
					_loc_9 = _loc_9 + 1;
				}
				buttons.y = (_loc_6.height - _button1.height) - 10;
				buttons.x = (_loc_6.width - (75 * _loc_9) - 5) / 2;
				canvas.addChild(buttons);
			}
		}

		public function pressed(param1:MouseEvent) : void
		{
			dispatchEvent(new AlertEvent(Button(param1.target).label));
			super.close();
		}
	}
}
package net.theyak.ui
{
	import flash.display.*;
	import flash.events.*;
	import flash.geom.*;
	import flash.text.*;
	import net.theyak.events.*;
	import window.*;

	public class YakDialog extends Sprite
	{
		private var title:String;
		private var w:int;
		private var h:int;
		private var _wndTopLeft:Sprite;
		private var _wndTop:Sprite;
		private var _wndTopRight:Sprite;
		private var _wndLeft:Sprite;
		private var _wndRight:Sprite;
		private var _wndBottomLeft:Sprite;
		private var _wndBottomRight:Sprite;
		private var _wndBottom:Sprite;
		private var _wndClose:Sprite;
		private var _wndTitle:TextField;
		private var _mask:Sprite;
		private var _canvas:Sprite;
		private var moving:Boolean = false;

		public function YakDialog(param1:String = "Window", param2:int = 400, param3:int = 300)
		{
			super();
			w = param2;
			h = param3;
			paintFrame(param1);
			paintBackground();
			addEventListener(MouseEvent.MOUSE_DOWN, beginDrag);
			addEventListener(MouseEvent.MOUSE_UP, endDrag);
			addEventListener(MouseEvent.ROLL_OUT, mouseOut, true);
			addEventListener(MouseEvent.MOUSE_DOWN, mouseClick);
		}

		public function get canvas() : Sprite
		{
			return _canvas;
		}

		public function getCanvasSize() : Rectangle
		{
			return new Rectangle(0, 0, _wndTop.width, _wndLeft.height);
		}

		public function center(param1:DisplayObject) : void
		{
			x = (param1.width - width) / 2;
			y = (param1.height - height) / 2;
		}

		public function setSize(param1:uint, param2:uint) : void
		{
			w = param1;
			h = param2;
			_wndTop.width = (w - _wndTopLeft.width) - _wndTopRight.width;
			_wndTopRight.x = (_wndTopLeft.x + _wndTopLeft.width) + _wndTop.width;
			_wndLeft.height = (h - _wndTopLeft.height) - _wndBottomLeft.height;
			_wndRight.height = (h - _wndTopRight.height) - _wndBottomRight.height;
			_wndRight.x = (_wndLeft.x + _wndLeft.width) + _wndTop.width;
			_wndBottomLeft.y = (_wndTop.y + _wndTopLeft.height) + _wndLeft.height;
			_wndBottom.width = (w - _wndBottomLeft.width) - _wndBottomRight.width;
			_wndBottom.y = (_wndTop.y + _wndTop.height) + _wndLeft.height;
			_wndBottomRight.x = (_wndLeft.x + _wndBottomLeft.width) + _wndBottom.width;
			_wndBottomRight.y = (_wndTop.y + _wndTopRight.height) + _wndRight.height;
			_wndClose.x = (_wndTopLeft.width + _wndTop.width) - _wndClose.width;
			_mask.width = _wndTop.width;
			_mask.height = _wndLeft.height;
			paintBackground();
		}

		private function paintBackground() : void
		{
			graphics.clear();
			var _loc_1:String = GradientType.LINEAR;
			var _loc_2:Array = [16777215, 16772846];
			var _loc_3:Array = [1, 1];
			var _loc_4:Array = [0, 255];
			var _loc_5:Matrix = new Matrix();
			_loc_5.createGradientBox(_wndTop.width, _wndLeft.height, Math.PI / 2, 0, 0);
			var _loc_6:String = SpreadMethod.PAD;
			graphics.beginGradientFill(_loc_1, _loc_2, _loc_3, _loc_4, _loc_5, _loc_6);
			graphics.drawRect(_wndLeft.width, _wndTop.height, _wndTop.width, _wndLeft.height);
		}

		private function paintFrame(param1:String)
		{
			_wndTopLeft = new TopLeft();
			_wndTopRight = new TopRight();
			_wndTop = new Top();
			_wndLeft = new Left();
			_wndRight = new Right();
			_wndBottomLeft = new BottomLeft();
			_wndBottom = new Bottom();
			_wndBottomRight = new BottomRight();
			_wndClose = new Close();
			var _loc_2:* = (w - _wndBottomLeft.width) - _wndBottomRight.width;
			_wndBottom.width = _loc_2;
			_wndTop.width = _loc_2;
			var _loc_2:* = (h - _wndTop.height) - _wndBottom.height;
			_wndRight.height = _loc_2;
			_wndLeft.height = _loc_2;
			var _loc_2:* = _wndTopLeft.width;
			_wndBottom.x = _loc_2;
			_wndTop.x = _loc_2;
			var _loc_2:* = _wndBottom.width + _wndBottomLeft.width;
			_wndBottomRight.x = _loc_2;
			var _loc_2:* = _loc_2;
			_wndTopRight.x = _loc_2;
			_wndRight.x = _loc_2;
			var _loc_2:* = _wndTop.height;
			_wndRight.y = _loc_2;
			_wndLeft.y = _loc_2;
			var _loc_2:* = _wndTop.height + _wndLeft.height;
			_wndBottom.y = _loc_2;
			var _loc_2:* = _loc_2;
			_wndBottomRight.y = _loc_2;
			_wndBottomLeft.y = _loc_2;
			_wndClose.x = (_wndTopLeft.width + _wndTop.width) - _wndClose.width;
			_wndClose.y = (_wndTop.height - _wndClose.height) / 2;
			addChild(_wndTopLeft);
			addChild(_wndTop);
			addChild(_wndTopRight);
			addChild(_wndLeft);
			addChild(_wndRight);
			addChild(_wndBottomLeft);
			addChild(_wndBottom);
			addChild(_wndBottomRight);
			_wndTitle = new TextField();
			_wndTitle.width = _wndTop.width;
			_wndTitle.height = _wndTop.height - 4;
			_wndTitle.x = _wndTopLeft.width + 4;
			_wndTitle.y = 4;
			_wndTitle.selectable = false;
			addChild(_wndTitle);
			addChild(_wndClose);
			_canvas = new Sprite();
			_canvas.x = _wndLeft.width;
			_canvas.y = _wndTop.height;
			_mask = new Sprite();
			_mask.graphics.beginFill(16716049);
			_mask.graphics.drawRect(0, 0, _wndTop.width, _wndLeft.height);
			_mask.graphics.endFill();
			_mask.x = _canvas.x;
			_mask.y = _canvas.y;
			addChild(_mask);
			_canvas.mask = _mask;
			addChild(_canvas);
			setTitle(param1);
		}

		public function setTitle(param1:String)
		{
			this.title = param1;
			var _loc_2:TextFormat = new TextFormat();
			_loc_2.bold = true;
			_loc_2.font = "_sans";
			_loc_2.size = 13;
			_loc_2.color = 16777215;
			_wndTitle.text = param1;
			_wndTitle.setTextFormat(_loc_2);
		}

		private function beginDrag(param1:MouseEvent) : void
		{
			if(param1.target == _wndTitle)
			{
				moving = true;
				startDrag(false, new Rectangle(0, 0, stage.stageWidth - 20, stage.stageHeight - 20));
			}
		}

		private function endDrag(param1:MouseEvent) : void
		{
			stopDrag();
			moving = false;
		}

		private function mouseOut(param1:MouseEvent) : void
		{
			if(stage != null)
			{
				if(param1.stageX <= 0 || param1.stageX >= stage.width || param1.stageY <= 0 || param1.stageY >= stage.height)
				{
					endDrag(param1);
				}
			}
		}

		private function mouseClick(param1:MouseEvent) : void
		{
			if(param1.target == _wndClose)
			{
				endDrag(param1);
				close();
			}
		}

		public function close()
		{
			removeEventListener(MouseEvent.MOUSE_DOWN, beginDrag);
			removeEventListener(MouseEvent.MOUSE_UP, endDrag);
			removeEventListener(MouseEvent.ROLL_OUT, mouseOut, true);
			removeEventListener(MouseEvent.MOUSE_DOWN, mouseClick);
			dispatchEvent(new DialogEvent("close"));
			parent.removeChild(this);
		}
	}
}
package net.theyak.util
{
	import flash.net.*;

	public class Net extends Object
	{
		final public static function callServer(param1:String) : void
		{
			var url:String = param1;
			var request:URLRequest = new URLRequest(url);
			var loader:URLLoader = new URLLoader();
			try
			{
				loader.load(request);
			}
			catch(error:SecurityError)
			{
			}
		}

		final public static function getURL(param1:String, param2:String = null) : void
		{
			var url:String = param1;
			var window:String = param2;
			var req:URLRequest = new URLRequest(url);
			try
			{
				Net.navigateToURL(req, window);
			}
			catch(e:Error)
			{
				Net.trace("Navigate to URL failed", e.message);
			}
		}

		public function Net()
		{
			super();
		}
	}
}
package net.theyak.util
{
	public class StringEx extends Object
	{
		final public static function toAscii(param1:String) : String
		{
			var _loc_3:uint = 0;
			var _loc_2:int = param1.length - 1;
			while(_loc_2 >= 0)
			{
				_loc_3 = param1.charCodeAt(_loc_2);
				if(_loc_3 >= 127 || _loc_3 < 32)
				{
					if(_loc_2 == (param1.length - 1))
					{
						param1 = param1.substr(0, param1.length - 1);
					}
					else
					{
						if(_loc_2 == 0)
						{
							param1 = param1.substr(1);
						}
						else
						{
							param1 = (param1.substr(0, _loc_2)) + (param1.substr(_loc_2 + 1));
						}
					}
				}
				_loc_2 = _loc_2 - 1;
			}
			return param1;
		}

		final public static function remove_triplets(param1:String) : String
		{
			var _loc_3:uint = 0;
			var _loc_2:int = param1.length - 1;
			return param1;
			return param1;
		}

		final public static function remove_duplicates(param1:String, param2:uint = 3)
		{
			var _loc_4:uint = 0;
			var _loc_3:int = param1.length - 1;
			var _loc_5:uint = 0;
			var _loc_6:uint = 0;
			if(param2 >= param1.length)
			{
				return param1;
			}
			while(_loc_3 >= 0)
			{
				_loc_4 = param1.charCodeAt(_loc_3);
				if(_loc_4 == _loc_5)
				{
					_loc_6 = _loc_6 + 1;
					if(_loc_6 >= param2)
					{
						if(_loc_3 == (param1.length - 1))
						{
							param1 = param1.substr(0, param1.length - 1);
						}
						else
						{
							if(_loc_3 == 0)
							{
								param1 = param1.substr(1);
							}
							else
							{
								param1 = (param1.substr(0, _loc_3)) + (param1.substr(_loc_3 + 1));
							}
						}
					}
				}
				else
				{
					_loc_6 = 0;
				}
				_loc_5 = _loc_4;
				_loc_3 = _loc_3 - 1;
			}
			return param1;
		}

		final public static function replace(param1:String, param2:String, param3:String) : String
		{
			var _loc_5:* = undefined;
			var _loc_6:* = undefined;
			var _loc_7:* = undefined;
			var _loc_4:Number = 0;
			while(_loc_4 < param3.length)
			{
				_loc_5 = param3.indexOf(param1, _loc_4);
				if(_loc_5 == -1)
				{
					break;
					break;
				}
				_loc_6 = param3.substr(0, _loc_5);
				_loc_7 = param3.substr(_loc_5 + param1.length, param3.length);
				param3 = (_loc_6 + param2) + _loc_7;
				_loc_4 = _loc_6.length + param2.length;
			}
			return param3;
		}

		final public static function htmlspecialchars(param1:String) : String
		{
			var _loc_2:String = null;
			_loc_2 = StringEx.replace("&", "&amp;", param1);
			_loc_2 = StringEx.replace("<", "&lt;", _loc_2);
			_loc_2 = StringEx.replace(">", "&gt;", _loc_2);
			return _loc_2;
		}

		final public static function isCodeAlphaNumeric(param1:Number) : Boolean
		{
			if(param1 >= 48 && param1 <= 57 || param1 >= 65 && param1 <= 90 || param1 >= 97 && param1 <= 122)
			{
				return true;
			}
			return false;
		}

		public function StringEx()
		{
			super();
		}
	}
}
package window
{
	import flash.display.*;

	dynamic public class Bottom extends Sprite
	{
		public function Bottom()
		{
			super();
		}
	}
}
package window
{
	import flash.display.*;

	dynamic public class BottomLeft extends Sprite
	{
		public function BottomLeft()
		{
			super();
		}
	}
}
package window
{
	import flash.display.*;

	dynamic public class BottomRight extends Sprite
	{
		public function BottomRight()
		{
			super();
		}
	}
}
package window
{
	import flash.display.*;

	dynamic public class Close extends Sprite
	{
		public function Close()
		{
			super();
		}
	}
}
package window
{
	import flash.display.*;

	dynamic public class Left extends Sprite
	{
		public function Left()
		{
			super();
		}
	}
}
package window
{
	import flash.display.*;

	dynamic public class Right extends Sprite
	{
		public function Right()
		{
			super();
		}
	}
}
package window
{
	import flash.display.*;

	dynamic public class Top extends Sprite
	{
		public function Top()
		{
			super();
		}
	}
}
package window
{
	import flash.display.*;

	dynamic public class TopLeft extends Sprite
	{
		public function TopLeft()
		{
			super();
		}
	}
}
package window
{
	import flash.display.*;

	dynamic public class TopRight extends Sprite
	{
		public function TopRight()
		{
			super();
		}
	}
}
